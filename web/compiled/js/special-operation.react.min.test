var Modal = ReactBootstrap.Modal;
var Tab = ReactBootstrap.Tab;
var Tabs = ReactBootstrap.Tabs;
var Nav = ReactBootstrap.Nav;
var NavItem = ReactBootstrap.NavItem;

var VoterCropModal = React.createClass({displayName: "VoterCropModal",

    getInitialState: function () {
        return {
            imageCropper : null
        };
    },

    render: function () {
        var photoUrl = window.imgUrl + this.props.proId + '_' + this.props.generatedIdNo + "?" + new Date().getTime();
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Crop Photo")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                
                React.createElement("div", null, 
                    React.createElement("img", {id: "original_image", style: {maxWidth: "100%"}, src: photoUrl})
                ), 
                React.createElement("div", {className: "col-md-12 text-right", style: { marginTop: "15px"}}, 
                    React.createElement("button", {className: "btn btn-sm btn-primary", onClick: this.saveImage, style: { marginRight : "10px"}}, "Crop Selected Area"), 
                React.createElement("button", {className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close ")

                )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initCropper();
    },

    initCropper : function(){
        var self = this;
        var image = document.getElementById('original_image');
        var croppable = false;

        var cropper = new Cropper(image, {
            aspectRatio: 4 / 5,
            autoCropArea: 0.65,
            viewMode: 1,
            ready: function () {
              croppable = true;
            },
        });

        this.imageCropper = cropper;
    },

    saveImage : function(){
        
        console.log("saving image");
        var self = this;

        var croppedCanvas = this.imageCropper.getCroppedCanvas();

        croppedCanvas.toBlob(function (blob) {
            console.log("blob data");
            console.log(blob);

            var formData = new FormData();
            formData.append('files[]', blob, 'profile_photo.jpg');

            $.ajax(Routing.generate('ajax_upload_project_voter_photo', { proId: self.props.proId, proVoterId: self.props.proVoterId }), {
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false }).done(function(res){
                self.props.onSuccess();
                self.props.onHide();
            }).fail(function(err){
                console.log("something went wrong");
            });
        });
    }

});

window.VoterCropModal = VoterCropModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterEditModal = React.createClass({displayName: "VoterEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    category: "",
                    cellphone: "",
                    organization: "",
                    voterGroup: ""
                },
                errors: []
            },
            voter: {
                status : 'I'
            },
            showCropModal : false
        };
    },

    componentDidMount: function () {
        console.log('pro id');
        console.log(this.props.proId);
        console.log('pro voter id');
        console.log(this.props.proVoterId);
        
        this.loadVoter(this.props.proId, this.props.proVoterId);
        this.initSelect2();
        this.initUploader();
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proVoterId: proVoterId, proId: proId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.cellphone = res.cellphoneNo;
            form.data.category = res.category;
            form.data.organization = res.organization;
            form.data.voterGroup = res.voterGroup;
            form.data.proIdCode = res.proIdCode;
            form.data.assignedPrecinct = res.assignedPrecinct;
            form.data.precinctNo = res.precinctNo;
            form.data.remarks = res.remarks;
            form.data.status = res.status;

            self.setState({ form: form, voter: res }, self.reinitSelect2);
        });
    },

    initSelect2: function () {

        $("#voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        var self = this;

        $("#voter-group-select2").on("change", function () {
            self.setFieldValue("voterGroup", $(this).val());
        });
    },

    reinitSelect2: function () {
        var voterGroup = this.state.form.data.voterGroup;

        $("#voter-group-select2").empty()
            .append($("<option />")
                .val(voterGroup)
                .text(voterGroup))
            .trigger("change");
    },


    initUploader: function () {
        var self = this;

        $('#voter-photo-upload').fileupload({
            dataType: 'json',
            done: function (e, data) {
                $.each(data.result.files, function (index, file) {
                    $('<p/>').text(file.name).appendTo(document.body);
                });
            
                self.refresh();
                self.openCropModal();
            },
            progressall: function (e, data) {
                var progress = parseInt(data.loaded / data.total * 100, 10);
            }
        });
    },

    openCropModal : function(){
        this.setState({ showCropModal : true });
    },

    closeCropModal : function(){
        this.setState({ showCropModal : false });
    },

    generateIdNo: function () {
        var self = this;
        
        alert("generating id number");

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter_generate_id_no", {
                proVoterId: self.props.proVoterId,
                proId: self.props.proId
            }),
            type: "GET"
        }).done(function (res) {
            alert("ID NO has been created : " + res.proIdCode);
            self.refresh();
        });
    },

    resetId: function () {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter_reset_id", {
                proVoterId: self.props.proVoterId,
                proId: self.props.proId
            }),
            type: "GET"
        }).done(function (res) {
            alert("You can now re-print this member ID");
            self.refresh();
        });
    },

    refresh : function(){
        this.loadVoter(this.props.proId, this.props.proVoterId);
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = this.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate('ajax_patch_project_voter', {
                proVoterId: this.props.proVoterId,
                proId: this.props.proId
            }),
            type: "PATCH",
            data: (data)
        }).done(function (res) {
            self.props.notify("Record has been updated.", "ruby");
            self.props.onHide();
        }).fail(function (err) {
            if (err.status == '401') {
                self.props.notify("You dont have the permission to update this record.", "ruby");
            } else {
                self.props.notify("Form Validation Failed.", "ruby");
            }
            self.setErrors(err.responseJSON);
        });
    },

    render: function () {
        if (!this.isEmpty(this.state.voter)) {
            var photoUrl = window.imgUrl + this.props.proId + '_' + this.state.voter.generatedIdNo + "?" + new Date().getTime();
        }

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, bsSize: "lg", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Update Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-4"}, 
                            React.createElement("div", {onClick: this.openCropModal}, 
                                React.createElement("img", {src: photoUrl, className: "img-responsive", alt: ""})
                            ), 
                            
                                this.state.showCropModal && 
                                (
                                    React.createElement(VoterCropModal, {
                                        proId: this.props.proId, 
                                        proVoterId: this.props.proVoterId, 
                                        generatedIdNo: this.state.voter.generatedIdNo, 
                                        show: this.state.showCropModal, 
                                        onHide: this.closeCropModal, 
                                        onSuccess: this.refresh}
                                    )
                                ), 
                            
                            React.createElement("div", {className: "profile-userbuttons", style: { marginTop: "10px"}}, 
                                React.createElement("span", {className: "btn col-md-12 green btn-sm fileinput-button "}, 
                                    React.createElement("span", null, " Change Photo"), 
                                    React.createElement("input", {id: "voter-photo-upload", type: "file", name: "files[]", "data-url": Routing.generate('ajax_upload_project_voter_photo', { proId: this.props.proId, proVoterId: this.props.proVoterId }), multiple: false})
                                )
                            ), 

                            !this.isEmpty(this.state.voter) && this.isEmpty(this.state.voter.generateIdNo) && (
                                React.createElement("div", null, 
                                    React.createElement("button", {className: "btn btn-primary btn-sm col-md-12", onClick: this.generateIdNo, style: { "marginTop": "10px"}}, "Generate ID No")
                                )
                            ), 
                            !this.isEmpty(this.state.voter) && this.state.voter.hasId && (
                                React.createElement("div", null, 
                                    React.createElement("button", {className: "btn btn-info btn-sm col-md-12", onClick: this.resetId, style: { "marginTop": "10px"}}, "Reprint ID")
                                )
                            ), 

                            !this.isEmpty(this.state.voter) &&
                                (
                                    React.createElement("div", {style: { marginTop: "90px"}}, 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Name : "), " ", this.state.voter.voterName, " ")), 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Municipality :"), " ", this.state.voter.municipalityName)), 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Barangay :"), " ", this.state.voter.barangayName)), 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Precinct No :"), " ", this.state.voter.precinctNo)), 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Assigned Precinct :"), " ", this.state.voter.assignedPrecinct))
                                    )
                                )
                            
                        ), 
                        React.createElement("div", {className: "col-md-8"}, 
                            React.createElement("form", {id: "voter-updated-form"}, 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                                React.createElement(ControlLabel, null, " Precinct No : "), 
                                                React.createElement(FormControl, {bsClass: "form-control input-sm", name: "precinctNo", value: this.state.form.data.precinctNo, disabled: true}), 
                                                React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                            )
                                        ), 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formAssignedPrecinct", validationState: this.getValidationState('assignedPrecinct')}, 
                                                React.createElement(ControlLabel, null, " Assigned Precinct No : "), 
                                                React.createElement(FormControl, {bsClass: "form-control input-sm", name: "assignedPrecinct", value: this.state.form.data.assignedPrecinct, onChange: this.setFormProp}), 
                                                React.createElement(HelpBlock, null, this.getError('assignedPrecinct'))
                                            )
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "clearfix"}), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formProIdCode", validationState: this.getValidationState('proIdCode')}, 
                                                React.createElement(ControlLabel, null, " ID No : "), 
                                                React.createElement(FormControl, {bsClass: "form-control input-sm", disabled: true, name: "proIdCode", value: this.state.form.data.proIdCode, onChange: this.setFormProp}), 
                                                React.createElement(HelpBlock, null, this.getError('proIdCode'))
                                            )
                                        ), 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formStatus", validationState: this.getValidationState('status')}, 
                                                React.createElement(ControlLabel, null, " Status : "), 
                                                React.createElement(FormControl, {componentClass: "select", bsClass: "form-control input-sm", name: "status", value: this.state.form.data.status, onChange: this.setFormProp}, 
                                                    React.createElement("option", {value: ""}, " -- Select Status --"), 
                                                    React.createElement("option", {value: "A"}, "Active"), 
                                                    React.createElement("option", {value: "I"}, "Inactive"), 
                                                    React.createElement("option", {value: "B"}, "Blocked")
                                                ), 
                                                React.createElement(HelpBlock, null, this.getError('status'))
                                            )
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "clearfix"}), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formVoterGroup", validationState: this.getValidationState('voterGroup')}, 
                                                React.createElement(ControlLabel, null, "Position : "), 
                                                React.createElement("select", {id: "voter-group-select2", className: "form-control input-sm"}, 
                                                    React.createElement("option", {value: ""}, " ")
                                                ), 
                                                React.createElement(HelpBlock, null, this.getError('voterGroup'))
                                            )
                                        ), 

                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                                React.createElement(ControlLabel, null, " Cellphone : "), 
                                                React.createElement(FormControl, {bsClass: "form-control input-sm", name: "cellphone", value: this.state.form.data.cellphone, onChange: this.setFormProp}), 
                                                React.createElement(HelpBlock, null, this.getError('cellphone'))
                                            )
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "clearfix"}), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("div", {className: "col-md-12"}, 
                                            React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                                React.createElement(ControlLabel, null, " Remarks : "), 
                                                React.createElement(FormControl, {componentClass: "textarea", rows: "5", bsClass: "form-control input-sm", name: "remarks", value: this.state.form.data.remarks, onChange: this.setFormProp}), 
                                                React.createElement(HelpBlock, null, this.getError('remarks'))
                                            )
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "text-right col-md-12"}, 
                                    React.createElement("button", {type: "button", className: "btn btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                                    React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit")
                                )

                            )
                        )
                    )

                )
            )
        );
    }

});

window.VoterEditModal = VoterEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryCreateModal = React.createClass({displayName: "VoterTemporaryCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                    React.createElement(ControlLabel, null, " Precinct No : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.precinctNo, className: "input-sm form-control", onChange: this.setFormProp, name: "precinctNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 
                        
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });


        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#new-voter-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#new-voter-create-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }

        if (!self.props.user.isAdmin) {
            $("#new-voter-create-form #municipality_select2").attr('disabled', 'disabled');
        }
    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, voterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.nodeLabel = res.voterName;
            form.data.nodeOrder = 10;
            form.data.municipalityNo = res.municipalityNo;
            form.data.brgyNo = res.brgyNo;
            form.data.voterId = res.voterId;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? "" : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? "KFC" : res.voterGroup;
            form.data.remarks = self.isEmpty(res.remarks) ? "" : res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");


            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-create-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-create-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-create-form #occupation_select2').val();
        data.religion = $('#new-voter-create-form #religion_select2').val();
        data.dialect = $('#new-voter-create-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-create-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-create-form #voter_group_select2').val();
        data.position = $('#new-voter-create-form #other_position_select2').val();

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_project_temporary_voter"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.VoterTemporaryCreateModal = VoterTemporaryCreateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SpecialOperationPrintModal = React.createClass({displayName: "SpecialOperationPrintModal",

    getInitialState: function () {
        return {
            printMode: 'SO',
            unselected: [],
            options: [],
            form: {
                data: {
                    profiles: [],

                },
                errors: []
            }
        };
    },

    componentDidMount: function () {
        this.initMultiSelect();
        this.loadProfiles();
    },

    componentWillUnmount: function () {
        this.isEmpty(this.requestProfiles) || this.requestProfiles.abort();
    },

    loadProfiles: function () {
        var self = this;

        self.requestProfiles = $.ajax({
            url: Routing.generate("ajax_get_so_no_id", { id: this.props.id }),
            type: "GET"
        }).done(function (res) {
            self.setState({ options: res, unselected: res });
            setTimeout(self.refreshSelectBox, 2000);
        });
    },

    initMultiSelect: function () {
        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' class='form-control' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' class='form-control' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setProfiles($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setProfiles($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });


    },

    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setProfiles: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.profiles = selected;
            unselected = this.state.options.filter(function (item) {
                return selected.indexOf(item.pro_voter_id) == -1;
            });
        } else {
            form.data.profiles = [];
            unselected = this.state.options;
        }

        this.setState({ form: form, unselected: unselected });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }

        return null;
    },

    getValidationState: function (field) {
        if (this.getError(field) != null)
            return "error";

        return null;
    },

    submit: function (e) {
        e.preventDefault();
        var self = this;
        var data = self.state.form.data;
        data.printOrigin = "SPECIAL OPERATIONS";

        self.requestTransmit = $.ajax({
            url: Routing.generate('ajax_post_project_print', { proId: this.props.proId }),
            type: 'POST',
            data: (data)
        }).done(function (res) {
            self.props.onHide();
        }).fail(function (res) {
            self.setErrors(res.responseJSON);
        });
    },

    popupCenter: function (url, title, w, h) {
        // Fixes dual-screen position                         Most browsers      Firefox  
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;
        var width = 0;
        var height = 0;

        width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

        // Puts focus on the newWindow  
        if (window.focus) {
            newWindow.focus();
        }
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    render: function () {

        return (
            React.createElement(Modal, {enforceFocus: false, backdrop: "static", dialogClassName: "modal-custom-85", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {closeButton: true}, 
                    React.createElement(Modal.Title, null, "Create Template")
                ), 

                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    React.createElement("form", {onSubmit: this.submit}, 
                        React.createElement("div", {className: "col-md-12 no-padding"}, 
                            React.createElement("div", {className: "text-right"}, 
                                React.createElement("button", {type: "button", onClick: this.deselectAll, className: "btn btn-xs btn-default", style: { marginRight: "5px"}}, "Deselect All"), 
                                React.createElement("button", {type: "button", onClick: this.selectAll, className: "btn btn-xs btn-success"}, "Select All")
                            )
                        ), 
                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "col-md-6 no-padding"}, 
                            React.createElement("div", null, React.createElement("strong", null, "Available :"), " ", this.state.unselected.length)
                        ), 
                        React.createElement("div", {className: "col-md-6 "}, 
                            React.createElement("div", {style: { marginLeft: "32px"}}, React.createElement("strong", null, "Selected : "), " ", this.state.form.data.profiles.length)
                        ), 
                        React.createElement(FormGroup, {controlId: "formProfiles", validationState: this.getValidationState('profiles')}, 
                            React.createElement("select", {multiple: true, ref: "selectBox", className: "searchable", id: "contracts", name: "profiles[]"}, 
                                this.state.options.map(function (item) {
                                    return (React.createElement("option", {key: item.pro_voter_id, value: item.pro_voter_id}, item.voter_name, " (", item.voter_group, ") - ", item.barangay_name, " - ", item.generated_id_no))
                                })
                            ), 
                            React.createElement("div", {className: "text-right"}, 
                                React.createElement(HelpBlock, null, this.getError('profiles'))
                            )
                        ), 
                        React.createElement("div", {className: "clearfix"}), 
                        React.createElement("div", {className: "text-right m-t-md"}, 
                            React.createElement("button", {type: "button", className: "btn btn-default", onClick: this.props.onHide}, "Cancel"), 
                            React.createElement("button", {type: "submit", className: "btn btn-primary"}, "Submit")
                        )
                    )
                )
            )
        );
    }
});


window.SpecialOperationPrintModal = SpecialOperationPrintModal;
var Modal = ReactBootstrap.Modal;
var Tab = ReactBootstrap.Tab;
var Tabs = ReactBootstrap.Tabs;
var Nav = ReactBootstrap.Nav;
var NavItem = ReactBootstrap.NavItem;

var SpecialOperationCropModal = React.createClass({displayName: "SpecialOperationCropModal",

    getInitialState: function () {
        return {
            imageCropper : null
        };
    },

    render: function () {
        let imgUrl = Routing.generate("ajax_get_special_ops_upload_photo", { id: this.props.itemId });

        var photoUrl = imgUrl + "?" + new Date().getTime();
        
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Crop Photo")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                
                React.createElement("div", null, 
                    React.createElement("img", {id: "original_image", style: {maxWidth: "100%"}, src: photoUrl})
                ), 
                React.createElement("div", {className: "col-md-12 text-right", style: { marginTop: "15px"}}, 
                    React.createElement("button", {className: "btn btn-sm btn-primary", onClick: this.saveImage, style: { marginRight : "10px"}}, "Crop Selected Area"), 
                React.createElement("button", {className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close ")

                )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initCropper();
    },

    initCropper : function(){
        var self = this;
        var image = document.getElementById('original_image');
        var croppable = false;

        var cropper = new Cropper(image, {
            aspectRatio: 4 / 5,
            autoCropArea: 0.65,
            viewMode: 1,
            ready: function () {
              croppable = true;
            },
        });

        this.imageCropper = cropper;
    },

    saveImage : function(){
        
        console.log("saving image");
        var self = this;

        var croppedCanvas = this.imageCropper.getCroppedCanvas();

        croppedCanvas.toBlob(function (blob) {
            console.log("blob data");
            console.log(blob);

            var formData = new FormData();
            formData.append('files[]', blob, 'profile_photo.jpg');

            $.ajax(Routing.generate('ajax_upload_project_voter_photo', { proId: self.props.proId, proVoterId: self.props.proVoterId }), {
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false }).done(function(res){
                self.props.onSuccess();
                self.props.onHide();
            }).fail(function(err){
                console.log("something went wrong");
            });
        });
    }

});

window.SpecialOperationCropModal = SpecialOperationCropModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SpecialOperationPhotoEditModal = React.createClass({displayName: "SpecialOperationPhotoEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    filename: "",
                    voterGroup: "",
                    proVoterId: null,
                    proIdCode: null,
                    generatedIdNo: null,
                },
                errors: []
            },
            voter: {
                status: 'I'
            },

            showNewVoterCreateModal: false
        };
    },

    componentDidMount: function () {
        this.loadData(this.props.itemId);
    },


    loadData: function (id) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_special_operation_upload_item_detail", { id: id }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data = res;

            self.setState({ form: form }, self.initSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.item.name, text: item.name };
                        })
                    };
                },
            }
        });

        $("#barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay_alt'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityName: $("#municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters_alt'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: 3,
                        electId: 4,
                        provinceCode: 53,
                        municipalityName: $("#municipality_select2").val(),
                        brgyNo: $("#barangay_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").on("change", function () {
            self.loadVoter(self.props.proId, $(this).val());
        });


        $("#voter_group_select2").on("change", function () {
            self.setFieldValue("voterGroup", $(this).val());
        });

        $("#municipality_select2").on("change", function () {
            self.setFieldValue("municipalityName", $(this).val());
        });

        $("#barangay_select2").on("change", function () {
            self.setFieldValue("barangayNo", $(this).val());
        });

        $("#municipality_select2").empty()
            .append($("<option/>")
                .val(this.props.municipalityName)
                .text(this.props.municipalityName))
            .trigger("change");


        var data = self.state.form.data;

        $("#form-voter-select2").empty()
            .append($("<option/>")
                .val(data.proVoterId)
                .text(data.displayName))
            .trigger("change");
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: 3, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.proIdCode = res.proIdCode;
            form.data.voterName = res.voterName;
            form.data.generatedIdNo = res.generatedIdNo;
            form.data.voterGroup = res.voterGroup;
            form.data.cellphoneNo = res.cellphone;


            var voterGroup = self.isEmpty(res.voterGroup) ? "LPPP3" : res.voterGroup;

            $("#voter_group_select2").empty()
                .append($("<option/>")
                    .val(voterGroup)
                    .text(voterGroup))
                .trigger("change");

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';
        form.data.position = '';
        form.data.voterGroup = "";
        form.data.cellphone = '';

        $("#voter_group_select2").empty()
            .append($("<option/>")
                .val('')
                .text(''))
            .trigger("change");


        self.setState({ form: form })
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    openNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: true });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false })
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        self.requestPost = $.ajax({
            url: Routing.generate('ajax_patch_special_operation_upload_item', {
                id: this.props.itemId
            }),
            type: "PATCH",
            data: (data)
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    },

    render: function () {
        var data = this.state.form.data;

        let imgUrl = Routing.generate("ajax_get_special_ops_upload_photo", { id: this.props.itemId });

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-custom-85", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Edit File")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: "3", 
                            electId: "4", 
                            provinceCode: "3", 
                            show: this.state.showNewVoterCreateModal, 
                            notify: this.props.notify, 
                            onHide: this.closeNewVoterCreateModal}
                        ), 
                    
                    React.createElement("form", {id: "voter-updated-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-5"}, 
                                React.createElement("a", {className: "thumbnail"}, 
                                    React.createElement("img", {src: imgUrl})
                                )
                            ), 
                            React.createElement("div", {className: "col-md-7"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-4"}, 
                                        React.createElement(FormGroup, {controlId: "formMunicipalityNo"}, 
                                            React.createElement(ControlLabel, null, " Municipality : "), 
                                            React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                            )
                                        )
                                    ), 

                                    React.createElement("div", {className: "col-md-4"}, 
                                        React.createElement(FormGroup, {controlId: "formBrgyNo"}, 
                                            React.createElement(ControlLabel, null, " Barangay : "), 
                                            React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                            )
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-8"}, 
                                        React.createElement(FormGroup, {controlId: "formFilename", validationState: this.getValidationState('filename')}, 
                                            React.createElement(ControlLabel, null, " Filename : "), 
                                            React.createElement(FormControl, {type: "text", bsClass: "form-control input-sm", name: "filename", value: this.state.form.data.filename, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('filename'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-8"}, 
                                        React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('voterName')}, 
                                            React.createElement(ControlLabel, null, " Voter Name : "), 
                                            React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('voterName'))
                                        )
                                    )

                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-4"}, 
                                        React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                            React.createElement(ControlLabel, null, " Cellphone No : "), 
                                            React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                            React.createElement(HelpBlock, null, this.getError('cellphone'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement("div", {className: "form-group"}, 
                                            React.createElement("label", {className: "control-label"}, "Position"), 
                                            React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                            )
                                        )
                                    )
                                )

                                
                                    //     <div className="row">
                                    //     <div className="col-md-8">
                                    //         <FormGroup controlId="formFilename" validationState={this.getValidationState('filename')}>
                                    //             <ControlLabel > Position : </ControlLabel>
                                    //             <FormControl type="text" bsClass="form-control input-sm" name="filename" value={this.state.form.data.filename} onChange={this.setFormProp} />
                                    //             <HelpBlock>{this.getError('filename')}</HelpBlock>
                                    //         </FormGroup>
                                    //     </div>
                                    // </div>
                                
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement("div", {className: "text-right"}, 
                                    React.createElement("button", {type: "button", className: "btn blue-madison", style: { marginRight: "5px"}, onClick: this.submit}, "Submit"), 
                                    React.createElement("button", {type: "button", className: "btn btn-default", onClick: this.props.onHide}, "Close")
                                )
                            )
                        )

                    )

                )
            )
        );
    }

});

window.SpecialOperationPhotoEditModal = SpecialOperationPhotoEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SpecialOperationPhotoModal = React.createClass({displayName: "SpecialOperationPhotoModal",
    getInitialState: function () {
        return {
            proIdCode: null,
            member: null,
            showAttendeeModal: false,
            showAttendeeBatchModal: false,
            events: [],
            selectedEvent: null,
            showItemEditModal: false,
            targetId: null,
            municipalityName: null,
            baragayName: null,
            brgyNo: null,
            showItemEditModal: false,
            uploadFilter: "UNLINKED"
        }
    },

    render: function () {
        var self = this;

        // if (this.state.member != null) {
        //     var generatedIdNo = this.state.member.generated_id_no;
        //     var photoUrl = window.imgUrl + this.props.proId + '_' + generatedIdNo + "?" + new Date().getTime();
        // }

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, dialogClassName: "modal-full", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Uploaded Items")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("div", {className: "row"}, 
                        
                            this.state.showItemEditModal && this.state.targetId != null &&
                            (
                                React.createElement(SpecialOperationPhotoEditModal, {
                                    show: this.state.showItemEditModal, 
                                    onHide: this.closeItemEditModal, 
                                    itemId: this.state.targetId, 
                                    municipalityName: this.state.municipalityName, 
                                    barangayName: this.state.barangayName, 
                                    brgyNo: this.state.brgyNo, 
                                    onSuccess: this.openCropModal}
                                )
                            ), 
                        

                        
                            this.state.showCropModal && this.state.data.generatedIdNo != null &&
                            (
                                React.createElement(SpecialOperationCropModal, {
                                    proId: "3", 
                                    proVoterId: this.state.data.proVoterId, 
                                    itemId: this.state.data.id, 
                                    generatedIdNo: this.state.data.generatedIdNo, 
                                    show: this.state.showCropModal, 
                                    onHide: this.closeCropModal, 
                                    onSuccess: this.reloadDatatable}
                                )
                            ), 
                        

                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement("div", {className: "mt-radio-inline"}, 
                                React.createElement("label", {className: "mt-radio"}, 
                                    React.createElement("input", {type: "radio", name: "uploadFilter", onChange: this.setUploadFilter, value: "LINKED", checked: this.state.uploadFilter == "LINKED"}), " Linked", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("label", {className: "mt-radio"}, 
                                    React.createElement("input", {type: "radio", name: "uploadFilter", onChange: this.setUploadFilter, value: "UNLINKED", checked: this.state.uploadFilter == "UNLINKED"}), " Unlinked", 
                                    React.createElement("span", null)
                                ), 

                                React.createElement("label", {className: "mt-radio"}, 
                                    React.createElement("input", {type: "radio", name: "uploadFilter", onChange: this.setUploadFilter, value: "NOT_FOUND", checked: this.state.uploadFilter == "NOT_FOUND"}), "Not FOUND", 
                                    React.createElement("span", null)
                                ), 

                                React.createElement("label", {className: "mt-radio"}, 
                                    React.createElement("input", {type: "radio", name: "uploadFilter", onChange: this.setUploadFilter, value: "ALL", checked: this.state.uploadFilter == "ALL"}), " All", 
                                    React.createElement("span", null)
                                )
                            )
                        ), 

                        React.createElement("div", {className: "col-md-12"}, 

                            React.createElement("div", {className: "table-container"}, 
                                React.createElement("div", {className: "table-actions-wrapper"}
                                ), 
                                React.createElement("table", {id: "photo_upload_items_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                                    React.createElement("thead", null, 
                                        React.createElement("tr", null, 
                                            React.createElement("th", null, "No"), 
                                            React.createElement("th", null, "Uploaded"), 
                                            React.createElement("th", null, "Cropped"), 
                                            React.createElement("th", null, "filename"), 
                                            React.createElement("th", null, "Municipality"), 
                                            React.createElement("th", null, "Barangay"), 
                                            React.createElement("th", null, "Actions")
                                        ), 
                                        React.createElement("tr", null, 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", {style: { padding: "10px 5px"}}, 
                                                React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "filename", onChange: this.handleFilterChange})
                                            ), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", {className: "text-center"}, 
                                                React.createElement("button", {style: { marginTop: "5px", marginBottom: "5px"}, className: "btn btn-xs green btn-outline filter-submit"}, 
                                                    React.createElement("i", {className: "fa fa-search"}), "Search"
                                                )
                                            )
                                        )
                                    ), 
                                    React.createElement("tbody", null
                                    )
                                )
                            )

                        )

                    )
                )
            )
        );
    },


    componentDidMount: function () {
        this.initDatatable();
    },


    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        console.log("init datatable");

        var photo_upload_items_datatable = $("#photo_upload_items_datatable");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_datatable_special_ops_upload_items", { recId: this.props.recId }, true);

        grid_project_event.init({
            src: photo_upload_items_datatable,
            dataTable: {
                "bState": true,
                "autoWidth": true,
                "serverSide": true,
                "processing": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.hdrId = '53';
                        d.filename = $('#photo_upload_items_datatable input[name="filename"]').val();
                    }
                },
                pageLength: 100,
                columnDefs: [
                    {
                        'className': 'text-center valign-middle',
                        'orderable': false,
                        'targets': [0, 2, 3, 4, 5, 6]
                    }
                ],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 20,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "id",
                        "className": "text-center",
                        "render": function (data, type, row) {
                            let imgUrl = Routing.generate("ajax_get_special_ops_upload_photo", { id: data });
                            return '<img src="' + imgUrl + '" style="width:150px;height:auto;"/><strong style="margin-top:10px;">';
                        }
                    },
                    {
                        "data": "id",
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var photoUrl = window.imgUrl + 3 + '_' + row.generated_id_no + "?" + new Date().getTime();
                            return '<img src="' + photoUrl + '" style="width:150px;height:auto;"/><strong style="margin-top:10px;">';
                        }
                    },
                    {
                        "data": "filename",
                        "className": "text-center",
                        "width": 250
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "render": function () {
                            return "";
                        }
                    },

                    {
                        "width": 100,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var cropBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green crop-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-crop' ></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs btn-danger delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";

                            return editBtn + cropBtn + deleteBtn;
                        }
                    }
                ],
            }

        });


        photo_upload_items_datatable.on('click', '.edit-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.edit(data.id, data.municipality_name, data.barangay_name, data.brgy_no);
        });

        photo_upload_items_datatable.on('click', '.crop-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            console.log("open crop modal");
            self.setState({
                data: {
                    id: data.id,
                    proVoterId: data.pro_voter_id,
                    generatedIdNo: data.generated_id_no
                },
                showCropModal: true
            })
        });

        photo_upload_items_datatable.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    edit: function (id, municipalityName, barangayName, brgyNo) {
        this.setState({
            showItemEditModal: true,
            targetId: id,
            municipalityName: municipalityName,
            barangayName: barangayName,
            brgyNo: brgyNo
        });
    },

    delete: function (id) {
        var self = this;

        if (confirm("continue delete?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_special_operation_photo", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reloadDatatable();
            });
        }
    },

    closeItemEditModal: function () {
        this.setState({
            showItemEditModal: false,
            targetId: null,
            municipalityName: null,
            barangayName: null,
            brgyNo: null
        }, this.reloadDatatable);
    },

    setFormProp: function (e) {
        this.setState({ proIdCode: e.target.value }, this.search);
    },

    reloadDatatable: function () {
        this.grid.getDataTable().ajax.reload(null, false);
    },

    openAttendeeBatchModal: function () {
        this.setState({ showAttendeeBatchModal: true });
    },

    openCropModal: function (data) {
        this.setState({ showCropModal: true, data: data })
    },

    closeCropModal: function () {
        this.setState({ showCropModal: false, data: null });
    },

    closeAttendeeBatchModal: function () {
        this.setState({ showAttendeeBatchModal: false });
    },

});


window.SpecialOperationPhotoModal = SpecialOperationPhotoModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SpecialOperationUploadPhotoModal = React.createClass({displayName: "SpecialOperationUploadPhotoModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    electId: 4,
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53,
            showNewVoterCreateModal: false
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Special Ops Photo Upload")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement("h4", null, "Members Photo Upload"), 
                            React.createElement("form", {action: "/file-upload", 
                                className: "dropzone", 
                                id: "photo-uploader"}
                            )
                        )
                    ), 
                    React.createElement("div", {className: "clearfix"}), 
                    React.createElement("br", null), 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12 text-right"}, 
                            React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        //initialize uploader
        this.initUploader()
    },

    initUploader() {
        var myDropzone = new Dropzone("#photo-uploader", { url: Routing.generate("ajax_special_ops_photo_upload", { recId: this.props.id }) });
        this.dropzone = myDropzone;
    }

});


window.SpecialOperationUploadPhotoModal = SpecialOperationUploadPhotoModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SpecialOperationMemberCreateModal = React.createClass({displayName: "SpecialOperationMemberCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterId: null,
                    birthdate: null,
                    cellphone: "",
                    voterGroup: "",
                    dialect: "",
                    religion: "",
                    isTagalog: 0,
                    isCuyonon: 0,
                    isBisaya: 0,
                    isIlonggo: 0,
                    isCatholic: 0,
                    isIslam: 0,
                    isInc: 0,
                    remarks: ""
                },
                errors: []
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#recruitment-member-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#recruitment-member-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#recruitment-member-create-form #form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: self.props.proId,
                        electId: self.props.electId,
                        provinceCode: 53,
                        municipalityNo: $("#municipality_select2").val(),
                        brgyNo: $("#barangay_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#recruitment-member-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#recruitment-member-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });

        $("#recruitment-member-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#recruitment-member-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#recruitment-member-create-form #form-voter-select2").on("change", function () {
            self.loadVoter(self.props.proId, $(this).val());
        });

        $("#recruitment-member-create-form #municipality_select2").on("change", function () {
            self.setFieldValue("municipalityNo", $(this).val());
        });

        $("#recruitment-member-create-form #barangay_select2").on("change", function () {
            self.setFieldValue("barangayNo", $(this).val());
        });

        $("#recruitment-member-create-form #dialect_select2").on("change", function () {
            self.setFieldValue("dialect", $(this).val());
        });

        $("#recruitment-member-create-form #religion_select2").on("change", function () {
            self.setFieldValue("religion", $(this).val());
        });

        $("#recruitment-member-create-form #voter_group_select2").on("change", function () {
            self.setFieldValue("voterGroup", $(this).val());
        });

        $("#recruitment-member-create-form #other_position_select2").on("change", function () {
            self.setFieldValue("position", $(this).val());
        });

        $("#recruitment-member-create-form #municipality_select2").empty()
            .append($("<option/>")
                .val(this.props.municipalityNo)
                .text(this.props.municipalityName))
            .trigger("change");

        $("#recruitment-member-create-form #barangay_select2").empty()
            .append($("<option/>")
                .val(this.props.barangayNo)
                .text(this.props.barangayName))
            .trigger("change");
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var chunks = res.voterName.split(",");
            var firstname = '';
            var middlename = '';
            var lastname = '';

            if (chunks.length > 1) {
                chunks = chunks[1].trim().split(" ");
                lastname = res.voterName.split(",")[0];
                middlename = chunks.length > 1 ? chunks[chunks.length - 1] : '';
                firstname = res.voterName.split(",")[1].replace(middlename, '');;
            } else {
                chunks = res.voterName.trim().split(" ");
                lastname = chunks[0];
                firstname = chunks[1];
                middlename = chunks.length > 2 ? chunks[2] : '';
            }

            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphone = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.birthdate = !self.isEmpty(res.birthdate) ? moment(res.birthdate).format('YYYY-MM-DD') : '';
            form.data.gender = res.gender;
            form.data.firstname = self.isEmpty(res.firstname) ? firstname.trim() : res.firstname;
            form.data.middlename = self.isEmpty(res.middlename) ? middlename.trim() : res.middlename;
            form.data.lastname = self.isEmpty(res.lastname) ? lastname.trim() : res.lastname;
            form.data.extName = res.extname;
            form.data.dialect = self.isEmpty(res.dialect) ? self.props.defaultDialect : res.dialect;
            form.data.religion = self.isEmpty(res.religion) ? self.props.defaultReligion : res.religion;
            form.data.voterGroup = res.voterGroup;
            form.data.isTagalog = self.isEmpty(res.isTagalog) ? 0 : res.isTagalog;
            form.data.isCuyonon = self.isEmpty(res.isCuyonon) ? 0 : res.isCuyonon;
            form.data.isBisaya = self.isEmpty(res.isBisaya) ? 0 : res.isBisaya;
            form.data.isIlonggo = self.isEmpty(res.isIlonggo) ? 0 : res.isIlonggo;
            form.data.isCatholic = self.isEmpty(res.isCatholic) ? 0 : res.isCatholic;
            form.data.isInc = self.isEmpty(res.isInc) ? 0 : res.isInc;
            form.data.isIslam = self.isEmpty(res.isIslam) ? 0 : res.isIslam;
            form.data.position = res.position;

            $("#recruitment-member-create-form #dialect_select2").empty()
                .append($("<option/>")
                    .val(form.data.dialect)
                    .text(form.data.dialect))
                .trigger("change");

            console.log('default dialect');
            console.log(self.props.defaultDialect);

            $("#recruitment-member-create-form #religion_select2").empty()
                .append($("<option/>")
                    .val(form.data.religion)
                    .text(form.data.religion))
                .trigger("change");


            var voterGroup = self.isEmpty(res.voterGroup) ? "JPM" : res.voterGroup;

            $("#recruitment-member-create-form #voter_group_select2").empty()
                .append($("<option/>")
                    .val(voterGroup)
                    .text(voterGroup))
                .trigger("change")

            $("#recruitment-member-create-form #other_position_select2").empty()
                .append($("<option/>")
                    .val(res.position)
                    .text(res.position))
                .trigger("change")

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';
        form.data.position = '';

        self.setState({ form: form })
    },

    reset: function () {
        var form = this.state.form;
        form.data.proVoterId = "";
        form.data.cellphone = "";
        form.data.firstname = "";
        form.data.lastname = "";
        form.data.middlename = "";
        form.data.extName = "";
        form.data.gender = "";
        form.data.birthdate = "";
        //form.data.religion = "";
        //form.data.dialect = "";
        form.data.isTagalog = 0;
        form.data.isBisaya = 0;
        form.data.isCuyonon = 0;
        form.data.Ilonggo = 0;
        form.data.isCatholic = 0;
        form.data.isInc = 0;
        form.data.isIslam = 0;
        form.data.voterGroup = "";
        form.data.remarks = "";
        form.data.position = "";

        form.errors = [];

        $("#recruitment-member-create-form #form-voter-select2").empty().trigger("change");
        //$("#recruitment-member-create-form #dialect_select2").empty().trigger("change");
        //$("#recruitment-member-create-form #religion_select2").empty().trigger("change");
        $("#recruitment-member-create-form #voter_group_select2").empty().trigger("change");

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setNewProfile: function (data) {
        var self = this;

        $("#recruitment-member-create-form #form-voter-select2").empty()
            .append($("<option/>")
                .val(data.proVoterId)
                .text(data.voterName))
            .trigger("change")
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },


    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.recId = self.props.recId;
        data.proId = self.props.proId;

        data.voterGroup = $("#recruitment-member-create-form #voter_group_select2").val();
        data.position = $("#recruitment-member-create-form #other_position_select2").val();

        self.requestAddAttendee = $.ajax({
            url: Routing.generate("ajax_post_special_operation_detail"),
            type: "POST",
            data: data
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
            self.notify("Member has been added.", "teal");
        }).fail(function (err) {
            self.notify("Form Validation Failed.", "ruby");
            self.setErrors(err.responseJSON);
        });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: true })
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-custom-85", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Leader : ", this.props.leader.voterName, " | ", this.props.leader.voterGroup)
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: self.props.proId, 
                            electId: self.props.electId, 
                            provinceCode: 53, 
                            show: this.state.showNewVoterCreateModal, 
                            onHide: this.closeNewVoterCreateModal, 
                            onSuccess: this.setNewProfile, 

                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "recruitment-member-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('barangayNo')}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('proVoterId')}, 
                                    React.createElement(ControlLabel, null, " Voter Name : "), 
                                    React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("button", {style: { marginTop: "25px"}, onClick: this.openNewVoterCreateModal, className: "btn btn-primary btn-sm", type: "button"}, " New Voter ")
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Apelyido : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Pangalan : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Gitnang Pangalan : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, value: data.gender, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formVoterGroup", validationState: this.getValidationState('voterGroup')}, 
                                    React.createElement(ControlLabel, null, " JPM Position : "), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterGroup'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formOtherPosition", validationState: this.getValidationState('position')}, 
                                    React.createElement(ControlLabel, null, " Barangay Position : "), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "position"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('position'))
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 

                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isTagalog", checked: data.isTagalog == 1, onChange: this.setFormCheckProp}), 
                                        "Is Tagalog", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("br", null), 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isCuyonon", checked: data.isCuyonon == 1, onChange: this.setFormCheckProp}), 
                                        "Is Cuyonon", 
                                        React.createElement("span", null)
                                ), 
                                React.createElement("br", null)
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isIlonggo", checked: data.isIlonggo == 1, onChange: this.setFormCheckProp}), 
                                        "Is Ilonggo", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("br", null), 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isBisaya", checked: data.isBisaya == 1, onChange: this.setFormCheckProp}), 
                                         "Is Bisaya", 
                                    React.createElement("span", null)
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formDialect", validationState: this.getValidationState('dialect')}, 
                                    React.createElement(ControlLabel, null, " Other Dialect : "), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('dialect'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row", style: { marginTop: "15px"}}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isCatholic", checked: data.isCatholic == 1, onChange: this.setFormCheckProp}), 
                                    "Is Catholic", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("br", null), 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isInc", checked: data.isInc == 1, onChange: this.setFormCheckProp}), 
                                    "Is INC", 
                                    React.createElement("span", null)
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isIslam", checked: data.isIslam == 1, onChange: this.setFormCheckProp}), 
                                    "Is Islam", 
                                    React.createElement("span", null)
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formReligion", validationState: this.getValidationState('religion')}, 
                                    React.createElement(ControlLabel, null, " Other Religion : "), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('religion'))
                                )
                            )
                        ), 




                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", disabled: this.isEmpty(this.state.form.data.proVoterId), type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.SpecialOperationMemberCreateModal = SpecialOperationMemberCreateModal;

var SpecialOperationDetailDatatable = React.createClass({displayName: "SpecialOperationDetailDatatable",

    getInitialState: function () {
        return {
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            showEditModal: false
        }
    },

    componentDidMount: function () {
        this.initDatatable(this.props.recId);
        console.log('rec id');
        console.log(this.props.recId);
    },

    initDatatable: function (recId) {
        var self = this;
        var grid = new Datatable();

        var project_recruitment_detail_datatable = $("#project_recruitment_detail_datatable");
        var grid_project_event = new Datatable();

        var url = Routing.generate("ajax_get_datatable_special_operation_detail", { recId: recId }, true);

        grid_project_event.init({
            src: project_recruitment_detail_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.provinceCode = '53';
                        d.voterName = $('#project_recruitment_detail_datatable input[name="voterName"]').val();
                        d.barangayName = $('#project_recruitment_detail_datatable input[name="barangayName"]').val();
                        d.householdId = self.props.householdId;
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6,7]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 20,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "id",
                        "className": "text-center",
                        "width" : 80,
                        "render": function (data, type, row) {
                            var photoUrl = window.imgUrl + 3 + '_' + row.generated_id_no + "?" + new Date().getTime();
                            return '<img src="' + photoUrl + '" style="width:80px;height:auto;"/><strong style="margin-top:10px;">';
                        }
                    },
                    {
                        "data": "voter_name",
                        "className": "text-left"
                    },
                    {
                        "data": "birthdate",
                        "className": "text-center",
                        "width": 100
                    },
                    {
                        "data": "voter_group",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150
                    },
                    {
                        "data": "cellphone",
                        "className": "text-center",
                        "width": 100,
                    },

                    {
                        "width": 60,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";

                            return editBtn + deleteBtn;
                        }
                    }
                ],
            }
        });


        project_recruitment_detail_datatable.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        project_recruitment_detail_datatable.on('click', '.edit-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.edit(data.pro_voter_id);
        });

        self.grid = grid_project_event;
    },

    edit: function (proVoterId) {
        this.setState({ showEditModal: true, target: proVoterId })
    },

    closeEditModal: function () {
        this.reload();
        this.setState({ showEditModal: false, target: null });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to remove recruit?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_special_operation_detail", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    reloadFiltered: function (precinctNo) {
        var self = this;
        $('#project_recruitment_detail_datatable input[name="assignedPrecinct"]').val(precinctNo);

        setTimeout(function () {
            self.grid.getDataTable().ajax.reload();
        });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },


    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    render: function () {
        return (
            React.createElement("div", null, 

                
                this.state.showEditModal &&
                    React.createElement(VoterEditModal, {
                        show: this.state.showEditModal, 
                        onHide: this.closeEditModal, 
                        notify: this.props.notify, 
                        proVoterId: this.state.target, 
                        user: this.state.user, 
                        proId: this.props.proId, 
                        electId: this.props.electId}
                    ), 
                


                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "project_recruitment_detail_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Photo"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Birthdate"), 
                                React.createElement("th", null, "Position"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Cellphone #"), 
                                React.createElement("th", null, "Actions")
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "birthdate", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "relationship", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangayName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.SpecialOperationDetailDatatable = SpecialOperationDetailDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SpecialOperationMemberModal = React.createClass({displayName: "SpecialOperationMemberModal",
    getInitialState: function () {
        return {
            member: null,
            showAddMemberModal: false,
            header: {
                voterName: "",
                voterGroup: "",
                barangayName: "",
                position : "",
                municipalityName: "",
                specialOpGroup : "",
                cellphone : "",
                lgc : {
                    voter_name : "",
                    cellphone : ""
                }
            },
            defaults : {
                dialect : "TAGALOG",
                religion : "ROMAN CATHOLIC"
            }
        }
    },

    render: function () {
        var self = this;
        var defaults = self.state.defaults;
        var data = self.state.header;
        
        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, dialogClassName: "modal-custom-85", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Organization Information : ", data.voterName, " | LGC : ", data.lgc.voter_name, " | ",  data.lgc.cellphone == "" ? "NO CP" : data.lgc.cellphone, " ")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showAddMemberModal &&
                        React.createElement(SpecialOperationMemberCreateModal, {
                            proId: this.props.proId, 
                            provinceCode: 53, 
                            municipalityNo: this.state.header.municipalityNo, 
                            municipalityName: this.state.header.municipalityName, 
                            barangayNo: this.state.header.barangayNo, 
                            barangayName: this.state.header.barangayName, 
                            leader: this.state.header, 

                            electId: this.props.electId, 
                            recId: self.props.id, 
                            show: this.state.showAddMemberModal, 
                            notify: this.props.notify, 
                            onSuccess: this.reloadDatatable, 
                            onHide: this.closeAddMemberModal, 

                            defaultReligion: this.state.defaults.religion, 
                            defaultDialect: this.state.defaults.dialect}
                        ), 
                    

                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement("strong", null, "Organization Leader : "), " ", this.state.header.voterName, " ", React.createElement("br", null), 
                            React.createElement("strong", null, "Organization : "), " ", this.state.header.specialOpGroup, " ", React.createElement("br", null), 
                            React.createElement("strong", null, "Municipality : "), " ", this.state.header.municipalityName, " ", React.createElement("br", null), 
                            React.createElement("strong", null, "Barangay : "), "  ", this.state.header.barangayName, " ", React.createElement("br", null), 
                            React.createElement("strong", null, "Cellphone : "), "  ", this.state.header.cellphone
                        )
                    ), 
                    
                    React.createElement("br", null), 

                    React.createElement("div", {className: "col-md-7", style: { paddingLeft: "0px", marginBottom: "10px"}}, 
                        React.createElement("button", {onClick: this.openAddMemberModal, type: "button", className: "btn btn-sm btn-primary"}, "Add Member")
                    ), 

                    
                        React.createElement(SpecialOperationDetailDatatable, {ref: "DetailDatatable", 
                            municipalityNo: this.state.header.municipalityNo, 
                            municipalityName: this.state.header.municipalityName, 
                            barangayNo: this.state.header.barangayNo, 
                            barangayName: this.state.header.barangayName, 
                            notify: this.props.notify, 
                            recId: self.props.id, 
                            proId: self.props.proId, 
                            electId: self.props.electId
                        }
                        )
                    

                )
            )
        );
    },

    componentDidMount: function () {
        this.loadHeader(this.props.id);
    },

    loadHeader: function (id) {
        var self = this;

        self.requestRecruiter = $.ajax({
            url: Routing.generate("ajax_get_special_operation_header", { recId: id }),
            type: "GET"
        }).done(function (res) {
            self.setState({ header: res });
        });
    },





    
    setFormProp: function (e) {
        var defaults = this.state.defaults;
        defaults[e.target.name] = e.target.value;

        this.setState({ defaults : defaults });
    },

    reloadDatatable: function () {
        this.refs.DetailDatatable.reload();
    },

    openAddMemberModal: function () {
        console.log("showing add member modal");
        this.setState({ showAddMemberModal: true })
    },

    closeAddMemberModal: function () {
        this.setState({ showAddMemberModal: false });
    }

});


window.SpecialOperationMemberModal = SpecialOperationMemberModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SpecialOperationCreateModal = React.createClass({displayName: "SpecialOperationCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    electId: 4,
                    proVoterId: null,
                    municipalityNo: null
                },
                errors: []
            },
            provinceCode: 53,
            showNewVoterCreateModal: false
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Special Operation Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: this.props.proId, 
                            electId: this.props.electId, 
                            provinceCode: this.props.provinceCode, 
                            municipalityName: this.props.user.description, 
                            municipalityNo: this.state.form.data.municipalityNo, 
                            show: this.state.showNewVoterCreateModal, 
                            user: this.props.user, 
                            notify: this.props.notify, 
                            onHide: this.closeNewVoterCreateModal}
                        ), 
                    

                    React.createElement("form", {id: "household-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            )

                           
                            //     <div className="col-md-3">
                            //     <FormGroup controlId="formBarangay" validationState={this.getValidationState('barangayNo')}>
                            //         <label className="control-label">Barangay</label>
                            //         <select id="barangay_select2" className="form-control form-filter input-sm" name="brgyNo">
                            //         </select>
                            //         <HelpBlock>{this.getError('barangayNo')}</HelpBlock>
                            //     </FormGroup>
                            // </div>
                           
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-9"}, 
                                React.createElement(FormGroup, {controlId: "formVoterId", validationState: this.getValidationState('voterName')}, 
                                    React.createElement(ControlLabel, null, " Leader : "), 
                                    React.createElement("select", {id: "voter-recruit-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterName'))
                                )
                            )

                            
                            //     <div className="col-md-3">
                            //     <button style={{ marginTop: "25px" }} onClick={this.openNewVoterCreateModal} className="btn btn-primary btn-sm" type="button"> New Voter </button>
                            // </div>
                            
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Apelyido : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Pangalan : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Gitnang Pangalan : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "position"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formSpecialOpGroup", validationState: this.getValidationState('specialOpGroup')}, 
                                    React.createElement("label", {className: "control-label"}, "Organization Name"), 
                                    React.createElement("select", {id: "organization_select2", className: "form-control form-filter input-sm", name: "position"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('specialOpGroup'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                           React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone # : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )

                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#household-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#household-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.user.isAdmin ? "" : $("#household-create-form #municipality_select2").val(),
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var hasId = parseInt(item.has_id) == 1 ? "YES" : "NO";
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - ID : ' + hasId;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#household-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#household-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#household-create-form #organization_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_organizations'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.special_op_group, text: item.special_op_group };
                        })
                    };
                },
            }
        });

        self.requestMunicipality = $.ajax({
            url: Routing.generate("ajax_get_municipality_alt", { name: self.props.municipalityName }),
            type: "GET"
        }).done(function (res) {
            $("#household-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(res.municipality_no)
                    .text(res.name))
                .trigger("change");
        });

        if (!self.props.user.isAdmin) {
            $("#household-create-form #municipality_select2").attr('disabled', 'disabled');
        }

        $("#household-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue('municipalityNo', $(this).val());
        });

        $("#household-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue('barangayNo', $(this).val());
        });

        $("#household-create-form #voter_group_select2").on("change", function () {
            self.setFormPropValue("voterGroup", $(this).val());
        });

        $("#household-create-form #organization_select2").on("change", function () {
            self.setFormPropValue("specialOpGroup", $(this).val());
        });

        $("#household-create-form #other_position_select2").on("change", function () {
            self.setFormPropValue("position", $(this).val());
        });

        $("#household-create-form #voter-recruit-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var chunks = res.voterName.split(",");
            var firstname = '';
            var middlename = '';
            var lastname = '';

            if (chunks.length > 1) {
                chunks = chunks[1].trim().split(" ");
                lastname = res.voterName.split(",")[0];
                middlename = chunks.length > 1 ? chunks[chunks.length - 1] : '';
                firstname = res.voterName.split(",")[1].replace(middlename, '');;
            } else {
                chunks = res.voterName.trim().split(" ");
                lastname = chunks[0];
                firstname = chunks[1];
                middlename = chunks.length > 2 ? chunks[2] : '';
            }

            var form = self.state.form;

            form.data.proVoterId = res.proVoterId;
            form.data.firstname = self.isEmpty(res.firstname) ? firstname.trim() : res.firstname;
            form.data.middlename = self.isEmpty(res.middlename) ? middlename.trim() : res.middlename;
            form.data.lastname = self.isEmpty(res.lastname) ? lastname.trim() : res.lastname;
            form.data.extName = res.extname;
            form.data.voterGroup = res.voterGroup;
            form.data.position = res.position;
            form.data.cellphone = res.cellphone;

            $("#household-create-form #voter_group_select2").empty()
                .append($("<option/>")
                    .val(res.voterGroup)
                    .text(res.voterGroup))
                .trigger("change");

            $("#household-create-form #other_position_select2").empty()
                .append($("<option/>")
                    .val(res.position)
                    .text(res.position))
                .trigger("change");

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';
        form.data.position = '';

        self.setState({ form: form })
    },


    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        console.log('opening modal');
        this.setState({ showNewVoterCreateModal: true })
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;
        data.electId = self.props.electId;

        data.voterGroup = $("#household-create-form #voter_group_select2").val();
        data.position = $("#household-create-form #other_position_select2").val();
        data.specialOpGroup = $("#household-create-form #organization_select2").val();

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_special_operation_header"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.reset();
            self.props.reload();
            self.props.onHide();
            self.props.onSuccess(res.id);
            self.notify("New recruitment has been created.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Validation failed !", 'ruby');
        });
    }
});


window.SpecialOperationCreateModal = SpecialOperationCreateModal;
var SpecialOperationDatatable = React.createClass({displayName: "SpecialOperationDatatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showRecruitsModal: false,
            showUploadModal: false,
            showPhotoModal: false,
            showPrintModal : false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: 4,
                provinceCode: 53,
                proId: 3
            }
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        this.initSelect2();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#handler_component #election_select2").select2({
            casesentitive: false,
            placeholder: "Select Election...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#handler_component #project_select2").select2({
            casesentitive: false,
            placeholder: "Select Project...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_projects'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.pro_id, text: item.pro_name };
                        })
                    };
                },
            }
        });

        $("#handler_component #province_select2").select2({
            casesentitive: false,
            placeholder: "Enter Province...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province_strict'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });

        $("#handler_component #election_select2").on("change", function () {
            var filters = self.state.filters;
            filters.electId = $(this).val();

            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #project_select2").on("change", function () {
            var filters = self.state.filters;
            filters.proId = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #province_select2").on("change", function () {
            var filters = self.state.filters;
            filters.provinceCode = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

    },

    reinitSelect2: function () {
        var self = this;

        if (!self.isEmpty(self.state.user.project)) {
            var provinceCode = self.state.user.project.provinceCode;

            self.requestProvince = $.ajax({
                url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
                type: "GET"
            }).done(function (res) {
                $("#handler_component #province_select2").empty()
                    .append($("<option/>")
                        .val(res.province_code)
                        .text(res.name))
                    .trigger("change");
            });

            self.requestProject = $.ajax({
                url: Routing.generate("ajax_get_project", { proId: self.state.user.project.proId }),
                type: "GET"
            }).done(function (res) {
                $("#handler_component #project_select2").empty()
                    .append($("<option/>")
                        .val(res.proId)
                        .text(res.proName))
                    .trigger("change");

                self.initDatatable();
            });
        }

        self.requestActiveElection = $.ajax({
            url: Routing.generate("ajax_get_active_election"),
            type: "GET"
        }).done(function (res) {
            $("#handler_component #election_select2").empty()
                .append($("<option/>")
                    .val(res.electId)
                    .text(res.electName))
                .trigger("change");
        });

        if (!self.state.user.isAdmin) {
            $("#handler_component #election_select2").attr('disabled', 'disabled');
            $("#handler_component #province_select2").attr('disabled', 'disabled');
            $("#handler_component #project_select2").attr('disabled', 'disabled');
            $('#recruitment_table input[name="municipality_name"]').attr('disabled', 'disabled');
        }

        $('#recruitment_table input[name="municipality_name"]').val(self.state.user.description);
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var recruitment_table = $("#recruitment_table");
        var grid_project_recruitment = new Datatable();
        var url = Routing.generate("ajax_get_datatable_special_operation_header", {}, true);

        grid_project_recruitment.init({
            src: recruitment_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.voterName = $('#recruitment_table input[name="voter_name"]').val();
                        d.municipalityName = $('#recruitment_table input[name="municipality_name"]').val();
                        d.barangayName = $('#recruitment_table input[name="barangay_name"]').val();
                        d.voterGroup = $('#recruitment_table input[name="voter_group"]').val();
                        d.electId = self.state.filters.electId;
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6, 7]
                }, {
                    'className': 'align-center',
                    'targets': [2, 3]
                }],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "render": function (data, type, row) {
                            return "<a class='hover-button' href='#'>" + data + "</a>";
                        }
                    },
                    {
                        "data": "special_op_group",
                        "className": "text-center",
                        "width": 100
                    },
                    { "data": "municipality_name", "className": "text-center", width: 150 },
                    { "data": "barangay_name", width: 220 },
                    {
                        "data": "total_members",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "total_photos",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "width": 160,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var recruitBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green recruits-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-calendar'></i></a>";
                            var uploadBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green upload-button' data-toggle='tooltip' data-title='Upload'><i class='fa fa-upload'></i></a>";
                            var photoBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green photo-button' data-toggle='tooltip' data-title='Upload'><i class='fa fa-eye'></i></a>";
                            var printBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green print-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-print'></i></a>";
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            return recruitBtn + uploadBtn + photoBtn + printBtn + deleteBtn;
                        }
                    }
                ],
            }
        });


        recruitment_table.on('click', '.print-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showPrintModal: true, target: data.id });
        });

        recruitment_table.on('click', '.recruits-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showRecruitsModal: true, target: data.id });
        });

        recruitment_table.on('click', '.upload-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showUploadModal: true, target: data.id });
        });

        recruitment_table.on('click', '.photo-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showPhotoModal: true, target: data.id });
        });

        recruitment_table.on('click', '.delete-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        recruitment_table.on('mouseenter', '.hover-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            console.log("mouse entering");
        });

        self.grid = grid_project_recruitment;
    },


    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    closePrintModal: function () {
        this.setState({ showPrintModal: false, target: null });
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false, target: null });
    },

    openCreateKCL1Modal: function () {
        this.setState({ showCreateKCL1Modal: true });
    },

    closeCreateKCL1Modal: function () {
        this.setState({ showCreateKCL1Modal: false, target: null });
    },

    closeRecruitsModal: function () {
        this.setState({ showRecruitsModal: false, target: null });
    },

    closeUploadModal: function () {
        this.setState({ showUploadModal: false, target: null });
    },

    closePhotoModal: function () {
        this.setState({ showPhotoModal: false, target: null });
    },

    delete: function (recId) {
        var self = this;

        if (confirm("Are you sure you want to delete this record ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_special_operation_header", { recId: recId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;

        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    onCreateSuccess: function (id) {
        var self = this;
        self.setState({ showRecruitsModal: true, target: id });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                    this.state.showCreateModal &&
                    React.createElement(SpecialOperationCreateModal, {
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId, 
                        provinceCode: this.state.filters.provinceCode, 
                        municipalityName: this.state.user.description, 
                        user: this.state.user, 
                        show: this.state.showCreateModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeCreateModal, 
                        onSuccess: this.onCreateSuccess}
                    ), 
                

                
                    this.state.showRecruitsModal &&
                    React.createElement(SpecialOperationMemberModal, {
                        id: this.state.target, 
                        show: this.state.showRecruitsModal, 
                        reload: this.reload, 
                        onHide: this.closeRecruitsModal, 
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId}
                    ), 
                

                
                    this.state.showUploadModal &&
                    React.createElement(SpecialOperationUploadPhotoModal, {
                        id: this.state.target, 
                        show: this.state.showUploadModal, 
                        reload: this.reload, 
                        onHide: this.closeUploadModal, 
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId}
                    ), 
                

                
                    this.state.showPhotoModal &&
                    React.createElement(SpecialOperationPhotoModal, {
                        recId: this.state.target, 
                        show: this.state.showPhotoModal, 
                        reload: this.reload, 
                        onHide: this.closePhotoModal, 
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId}
                    ), 
                

                
                    this.state.showPrintModal &&
                    React.createElement(SpecialOperationPrintModal, {
                        id: this.state.target, 
                        show: this.state.showPrintModal, 
                        reload: this.reload, 
                        onHide: this.closePrintModal, 
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId}
                    ), 
                



                React.createElement("div", {className: "row", id: "handler_component"}, 
                    React.createElement("div", {className: "col-md-5"}, 
                        React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openCreateModal}, "Add Leader")
                    ), 
                    React.createElement("div", {className: "col-md-7"}, 
                        React.createElement("form", {onSubmit: this.onApplyCode}, 
                            React.createElement("div", {className: "col-md-3 col-md-offset-1"}, 
                                React.createElement("select", {id: "election_select2", className: "form-control form-filter input-sm"}
                                )
                            ), 
                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("select", {id: "province_select2", className: "form-control form-filter input-sm"}
                                )
                            ), 
                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("select", {id: "project_select2", className: "form-control form-filter input-sm"}
                                )
                            )
                        )
                    )
                ), 

                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "recruitment_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Organization Leader"), 
                                React.createElement("th", null, "Organization"), 
                                React.createElement("th", {className: "text-center"}, "Municipality"), 
                                React.createElement("th", {className: "text-center"}, "Barangay"), 
                                React.createElement("th", {className: "text-center"}, "Total Members"), 
                                React.createElement("th", {className: "text-center"}, "Total Photos"), 
                                React.createElement("th", {width: "60px", className: "text-center"})
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_group", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "municipality_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangay_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.SpecialOperationDatatable = SpecialOperationDatatable;
var SpecialOperationPage = React.createClass({displayName: "SpecialOperationPage",

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    render: function () {
        return (
            React.createElement("div", null, 
                React.createElement("div", {className: "portlet light portlet-fit bordered", style: { marginTop : "10px"}}, 
                    React.createElement("div", {className: "portlet-body"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement("h4", {className: "bold"}, "Special Operation Page")
                            )
                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(SpecialOperationDatatable, null)
                            )
                        )
                    )
                )
            )
        )
    },

    numberWithCommas: function (x) {
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    }

});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(SpecialOperationPage, null),
        document.getElementById('page-container')
    );
}, 500);
