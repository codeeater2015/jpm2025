var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var FailedTransferTroubleshootModal = React.createClass({displayName: "FailedTransferTroubleshootModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    electId: 4,
                    proVoterId: null,
                    proIdCode: "",
                    recFormSub: 0,
                    houseFormSub: 0,
                    recFormSubCount: 0,
                    houseFormSubCount: 0,
                    recFormSubDate: "",
                    houseFormSubDate: "",
                    municipalityNo: "",
                    municipalityName: "",
                    barangayNo: "",
                    barangayName: ""
                },
                errors: []
            },
            provinceCode: 53,
            showNewVoterCreateModal: false
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Troubleshoot")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    React.createElement("form", {id: "member-status-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBarangay", validationState: this.getValidationState('barangayNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-8"}, 
                                React.createElement(FormGroup, {controlId: "formVoterName", validationState: this.getValidationState('proVoterId')}, 
                                    React.createElement(ControlLabel, null, " Name (Old Voterslist) : "), 
                                    React.createElement("select", {id: "voter-recruit-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("button", {style: { marginTop: "25px"}, onClick: this.voterNotFound, className: "btn btn-primary btn-sm", type: "button"}, " Not Found ")
                            ), 
                            
                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement(FormGroup, {controlId: "formVoterName"}, 
                                    React.createElement("input", {type: "text", value: this.state.form.data.voterName, className: "input-sm form-control"})
                                )
                            )

                        ), 

                        React.createElement("br", null), 
                        React.createElement("br", null), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formTargetVoterName", validationState: this.getValidationState('targetProVoterId')}, 
                                    React.createElement(ControlLabel, null, " Name (New Voterslist) : "), 
                                    React.createElement("select", {id: "voter-recruit2-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('targetProVoterId'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )

                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#member-status-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#member-status-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#member-status-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#member-status-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_failed_transfer_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#member-status-create-form #municipality_select2").val(),
                        brgyNo: $("#member-status-create-form #barangay_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var hasId = parseInt(item.has_id) == 1 ? "YES" : "NO";
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + " Prec # : " + item.precinct_no + ' ) - ID : ' + hasId;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#member-status-create-form #voter-recruit2-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_failed_transfer_new_list'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#member-status-create-form #municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var hasId = parseInt(item.has_id) == 1 ? "YES" : "NO";
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + " Prec # : " + item.precinct_no + ' )';

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#member-status-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue('municipalityNo', $(this).val());
            self.loadMunicipality($(this).val());
        });

        $("#member-status-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue('barangayNo', $(this).val());
            self.loadBarangay($("#member-status-create-form #municipality_select2").val(), $(this).val());
        });

        $("#member-status-create-form #voter-recruit-select2").on("change", function () {
            self.loadVoter(3, $(this).val());

            let form = self.state.form;
            form.data.proVoterId = $(this).val();

            self.setState({ form: form });
        });

        $("#member-status-create-form #voter-recruit2-select2").on("change", function () {
            let form = self.state.form;
            form.data.targetProVoterId = $(this).val();

            self.setState({ form: form });
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter_2023", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.voterName = res.voterName;

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.gender = '';
        form.data.remarks = '';

        self.setState({ form: form });
    },


    loadMunicipality: function (municipalityNo) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_municipality_loc", { municipalityNo: municipalityNo }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.municipalityName = res.name;
            self.setState({ form: form });
        });
    },


    loadBarangay: function (municipalityNo, brgyNo) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_barangay_loc", { municipalityNo: municipalityNo, brgyNo: brgyNo }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.barangayName = res.name;
            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        form.data.proVoterId = null;
        form.data.targetProVoterId = "";
        form.data.voterName = "";

        $("#member-status-create-form #voter-recruit-select2")
            .empty()
            .trigger("change");

        $("#member-status-create-form #voter-recruit2-select2")
            .empty()
            .trigger("change");

        this.setState({ form: form });
    },

    voterNotFound: function(e){
        e.preventDefault();

        if(confirm("are you sure?")){

            var self = this;
            var data = self.state.form.data;
            data.proVoterId = $("#member-status-create-form #voter-recruit-select2").val();
            data.targetProVoterId = $("#member-status-create-form #voter-recruit2-select2").val();

            self.requestPost = $.ajax({
                url: Routing.generate("ajax_post_failed_transfer_not_found"),
                data: data,
                type: 'POST'
            }).done(function (res) {
                self.reset();
                self.props.reload();
            }).fail(function (err) {
                self.setErrors(err.responseJSON);
            });
        }
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proVoterId = $("#member-status-create-form #voter-recruit-select2").val();
        data.targetProVoterId = $("#member-status-create-form #voter-recruit2-select2").val();

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_transfer"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.reset();
            self.props.reload();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }

});


window.FailedTransferTroubleshootModal = FailedTransferTroubleshootModal;
var FailedTransferDatatable = React.createClass({displayName: "FailedTransferDatatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showRecruitsModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: 4,
                provinceCode: 53,
                proId: 3
            }
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        this.initSelect2();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#handler_component #election_select2").select2({
            casesentitive: false,
            placeholder: "Select Election...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#handler_component #project_select2").select2({
            casesentitive: false,
            placeholder: "Select Project...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_projects'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.pro_id, text: item.pro_name };
                        })
                    };
                },
            }
        });

        $("#handler_component #province_select2").select2({
            casesentitive: false,
            placeholder: "Enter Province...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province_strict'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });

        $("#handler_component #election_select2").on("change", function () {
            var filters = self.state.filters;
            filters.electId = $(this).val();

            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #project_select2").on("change", function () {
            var filters = self.state.filters;
            filters.proId = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #province_select2").on("change", function () {
            var filters = self.state.filters;
            filters.provinceCode = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

    },

    reinitSelect2: function () {
        var self = this;

        if (!self.isEmpty(self.state.user.project)) {
            var provinceCode = self.state.user.project.provinceCode;

            self.requestProvince = $.ajax({
                url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
                type: "GET"
            }).done(function (res) {
                $("#handler_component #province_select2").empty()
                    .append($("<option/>")
                        .val(res.province_code)
                        .text(res.name))
                    .trigger("change");
            });

            self.requestProject = $.ajax({
                url: Routing.generate("ajax_get_project", { proId: self.state.user.project.proId }),
                type: "GET"
            }).done(function (res) {
                $("#handler_component #project_select2").empty()
                    .append($("<option/>")
                        .val(res.proId)
                        .text(res.proName))
                    .trigger("change");

                self.initDatatable();
            });
        }

        self.requestActiveElection = $.ajax({
            url: Routing.generate("ajax_get_active_election"),
            type: "GET"
        }).done(function (res) {
            $("#handler_component #election_select2").empty()
                .append($("<option/>")
                    .val(res.electId)
                    .text(res.electName))
                .trigger("change");
        });

        if (!self.state.user.isAdmin) {
            $("#handler_component #election_select2").attr('disabled', 'disabled');
            $("#handler_component #province_select2").attr('disabled', 'disabled');
            $("#handler_component #project_select2").attr('disabled', 'disabled');
        }
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var member_status = $("#member_status");
        var grid_member_status = new Datatable();
        var url = Routing.generate("ajax_get_datatable_failed_transfers", {}, true);

        console.log("initializing datatable");

        grid_member_status.init({
            src: member_status,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.voterName = $('#member_status input[name="voter_name"]').val();
                        d.voterGroup = $('#member_status input[name="voter_group"]').val();
                        d.municipalityName = $('#member_status input[name="municipality_name"]').val();
                        d.barangayName = $('#member_status input[name="barangay_name"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6, 7]
                }, {
                    'className': 'align-center',
                    'targets': [2, 3]
                }],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    { "data": "municipality_name", "className": "text-center", width: 150 },
                    { "data": "barangay_name", width: 220 },
                    { 
                        "data": "voter_name",
                        "className" : "text-left"
                    },
                    { 
                        "data": "voter_group" ,
                        "width" : 80,
                        "className" : "text-center"  
                    },
                    {
                        "data": "has_photo",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data){
                            return data == 1 ? "YES" : "NO"
                        }
                    },
                    {
                        "data": "has_id",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data){
                            return data == 1 ? "YES" : "NO"
                        }
                    },
                    {
                        "data": "is_non_voter",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data){
                            return data == 1 ? "YES" : "NO"
                        }
                    },
                    {
                        "width": 90,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit'></i></a>";
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            return editBtn + deleteBtn;
                        }
                    }
                ],
            }
        });

        member_status.on('click', '.edit-button', function () {
            var data = grid_member_status.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        })

        member_status.on('click', '.delete-button', function () {
            var data = grid_member_status.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_member_status;
    },

    openTransferModal : function () {
        this.setState({ showTransferModal : true });
    },

    closeTransferModal: function () {
        this.setState({ showTransferModal: false});
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this record ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_form_status", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;

        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 

                
                    this.state.showTransferModal &&
                    React.createElement(FailedTransferTroubleshootModal, {
                        show: this.state.showTransferModal, 
                        reload: this.reload, 
                        onHide: this.closeTransferModal}
                    ), 
                

                React.createElement("div", {className: "row", id: "handler_component"}, 
                    React.createElement("div", {className: "col-md-5"}, 
                        React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openTransferModal}, "Troubleshoot Voter")
                    ), 

                    React.createElement("div", {className: "col-md-7"}, 
                        React.createElement("form", {onSubmit: this.onApplyCode}, 
                            React.createElement("div", {className: "col-md-3 col-md-offset-1"}, 
                                React.createElement("select", {id: "election_select2", className: "form-control form-filter input-sm"}
                                )
                            ), 
                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("select", {id: "province_select2", className: "form-control form-filter input-sm"}
                                )
                            ), 
                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("select", {id: "project_select2", className: "form-control form-filter input-sm"}
                                )
                            )
                        )
                    )
                ), 

                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "member_status", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", {className: "text-center"}, "Municipality"), 
                                React.createElement("th", {className: "text-center"}, "Barangay"), 
                                React.createElement("th", {className: "text-center"}, "Voter Name"), 
                                React.createElement("th", {className: "text-center"}, "Voter Group"), 
                                React.createElement("th", {className: "text-center"}, "Photo"), 
                                React.createElement("th", {className: "text-center"}, "Id"), 
                                React.createElement("th", {className: "text-center"}, "Non-voter"), 
                                React.createElement("th", {width: "60px", className: "text-center"})
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "municipality_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangay_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_group", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.FailedTransferDatatable = FailedTransferDatatable;
var FailedTransferPage = React.createClass({displayName: "FailedTransferPage",
    render : function(){
        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body"}, 
                    React.createElement(FailedTransferDatatable, null)
                )
            )
        )
    }
});

setTimeout(function(){
    ReactDOM.render(
    React.createElement(FailedTransferPage, null),
        document.getElementById('page-container')
    );
},500);
