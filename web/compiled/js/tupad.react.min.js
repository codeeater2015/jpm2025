var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var TupadMemberCreateModal = React.createClass({displayName: "TupadMemberCreateModal",

    getInitialState: function () {
        return {
            showNewProfileModal: false,
            form: {
                data: {
                    municipalityNo: "",
                    barangayNo: "",
                    cellphoneNo : ""
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Assistance Member ")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewProfileModal &&
                        React.createElement(TupadCreateNewProfileModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            show: this.state.showNewProfileModal, 
                            onHide: this.closeNewProfileModal, 
                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "assistance-detail-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-10"}, 
                                        React.createElement(FormGroup, {controlId: "formVoterName", validationState: this.getValidationState('voterName')}, 
                                            React.createElement(ControlLabel, null, " Beneficiary Name : "), 
                                            React.createElement("select", {id: "voter_select2", className: "form-control input-md"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('voterName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-2"}, 
                                        React.createElement("button", {style: { marginTop: "25px"}, onClick: self.openNewProfileModal, type: "button", className: "btn btn-primary"}, "New")
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphoneNo')}, 
                                            React.createElement(ControlLabel, null, " Cellphone No: "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.cellphoneNo, name: "cellphoneNo", className: "input-md form-control", onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('cellphoneNo'))
                                        )
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right", style: { marginTop: "30px"}}, 
                            React.createElement("button", {type: "button", className: "btn btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                            React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.submit}, "Submit")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },


    initSelect2: function () {
        var self = this;


        $("#assistance-detail-form #voter_select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_tupad_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 4,
                        proId: 3,
                        provinceCode : 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var hasPhoto = parseInt(item.has_photo) == 1 ? "YES" : "NO";
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - PHOTO : ' + hasPhoto;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#assistance-detail-form #voter_select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });

    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_tupad_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;
            console.log('voter has been found');
            console.log(res);

            console.log("props");
            console.log(self.props.barangayName);
            console.log("form data");
            console.log(form.data.sourceBarangay);


            form.data.proVoterId = res.proVoterId;
            form.data.proIdCode = res.proIdCode;
            form.data.generatedIdNo = res.generatedIdNo;
            form.data.bMunicipality = res.municipalityName;
            form.data.bBarangay = res.barangayName;
            form.data.bExtname = res.extname;
            form.data.isVoter = parseInt(res.isNonVoter) != 1 ? 1 : 0;
            form.data.bStatus = res.isKalaban;
            form.data.bName = res.voterName;

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.applicantName = "";
        form.data.jpmIdNo = "";
        form.data.applicantProVoterId = "";

        self.setState({ form: form })
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    openNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: true });
    },

    closeNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: false });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.hdrId = self.props.hdrId;
        
        console.log("form data");
        console.log(self.state.form.data);

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_tupad_post_transaction_detail", {hdrId : this.props.hdrId }),
            data: data,
            type: 'POST'
        }).done(function (res) {
            console.log("transaction detail has been added.");
            self.reset();
            $("#assistance-detail-form #voter_select2").empty().trigger("change");
            self.props.reload();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.TupadMemberCreateModal = TupadMemberCreateModal;
var TupadMemberDatatable = React.createClass({displayName: "TupadMemberDatatable",

    getInitialState: function () {
        return {
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        this.initDatatable();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res });
        });
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var tupad_detail_table = $("#tupad_detail_table");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get_datatable_tupad_transaction_detail", {}, true);

        grid_project_event.init({
            src: tupad_detail_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.hdrId = self.props.hdrId;
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6]
                }, {
                    'className': 'align-center',
                    'targets': [0]
                }],
                "order": [
                    [0, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "b_name",
                        "className": "text-left"
                    },
                    {
                        "data": "b_municipality",
                        "width": 150,
                        "className": "text-center"
                    },
                    {
                        "data": "b_barangay",
                        "className": "text-center",
                        "width": 180
                    },
                    {
                        "data": "is_voter",
                        "className": "text-center",
                        "width": 50,
                        "render": function (data) {
                            return parseInt(data) == 1 ? "YES" : "NO";
                        }
                    },
                    {
                        "data": "b_cellphone_no",
                        "className": "text-center",
                        "width": 50
                    },

                    {
                        "width": 50,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            return deleteBtn;
                        }
                    }
                ],
            }
        });

        tupad_detail_table.on('click', '.release-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        });

        tupad_detail_table.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },


    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this request?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_tupad_transaction_detail", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {

        console.log("relaod databable");
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "tupad_detail_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Reg. Municipality"), 
                                React.createElement("th", null, "Reg. Barangay"), 
                                React.createElement("th", null, "Is Voter"), 
                                React.createElement("th", null, "Cellphone"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "beneficiary_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.TupadMemberDatatable = TupadMemberDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var TupadEditModal = React.createClass({displayName: "TupadEditModal",

    getInitialState: function () {
        return {
            showNewProfileModal: false,
            showCreateModal : false,
            form: {
                data: {
                    municipalityNo: "",
                    barangayNo: "",
                    cellphoneNo: ""
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        console.log('data', data);

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, bsSize: "lg", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Edit Assistance : ", data.serviceType, " - ", data.sourceBarangay, ", ", data.sourceMunicipality)
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewProfileModal &&
                        React.createElement(TupadCreateNewProfileModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            show: this.state.showNewProfileModal, 
                            onHide: this.closeNewProfileModal, 
                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    
                        this.state.showCreateModal &&
                        React.createElement(TupadMemberCreateModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            hdrId: this.props.trnId, 
                            show: this.state.showCreateModal, 
                            onHide: this.closeCreateModal, 
                            reload: this.reload}
                        ), 
                    

                    React.createElement("form", {id: "fa-edit-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                            React.createElement(ControlLabel, null, " Municipality (filter sa pag search) : "), 
                                            React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-md", name: "municipalityNo"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formBarangayNo", validationState: this.getValidationState('barangayNo')}, 
                                            React.createElement(ControlLabel, null, " Barangay (based sa listahan) : "), 
                                            React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-md", name: "barangayNo"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formServiceType", validationState: this.getValidationState('serviceType')}, 
                                            React.createElement(ControlLabel, null, " Type of Assistance : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.serviceType, className: "input-md form-control", disabled: true})
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formSource", validationState: this.getValidationState('source')}, 
                                            React.createElement(ControlLabel, null, " Source : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.source, className: "input-md form-control", disabled: true})
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formReleaseDate", validationState: this.getValidationState('releaseDate')}, 
                                            React.createElement(ControlLabel, null, " Release Date : "), 
                                            React.createElement("input", {type: "date", value: this.state.form.data.releaseDate, className: "input-md form-control", name: "releaseDate", onChange: this.setFormProp})
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-9"}, 
                                        React.createElement(FormGroup, {controlId: "formVoterName", validationState: this.getValidationState('voterName')}, 
                                            React.createElement(ControlLabel, null, " Beneficiary Name : "), 
                                            React.createElement("select", {id: "voter_select2", className: "form-control input-md"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('voterName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement("button", {style: { marginTop: "25px"}, onClick: self.openNewProfileModal, type: "button", className: "btn btn-primary"}, "New Profile")
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphoneNo')}, 
                                            React.createElement(ControlLabel, null, " Cellphone No: "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.cellphoneNo, name: "cellphoneNo", className: "input-md form-control", onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('cellphoneNo'))
                                        )
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right", style: { marginTop: "15px"}}, 
                            React.createElement("button", {type: "button", className: "btn btn-primary col-md-12", onClick: this.submit}, "Update Transaction")
                        ), 

                        React.createElement("br", null), 

                        React.createElement("div", {className: "row", style: { marginTop: "50px"}}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openCreateModal}, "Add Member")
                            ), 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement("h4", null, "Assistance Members : "), 
                                React.createElement(TupadMemberDatatable, {ref: "memberDatatable", hdrId: this.props.trnId})
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadTransaction(this.props.trnId);
    },

    loadTransaction: function (trnId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_tupad_transction", { trnId: trnId }),
            type: "GET"
        }).done(function (res) {
            console.log("transaction has been received");
            console.log(res);

            var form = self.state.form;

            form.data.source = res.source;
            form.data.releaseDate = res.releaseDate;
            form.data.serviceType = res.serviceType;
            form.data.cellphoneNo = res.cellphoneNo;
            form.data.sourceMunicipality = res.sourceMunicipality;
            form.data.sourceBarangay = res.sourceBarangay;
            form.data.cellphoneNo = res.cellphoneNo;

            $("#fa-edit-form #voter_select2").empty()
                .append($("<option/>")
                    .val(res.proVoterId)
                    .text(res.bName))
                .trigger("change");

            $("#fa-edit-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(res.sourceMunicipality)
                    .text(res.sourceMunicipality))
                .trigger("change");

            $("#fa-edit-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(res.sourceBarangay)
                    .text(res.sourceBarangay))
                .trigger("change");
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_tupad_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;
            console.log('voter has been found');
            console.log(res);

            form.data.proVoterId = res.proVoterId;
            form.data.proIdCode = res.proIdCode;
            form.data.generatedIdNo = res.generatedIdNo;
            form.data.bExtname = res.extname;
            form.data.isVoter = parseInt(res.isNonVoter) != 1 ? 1 : 0;

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.applicantName = "";
        form.data.jpmIdNo = "";
        form.data.applicantProVoterId = "";

        self.setState({ form: form })
    },

    initSelect2: function () {
        var self = this;

        $("#fa-edit-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#fa-edit-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#fa-edit-form #municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.name, text: item.name };
                        })
                    };
                },
            }
        });

        $("#fa-edit-form #voter_select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_tupad_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 4,
                        proId: 3,
                        provinceCode: 53,
                        municipalityNo: $("#fa-edit-form #municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var hasPhoto = parseInt(item.has_photo) == 1 ? "YES" : "NO";
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - PHOTO : ' + hasPhoto;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#fa-edit-form #voter_select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });
    },


    reload: function () {
        this.refs.memberDatatable.reload();
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    openNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: true });
    },

    closeNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: false });
    },

    openCreateModal: function () {
        var self = this;

        self.setState({ showCreateModal: true });
    },

    closeCreateModal: function () {
        var self = this;

        self.setState({ showCreateModal: false });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;
        data.source = self.props.source;
        data.releaseDate = self.props.releaseDate;

        console.log("form data");
        console.log(self.state.form.data);

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_tupad_patch_transaction",{hdrId : this.props.trnId }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.reset();
            $("#fa-edit-form #voter_select2").empty().trigger("change");
            self.props.reload();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.TupadEditModal = TupadEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var TupadCreateNewProfileModal = React.createClass({displayName: "TupadCreateNewProfileModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "20px"}, keyboard: false, dialogClassName: "modal-custom-55", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Assistance Profile")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthday : "), 
                                    React.createElement("input", {type: "date", value: this.props.birthdate, className: "input-md form-control", onChange: this.setFormProp, name: "birthdate"})
                                )
                            )
                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });


        $("#new-voter-create-form #municipality_select2").empty()
            .append($("<option/>")
                .val(self.props.municipalityNo)
                .text(self.props.municipalityName))
            .trigger("change");

        $("#new-voter-create-form #barangay_select2").empty()
            .append($("<option/>")
                .val(self.props.barangayNo)
                .text(self.props.barangayName))
            .trigger("change");

    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_tupad_project_voter", { proId: proId, voterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.nodeLabel = res.voterName;
            form.data.nodeOrder = 10;
            form.data.municipalityNo = res.municipalityNo;
            form.data.brgyNo = res.brgyNo;
            form.data.voterId = res.voterId;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? "" : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? "KFC" : res.voterGroup;
            form.data.remarks = self.isEmpty(res.remarks) ? "" : res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");


            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-create-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-create-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-create-form #occupation_select2').val();
        data.religion = $('#new-voter-create-form #religion_select2').val();
        data.dialect = $('#new-voter-create-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-create-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-create-form #voter_group_select2').val();
        data.position = $('#new-voter-create-form #other_position_select2').val();

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_tupad_temporary_voter"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.TupadCreateNewProfileModal = TupadCreateNewProfileModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var TupadCreateModal = React.createClass({displayName: "TupadCreateModal",

    getInitialState: function () {
        return {
            showNewProfileModal: false,
            form: {
                data: {
                    municipalityNo: "",
                    barangayNo: "",
                    cellphoneNo : ""
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, bsSize: "lg", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "TUPAD : ", this.props.serviceType, " - ", this.props.barangayName, ", ", this.props.municipalityName)
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewProfileModal &&
                        React.createElement(TupadCreateNewProfileModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            show: this.state.showNewProfileModal, 
                            onHide: this.closeNewProfileModal, 
                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "fa-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                            React.createElement(ControlLabel, null, " Municipality (filter sa pag search) : "), 
                                            React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-md", name: "municipalityNo"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formBarangayNo", validationState: this.getValidationState('barangayNo')}, 
                                            React.createElement(ControlLabel, null, " Barangay (based sa listahan) : "), 
                                            React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-md", name: "barangayNo"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formServiceType", validationState: this.getValidationState('serviceType')}, 
                                            React.createElement(ControlLabel, null, " Type of Assistance : "), 
                                            React.createElement("input", {type: "text", value: this.props.serviceType, className: "input-md form-control", disabled: true})
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formSource", validationState: this.getValidationState('source')}, 
                                            React.createElement(ControlLabel, null, " Source : "), 
                                            React.createElement("input", {type: "text", value: this.props.source, className: "input-md form-control", disabled: true})
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formReleaseDate", validationState: this.getValidationState('releaseDate')}, 
                                            React.createElement(ControlLabel, null, " Release Date : "), 
                                            React.createElement("input", {type: "date", value: this.props.releaseDate, className: "input-md form-control", name: "releaseDate", onChange: this.setFormProp})
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-9"}, 
                                        React.createElement(FormGroup, {controlId: "formVoterName", validationState: this.getValidationState('voterName')}, 
                                            React.createElement(ControlLabel, null, " Beneficiary Name : "), 
                                            React.createElement("select", {id: "voter_select2", className: "form-control input-md"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('voterName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement("button", {style: { marginTop: "25px"}, onClick: self.openNewProfileModal, type: "button", className: "btn btn-primary"}, "New Profile")
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphoneNo')}, 
                                            React.createElement(ControlLabel, null, " Cellphone No: "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.cellphoneNo, name: "cellphoneNo", className: "input-md form-control", onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('cellphoneNo'))
                                        )
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right", style: { marginTop: "30px"}}, 
                            React.createElement("button", {type: "button", className: "btn-lg btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                            React.createElement("button", {type: "button", className: "btn-lg btn-primary", onClick: this.submit}, "Submit")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },


    initSelect2: function () {
        var self = this;

        $("#fa-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#fa-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#fa-form #municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.name, text: item.name };
                        })
                    };
                },
            }
        });

        $("#fa-form #voter_select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_tupad_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 4,
                        proId: 3,
                        provinceCode: 53,
                        municipalityNo: $("#fa-form #municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var hasPhoto = parseInt(item.has_photo) == 1 ? "YES" : "NO";
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - PHOTO : ' + hasPhoto;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#fa-form #municipality_select2").on("change", function () {
            self.setFormPropValue('municipalityNo', $(this).val());
        });

        $("#fa-form #barangay_select2").on("change", function () {
            self.setFormPropValue('sourceBarangay', $(this).val());
        });

        $("#fa-form #voter_select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });

        $("#fa-form #municipality_select2").empty()
            .append($("<option/>")
                .val(self.props.municipalityNo)
                .text(self.props.municipalityName))
            .trigger("change");

        $("#fa-form #barangay_select2").empty()
            .append($("<option/>")
                .val(self.props.barangayName)
                .text(self.props.barangayName))
            .trigger("change");

    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_tupad_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;
            console.log('voter has been found');
            console.log(res);

            console.log("props");
            console.log(self.props.barangayName);
            console.log("form data");
            console.log(form.data.sourceBarangay);


            form.data.proVoterId = res.proVoterId;
            form.data.proIdCode = res.proIdCode;
            form.data.generatedIdNo = res.generatedIdNo;
            form.data.sourceMunicipality = self.props.municipalityName;
            form.data.sourceBarangay = form.data.sourceBarangay == "" ? self.props.barangayName : form.data.sourceBarangay;
            form.data.bMunicipality = res.municipalityName;
            form.data.bBarangay = res.barangayName;
            form.data.bExtname = res.extname;
            form.data.isVoter = parseInt(res.isNonVoter) != 1 ? 1 : 0;
            form.data.serviceType = self.props.serviceType;
            form.data.bStatus = res.isKalaban;
            form.data.bName = res.voterName;

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.applicantName = "";
        form.data.jpmIdNo = "";
        form.data.applicantProVoterId = "";

        self.setState({ form: form })
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    openNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: true });
    },

    closeNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: false });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;
        data.source = self.props.source;
        data.releaseDate  = self.props.releaseDate;
        
        console.log("form data");
        console.log(self.state.form.data);

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_tupad_post_transaction"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.reset();
            $("#fa-form #voter_select2").empty().trigger("change");
            self.props.reload();
            self.props.success(res);
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.TupadCreateModal = TupadCreateModal;
var TupadDatatable = React.createClass({displayName: "TupadDatatable",

    getInitialState: function () {
        return {
            showEditModal: false,
            showReleaseModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        //this.initSelect2();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#fa_component #election_select2").select2({
            casesentitive: false,
            placeholder: "Select Election...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#fa_component #project_select2").select2({
            casesentitive: false,
            placeholder: "Select Project...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_projects'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.pro_id, text: item.pro_name };
                        })
                    };
                },
            }
        });

        $("#fa_component #province_select2").select2({
            casesentitive: false,
            placeholder: "Enter Province...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province_strict'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });

        $("#fa_component #election_select2").on("change", function () {
            var filters = self.state.filters;
            filters.electId = $(this).val();

            self.setState({ filters: filters }, self.reload);
        });

        $("#fa_component #project_select2").on("change", function () {
            var filters = self.state.filters;
            filters.proId = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

        $("#fa_component #province_select2").on("change", function () {
            var filters = self.state.filters;
            filters.provinceCode = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

    },

    reinitSelect2: function () {
        var self = this;

        if (!self.isEmpty(self.state.user.project)) {
            var provinceCode = self.state.user.project.provinceCode;

            self.requestProvince = $.ajax({
                url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
                type: "GET"
            }).done(function (res) {
                $("#fa_component #province_select2").empty()
                    .append($("<option/>")
                        .val(res.province_code)
                        .text(res.name))
                    .trigger("change");
            });

            self.requestProject = $.ajax({
                url: Routing.generate("ajax_get_project", { proId: self.state.user.project.proId }),
                type: "GET"
            }).done(function (res) {
                $("#fa_component #project_select2").empty()
                    .append($("<option/>")
                        .val(res.proId)
                        .text(res.proName))
                    .trigger("change");

                self.initDatatable();
            });
        }

        self.requestActiveElection = $.ajax({
            url: Routing.generate("ajax_get_active_election"),
            type: "GET"
        }).done(function (res) {
            $("#fa_component #election_select2").empty()
                .append($("<option/>")
                    .val(res.electId)
                    .text(res.electName))
                .trigger("change");
        });

        if (!self.state.user.isAdmin) {
            $("#fa_component #election_select2").attr('disabled', 'disabled');
            $("#fa_component #province_select2").attr('disabled', 'disabled');
            $("#fa_component #project_select2").attr('disabled', 'disabled');
        }
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var tupad_table = $("#tupad_table");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get_datatable_tupad_transactions", {}, true);

        grid_project_event.init({
            src: tupad_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.sourceMunicipality = self.props.sourceMunicipality;
                        d.sourceBarangay = self.props.sourceBarangay;
                        d.serviceType = self.props.serviceType;
                        d.source = self.props.source;
                        d.releaseDate = self.props.releaseDate;

                        d.bName = $('#tupad_table input[name="beneficiary_name"]').val();
                        d.bMunicipality = $('#tupad_table input[name="b_municipality"]').val();
                        d.bBarangay = $('#tupad_table input[name="b_barangay"]').val();

                        console.log("active source", self.props.source);
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6, 7, 8, 9]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [0, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "b_name",
                        "className": "text-left",
                        "render": function (data) {
                            return "<a href='javascript:void(0);' class='release-button'><strong>" + data + '</strong></a>';
                        }
                    },
                    {
                        "data": "service_type",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "data": "source_municipality",
                        "width": 150,
                        "className": "text-center"
                    },
                    {
                        "data": "source_barangay",
                        "className": "text-center",
                        "width": 180
                    },
                    {
                        "data": "b_municipality",
                        "width": 150,
                        "className": "text-center"
                    },
                    {
                        "data": "b_barangay",
                        "className": "text-center",
                        "width": 180
                    },
                    {
                        "data": "is_voter",
                        "className": "text-center",
                        "width": 50,
                        "render": function (data) {
                            return parseInt(data) == 1 ? "YES" : "NO";
                        }
                    },

                    {
                        "data": "source",
                        "className": "text-center",
                        "width": 50
                    },

                    {
                        "data": "release_date",
                        "className": "text-center",
                        "width": 50
                    }

                    // {
                    //     "width": 50,
                    //     "className": "text-center",
                    //     "render": function (data, type, row) {
                    //         var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                    //         return "";
                    //     }
                    // }
                ],
            }
        });

        tupad_table.on('click', '.release-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        });

        tupad_table.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
    },

    closeReleaseModal: function () {
        this.setState({ showReleaseModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    openClosingModal: function () {
        this.setState({ showClosingModal: true });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this request?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_tupad_transaction", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {

        console.log("relaod databable");
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    openProfile: function (id) {
        this.setState({ showEditModal: true, target: id });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 

                
                    this.state.showEditModal &&
                    React.createElement(TupadEditModal, {
                        proId: 3, 
                        show: this.state.showEditModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeEditModal, 
                        trnId: this.state.target}
                    ), 
                
                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "tupad_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "BeneficiaryName"), 
                                React.createElement("th", null, "Service"), 
                                React.createElement("th", null, "Asst. Municipality"), 
                                React.createElement("th", null, "Asst Barangay"), 
                                React.createElement("th", null, "Reg. Municipality"), 
                                React.createElement("th", null, "Reg. Barangay"), 
                                React.createElement("th", null, "Is Voter"), 
                                React.createElement("th", null, "Source"), 
                                React.createElement("th", null, "Date Released")
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "beneficiary_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}), 
                                React.createElement("td", {style: { padding: "10px 5px"}}), 
                                React.createElement("td", {style: { padding: "10px 5px"}}), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "b_municipality", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "b_barangay", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.TupadDatatable = TupadDatatable;
var TupadComponent = React.createClass({displayName: "TupadComponent",

    getInitialState: function () {
        return {
            showCreateModal: false,
            form: {
                data: {
                    municipalityNo: null,
                    municipalityName: null,
                    barangayNo: null,
                    barangayName: null,
                    serviceType: null,
                    source : null,
                    releaseDate : null
                }
            }
        }
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#tupad_component #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#tupad_component #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#tupad_component #municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#tupad_component #municipality_select2").on("change", function () {
            self.setFormPropValue('municipalityNo', $(this).val());
            self.loadMunicipality($(this).val());
        });

        $("#tupad_component #barangay_select2").on("change", function () {
            self.setFormPropValue('barangayNo', $(this).val());
            self.loadBarangay(self.state.form.data.municipalityNo, $(this).val());
        });
    },

    loadMunicipality: function (municipalityNo) {
        var self = this;

        self.requestMunicipality = $.ajax({
            url: Routing.generate("ajax_get_municipality_loc", { municipalityNo }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.municipalityName = res.name;
            self.setState({ form: form }, self.reload);
        }).fail(function () {
            var form = self.state.form;
            form.data.municipalityName = null;
            self.setState({ form: form });
        });
    },

    loadBarangay: function (municipalityNo, barangayNo) {
        var self = this;

        self.requestMunicipality = $.ajax({
            url: Routing.generate("ajax_get_barangay_loc", { municipalityNo: municipalityNo, brgyNo: barangayNo }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.barangayName = res.name;
            self.setState({ form: form }, self.reload);
        }).fail(function () {
            var form = self.state.form;
            form.data.barangayName = null;
            self.setState({ form: form });
        });;
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;

        console.log("e.target.name", e.target.name);
        console.log(' value', e.target.value);

        this.setState({ form: form }, this.reload);
    },

    reload: function () {
        this.refs.tupadDatatableReference.reload();
    },

    onSuccessCreate: function (trn) {
        this.refs.tupadDatatableReference.reload();
        this.refs.tupadDatatableReference.openProfile(trn.id);
    },

    render: function () {
        var self = this;

        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body", id: "tupad_component"}, 

                    
                        this.state.showCreateModal &&
                        React.createElement(TupadCreateModal, {
                            proId: 3, 
                            show: this.state.showCreateModal, 
                            notify: this.props.notify, 
                            reload: this.reload, 
                            onHide: this.closeCreateModal, 
                            serviceType: this.state.form.data.serviceType, 
                            source: this.state.form.data.source, 
                            releaseDate: this.state.form.data.releaseDate, 
                            success: this.onSuccessCreate, 
                            municipalityNo: this.state.form.data.municipalityNo, 
                            municipalityName: this.state.form.data.municipalityName, 
                            barangayName: this.state.form.data.barangayName, 
                            barangayNo: this.state.form.data.barangayNo}
                        ), 
                    

                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-2"}, 
                            React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityName"}
                            )
                        ), 
                        React.createElement("div", {className: "col-md-2"}, 
                            React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "barangayName"}
                            )
                        ), 
                        React.createElement("div", {className: "col-md-2"}, 
                            React.createElement("select", {className: "form-control", onChange: this.setFormProp, value: this.state.form.data.serviceType, name: "serviceType"}, 
                                React.createElement("option", {value: ""}, " - SELECT TYPE OF SERVICE - "), 
                                React.createElement("option", {value: "AICS_FOOD"}, "Food Assistance"), 
                                React.createElement("option", {value: "SLP"}, "Sustainable Livelihood Program(SLP)"), 
                                React.createElement("option", {value: "AICS_EDUC"}, "DSWD-AICS Educational Assistance"), 
                                React.createElement("option", {value: "TUPAD"}, "Tulong Panghanapbuhay (Disadvantage /Displaced Workers)"), 
                                React.createElement("option", {value: "TUPAD_2023"}, "Tupad 2023")
                            )
                        ), 

                        React.createElement("div", {className: "col-md-2"}, 
                            React.createElement("select", {className: "form-control", onChange: this.setFormProp, value: this.state.form.data.source, name: "source"}, 
                                React.createElement("option", {value: ""}, " - SELECT SOURCE - "), 
                                React.createElement("option", {value: "VICE"}, "VICE OLA / PROVINCE"), 
                                React.createElement("option", {value: "SIR GING"}, "SIR GING"), 
                                React.createElement("option", {value: "SIR TON"}, "SIR TON"), 
                                React.createElement("option", {value: "ERWIN"}, "ERWIN GROUP"), 
                                React.createElement("option", {value: "VERANO_FRANCISCO"}, "VERANO/FRANCISCO GROUP"), 
                                React.createElement("option", {value: "FRANCISCO"}, "FRANCISCO GROUP"), 
                                React.createElement("option", {value: "PIA_ARIEL"}, "PIA/ARIEL GROUP"), 
                                React.createElement("option", {value: "ARIEL_LAPANGAN"}, "ARIEL LAPANGAN (AL)"), 
                                React.createElement("option", {value: "HADJI_JOJO_KAP_BATALLA"}, "HADJI JOJO / KAP BATALLA"), 
                                React.createElement("option", {value: "SHA"}, "MAAM SHA"), 
                                React.createElement("option", {value: "DANY"}, "DANY"), 
                                React.createElement("option", {value: "ERLY"}, "ERLY"), 
                                React.createElement("option", {value: "IYA"}, "IYA"), 
                                React.createElement("option", {value: "MAYONG"}, "MAYONG"), 
                                React.createElement("option", {value: "ROSE"}, "ROSE"), 
                                React.createElement("option", {value: "APOSTOL"}, "APOSTOL"), 
                                React.createElement("option", {value: "TABONG"}, "TABONG"), 
                                React.createElement("option", {value: "TATA"}, "TATA"), 
                                React.createElement("option", {value: "MERCA"}, "MERCA")
                            )
                        ), 

                        React.createElement("div", {className: "col-md-2"}, 
                            React.createElement("input", {type: "date", onChange: this.setFormProp, name: "releaseDate", className: "input-md form-control"})
                        ), 

                        React.createElement("div", {className: "col-md-2"}, 
                            React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openCreateModal}, "Add Record")
                        )
                    ), 

                    React.createElement("div", {className: "row"}, 
                        React.createElement(TupadDatatable, {
                            sourceMunicipality: self.state.form.data.municipalityName, 
                            sourceBarangay: self.state.form.data.barangayName, 
                            serviceType: self.state.form.data.serviceType, 
                            source: this.state.form.data.source, 
                            releaseDate: this.state.form.data.releaseDate, 
                            ref: "tupadDatatableReference"})
                    )
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(TupadComponent, null),
        document.getElementById('page-container')
    );
}, 500);
