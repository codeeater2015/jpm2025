var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var ResponseModal = React.createClass({displayName: "ResponseModal",

    getInitialState: function () {
        return {
            unselected: [],
            options: [],
            form: {
                data: {
                    messageBody: ""
                },
                errors: []
            },
            maxChars : 160
        };
    },

    componentDidMount: function () {
        console.log('pro voter id');
        console.log(this.props.proVoterId);
    },

    render: function () {
        var self  = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {enforceFocus: false, backdrop: "static", bsSize: "lg", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {closeButton: true}, 
                    React.createElement(Modal.Title, null, "Create Template")
                ), 

                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {onSubmit: this.submit}, 

                        React.createElement(FormGroup, {controlId: "formMessageBody", validationState: this.getValidationState('messageBody')}, 
                            React.createElement(ControlLabel, null, "Your Message : "), 
                            React.createElement(FormControl, {componentClass: "textarea", rows: "5", name: "messageBody", className: "form-control input-sm", value: data.messageBody, onChange: this.setMessageBody}), 
                            React.createElement("small", {style: { fontSize: "12px"}}, 
                                React.createElement("span", null, 
                                    "You may use the ff. keywords({name1}, {name2}, {name3}, {precinctNo}, {voterNo}, {brgy}, {mun}) to add additional information on your message."
                                )
                            ), 
                            React.createElement("div", {className: "text-right"}, 
                                React.createElement("label", null, "Letter Count : ", data.messageBody.length + " / " + self.state.maxChars, " ")
                            ), 
                            React.createElement(HelpBlock, null, this.getError('messageBody'))
                        ), 

                        React.createElement("div", {className: "clearfix"}), 
                        React.createElement("div", {className: "text-right m-t-md"}, 
                            React.createElement("button", {type: "button", className: "btn btn-default", onClick: this.props.onHide}, "Cancel"), 
                            React.createElement("button", {type: "submit", className: "btn btn-primary"}, "Submit")
                        )
                    )
                )
            )
        );
    },

    setMessageBody : function(e){
        var form = this.state.form;

        if(e.target.value.length > this.state.maxChars)
            form.data.messageBody = e.target.value.substring(0,this.state.maxChars);
        else
            form.data.messageBody = e.target.value;

        this.setState({form : form});
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }

        return null;
    },

    getValidationState: function (field) {
        if (this.getError(field) != null)
            return "error";

        return null;
    },

    submit: function (e) {
        e.preventDefault();
        var self = this;
        var data = self.state.form.data;

        self.requestPostSms = $.ajax({
            url: Routing.generate('ajax_reply_sms', { proId: this.props.proId, proVoterId : this.props.proVoterId }),
            type: 'POST',
            data: (data)
        }).done(function (res) {
            self.props.onHide();
        }).fail(function (res) {
            self.setErrors(res.responseJSON);
        });
    },

    isEmpty: function (value) {
        return value == null || value == '';
    }
});


window.ResponseModal = ResponseModal;
var ReceivedSmsDatatable = React.createClass({displayName: "ReceivedSmsDatatable",

    getInitialState : function(){
        return {
            showResponseModal : false,
            proVoterId : null
        }
    },

    render: function () {
        return (
            React.createElement("div", null, 
                this.state.showResponseModal && 
                    React.createElement(ResponseModal, {
                        show: this.state.showResponseModal, 
                        onHide: this.closeResponseModal, 
                        proId: this.props.proId, 
                        proVoterId: this.state.proVoterId}), 
                
                React.createElement("table", {id: "sms_received_datatable", className: "table table-bordered"}, 
                    React.createElement("thead", null, 
                        React.createElement("tr", {className: "text-center"}, 
                            React.createElement("td", null, "Id"), 
                            React.createElement("td", null, "Mobile #"), 
                            React.createElement("td", null, "Content"), 
                            React.createElement("td", null, "Municipality"), 
                            React.createElement("td", null, "Barangay"), 
                            React.createElement("td", null, "Received At"), 
                            React.createElement("td", null)
                        )
                    ), 
                    React.createElement("tbody", null
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initGrid();
    },

    initGrid: function () {
        var grid = new Datatable();
        var self = this;
        grid.init({
            src: $("#sms_received_datatable"),
            dataTable: { // here you can define a typical datatable settings from http://datatables.net/usage/options
                'ordering': false,
                "serverSide": true,
                "processing": true,
                "searching" : false,
                "deferRender": true,
                "autoWidth": true,
                "dom": '<"top"fpli>rt<"bottom"pli><"clear">',
                "searchDelay": 2000,
                "language": {
                    "processing": '<i class="fa fa-spinner fa-pulse fa-fw"></i><span > Loading...</span>.'
                },
                "lengthMenu": [
                    [10, 20, 50, 100, 150],
                    [10, 20, 50, 100, 150] // change per page values here
                ],
                "pageLength": 10, // default record count per page
                "ajax": {
                    "url": Routing.generate('ajax_get_received_sms'), // ajax source
                    "type": 'GET'
                },
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
               
                    {
                        "data": 'MessageFrom',
                        "className": "dt-body-center",
                        "width": 70
                    },
                    {
                        "data": 'MessageText',
                        "className": "text-left",
                        "render" : function(data, type, row){
                            var content = data;

                            if(row.voter_name != '- - - -')
                                content = '<strong>' + row.senderName + '</strong> : '  + data;

                            return content;
                        }
                    },
                    {
                        "data": 'Municipality',
                        "className": "text-center",
                        "width": 100
                    },
                    {
                        "data": 'Barangay',
                        "className": "text-center",
                        "width": 100
                    },
                    {
                        "data": 'SendTime',
                        "className": "text-center",
                        "render" : function(data){
                            return moment(data).format('lll');
                        }
                    },
                    {
                        "width": 30,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var replyBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green-dark reply-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-commenting' ></i></a>";
                            return (row.ProVoterId != '' && row.ProVoterId != null) ? replyBtn : "";
                        }
                    },
                ]
            }
        });


        $('#sms_received_datatable tbody').on('click', '.reply-button', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.openResponseModal(data.ProVoterId);
        });
     
        self.grid = grid;
    },

    openResponseModal : function(proVoterId){
        this.setState({ showResponseModal : true , proVoterId : proVoterId});
    },

    closeResponseModal : function(){
        this.setState({ showResponseModal : false, proVoterId : null });
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    }

});


window.ReceivedSmsDatatable = ReceivedSmsDatatable;
var SmsSection = React.createClass({displayName: "SmsSection",

  getInitialState: function () {
    return {
      proId: 3,
      isLoading: false
    }
  },

  componentDidMount: function () {
    // $(document).ajaxError(function (event, request, settings) {
    //   switch (request.status) {
    //     case 400:
    //       window.services.growl.notify("Form Submission failed.", "danger");
    //       break;
    //     case 403:
    //       window.services.growl.notify("Action denied.You are not allowed to perform this action.", "danger");
    //       break;
    //     case 500:
    //       window.services.growl.notify("Opps. Something went wrong in the server. Please inform the system administrator.", "danger");
    //       break;
    //   }
    // });
  },

  syncSender() {
    var self = this;

    self.requestVoter = $.ajax({
      url: Routing.generate("ajax_sms_update_sender_name", { proId: self.state.proId }),
      type: "GET"
    }).done(function (res) {
      self.setState({ isLoading: false });
    });

    self.setState({ isLoading: true })
  },

  render: function () {
    var isLoading = this.state.isLoading;

    return (
      React.createElement("div", {className: "portlet light bordered overflow-auto"}, 
        React.createElement("div", {className: "portlet-body"}, 
          React.createElement("div", {className: "col-md-12"}, 
            React.createElement("h3", {className: "h3 m-b-md"}, "BCBP Inbox")

            /* {
              isLoading ? 
              <button type="button" disabled className="demo-loading-btn btn btn-primary"> Please wait... Syncing sender... </button> : 
              <button type="button" onClick={this.syncSender} className="demo-loading-btn btn btn-primary"> Sync Sender</button>
            } */
            
          ), 
          React.createElement("div", {className: "col-md-12"}, 
            React.createElement(ReceivedSmsDatatable, {proId: this.state.proId})
          )
        )
      )
    );
  }

});

window.SmsSection = SmsSection;

setTimeout(function () {
  ReactDOM.render(
    React.createElement(SmsSection, null),
    document.getElementById('container')
  );
}, 500);