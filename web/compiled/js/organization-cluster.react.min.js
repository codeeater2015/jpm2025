var LocationAssignmentDatatable = React.createClass({displayName: "LocationAssignmentDatatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500
        }
    },

    componentDidMount: function () {
        this.initDatatable();
    },

    initDatatable: function () {
        var self = this;

        var location_table = $("#location_assignment_table");
        var grid_table = new Datatable();
        var url = Routing.generate("ajax_get_datatable_location_assignment", { proIdCode: self.props.proIdCode }, true);

        grid_table.init({
            src: location_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "dom": "pit",
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.municipalityName = $('#location_assignment_table input[name="municipalityName"]').val();
                        d.barangayName = $('#location_assignment_table input[name="barangayName"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 1, 2, 3]
                }],
                "order": [
                    [2, "ASC"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "municipality_name"
                    },
                    { "data": "barangay_name" },
                    {
                        "width": 20,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs btn-danger delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            return deleteBtn;
                        }
                    }
                ],
            }
        });

        location_table.on('click', '.delete-button', function () {
            var data = grid_table.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_table;
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this location?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_location_assignment", { id: id }),
                type: 'DELETE'
            }).done(function () {
                self.reload();
            });
        }
    },

    
    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    render: function () {
        return (
            React.createElement("div", {style: { marginTop: "10px"}}, 
                React.createElement("div", {className: "table-container"}, 
                    React.createElement("div", {className: "table-actions-wrapper"}, 
                        React.createElement("span", null, " ")
                    ), 
                    React.createElement("table", {id: "location_assignment_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Municipality"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Action")
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "municipalityName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangayName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.LocationAssignmentDatatable = LocationAssignmentDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var OrganizationClusterEditModal = React.createClass({displayName: "OrganizationClusterEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterName: "",
                    municipalityNo: "",
                    clusterNo: 1,
                    barangays: []
                },
                errors: []
            },
            barangayList: [],
            unselected: []
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Edit Cluster Head")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "cluster-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement(FormGroup, {controlId: "formVoterId", validationState: this.getValidationState('voterName')}, 
                                            React.createElement(ControlLabel, null, " Recruitment Leader : "), 
                                            React.createElement("select", {id: "lgc-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('voterName'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6    "}, 
                                        React.createElement("div", {className: "form-group"}, 
                                            React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                            React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formClusterNo", validationState: this.getValidationState('clusterNo')}, 
                                            React.createElement(ControlLabel, null, " Cluster No : "), 
                                            React.createElement(FormControl, {type: "number", bsClass: "form-control input-sm", name: "clusterNo", value: this.state.form.data.clusterNo, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('clusterNo'))
                                        )
                                    )
                                ), 


                                React.createElement("div", {class: "row"}, 
                                    React.createElement("div", {class: "col-md-12"}, 
                                        React.createElement(FormGroup, {controlId: "formBarangays", validationState: this.getValidationState('barangays')}, 
                                            React.createElement("select", {multiple: true, ref: "selectBox", className: "searchable", id: "barangays", name: "barangays[]"}, 
                                                this.state.barangayList.map(function (item) {
                                                    return (React.createElement("option", {key: item.brgy_no, value: item.brgy_no}, item.name))
                                                })
                                            ), 
                                            React.createElement("div", {className: "text-right"}, 
                                                React.createElement(HelpBlock, null, this.getError('barangays'))
                                            )
                                        )
                                    )
                                )

                            ), 

                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        this.state.form.data.proIdCode != null ? React.createElement(LocationAssignmentDatatable, {
                                            proIdCode: this.state.form.data.proIdCode, 
                                            ref: "locationDatatable"}
                                        ) : ""
                                    )
                                )
                            )

                        ), 





                        React.createElement("div", {className: "text-right"}, 
                            React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit"), 
                            React.createElement("button", {type: "button", className: "btn  btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.initMultiSelect();
    },

    initSelect2: function () {
        var self = this;

        $("#cluster-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#cluster-form #lgc-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_cluster_lgc'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var hasId = parseInt(item.has_id) == 1 ? "YES" : "NO";
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - ID : ' + hasId;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#cluster-form #municipality_select2").on("change", function () {
            self.setMunicipality($(this).val());
        });


        $("#cluster-form #lgc-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });


        $("#cluster-form #lgc-select2").empty()
            .append($("<option/>")
                .val(self.props.proVoterId)
                .text(self.props.voterName))
            .trigger("change");
    },


    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.proVoterId = res.proVoterId;
            form.data.voterGroup = res.voterGroup;
            form.data.position = res.position;
            form.data.voteName = res.voterName;
            form.data.proIdCode = res.proIdCode;
            form.data.clusterNo = res.clusterNo;

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.position = '';
        form.data.voterGroup = '';
        form.data.remarks = '';

        self.setState({ form: form })
    },

    initMultiSelect: function () {

        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setBarangays($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setBarangays($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });
    },

    loadBarangays: function () {
        var self = this;
        var data = self.state.form.data;

        console.log("data");
        console.log(data);

        self.requestBarangays = $.ajax({
            url: Routing.generate('ajax_location_assignment_multiselect_municipality', data),
            type: "GET"
        }).done(function (res) {
            self.setState({ barangayList: res, unselected: res });
            self.refreshSelectBox();
        });
    },


    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setBarangays: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.barangays = selected;
            unselected = this.state.barangayList.filter(function (item) {
                return selected.indexOf(item.brgy_no) == -1;
            });
        } else {
            form.data.barangays = [];
            unselected = this.state.barangayList;
        }

        this.setState({ form: form, unselected: unselected });
    },


    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setMunicipality(municipalityNo) {
        var form = this.state.form;
        form.data.municipalityNo = municipalityNo;

        this.setState({ form: form }, this.loadBarangays);
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.barangays = $(self.refs.selectBox).val();

        console.log("form data");
        console.log(data);

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_organization_cluster", { proIdCode: data.proIdCode }),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.reset();
            self.props.reload();
            self.props.onHide();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.OrganizationClusterEditModal = OrganizationClusterEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var OrganizationClusterCreateModal = React.createClass({displayName: "OrganizationClusterCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterName: "",
                    municipalityNo: "",
                    clusterNo: 1,
                    barangays: []
                },
                errors: []
            },
            barangayList: [],
            unselected: []
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Cluster Head")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "cluster-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement(FormGroup, {controlId: "formVoterId", validationState: this.getValidationState('voterName')}, 
                                            React.createElement(ControlLabel, null, " Recruitment Leader : "), 
                                            React.createElement("select", {id: "lgc-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('voterName'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6    "}, 
                                        React.createElement("div", {className: "form-group"}, 
                                            React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                            React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formClusterNo", validationState: this.getValidationState('clusterNo')}, 
                                            React.createElement(ControlLabel, null, " Cluster No : "), 
                                            React.createElement(FormControl, {type: "number", bsClass: "form-control input-sm", name: "clusterNo", value: this.state.form.data.clusterNo, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('clusterNo'))
                                        )
                                    )
                                ), 


                                React.createElement("div", {class: "row"}, 
                                    React.createElement("div", {class: "col-md-12"}, 
                                        React.createElement(FormGroup, {controlId: "formBarangays", validationState: this.getValidationState('barangays')}, 
                                            React.createElement("select", {multiple: true, ref: "selectBox", className: "searchable", id: "barangays", name: "barangays[]"}, 
                                                this.state.barangayList.map(function (item) {
                                                    return (React.createElement("option", {key: item.brgy_no, value: item.brgy_no}, item.name))
                                                })
                                            ), 
                                            React.createElement("div", {className: "text-right"}, 
                                                React.createElement(HelpBlock, null, this.getError('barangays'))
                                            )
                                        )
                                    )
                                )

                            )

                        ), 





                        React.createElement("div", {className: "text-right"}, 
                            React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit"), 
                            React.createElement("button", {type: "button", className: "btn  btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.initMultiSelect();
    },

    initSelect2: function () {
        var self = this;

        $("#cluster-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#cluster-form #lgc-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_cluster_lgc'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var hasId = parseInt(item.has_id) == 1 ? "YES" : "NO";
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - ID : ' + hasId;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#cluster-form #municipality_select2").on("change", function () {
            self.setMunicipality($(this).val());
        });


        $("#cluster-form #lgc-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.proVoterId = res.proVoterId;
            form.data.voterGroup = res.voterGroup;
            form.data.position = res.position;
            form.data.voteName = res.voterName;
            form.data.proIdCode = res.proIdCode;

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.position = '';
        form.data.voterGroup = '';
        form.data.remarks = '';

        self.setState({ form: form })
    },

    initMultiSelect: function () {

        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setBarangays($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setBarangays($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });
    },

    loadBarangays: function () {
        var self = this;
        var data = self.state.form.data;

        console.log("data");
        console.log(data);

        self.requestBarangays = $.ajax({
            url: Routing.generate('ajax_location_assignment_multiselect_municipality', data),
            type: "GET"
        }).done(function (res) {
            self.setState({ barangayList: res, unselected: res });
            self.refreshSelectBox();
        });
    },


    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setBarangays: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.barangays = selected;
            unselected = this.state.barangayList.filter(function (item) {
                return selected.indexOf(item.brgy_no) == -1;
            });
        } else {
            form.data.barangays = [];
            unselected = this.state.barangayList;
        }

        this.setState({ form: form, unselected: unselected });
    },


    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setMunicipality(municipalityNo) {
        var form = this.state.form;
        form.data.municipalityNo = municipalityNo;

        this.setState({ form: form }, this.loadBarangays);
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.barangays = $(self.refs.selectBox).val();

        console.log("form data");
        console.log(data);

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_organization_cluster", { proIdCode: data.proIdCode }),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.reset();
            self.props.reload();
            self.props.onHide();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.OrganizationClusterCreateModal = OrganizationClusterCreateModal;
var OrganizationClusterDatatable = React.createClass({displayName: "OrganizationClusterDatatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showAttendanceModal: false,
            targetId: null,
            targetName : "",
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        this.initSelect2();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#organization_cluster_table #election_select2").select2({
            casesentitive: false,
            placeholder: "Select Election...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#organization_cluster_table #project_select2").select2({
            casesentitive: false,
            placeholder: "Select Project...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_projects'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.pro_id, text: item.pro_name };
                        })
                    };
                },
            }
        });


        $("#custer_table #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#custer_table #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Enter name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53,
                        municipalityNo: $("#custer_table #municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#organization_cluster_table #election_select2").on("change", function () {
            var filters = self.state.filters;
            filters.electId = $(this).val();

            self.setState({ filters: filters }, self.reload);
        });

        $("#organization_cluster_table #project_select2").on("change", function () {
            var filters = self.state.filters;
            filters.proId = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

        $("#organization_cluster_table #province_select2").on("change", function () {
            var filters = self.state.filters;
            filters.provinceCode = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

    },

    reinitSelect2: function () {
        var self = this;

        if (!self.isEmpty(self.state.user.project)) {
            var provinceCode = self.state.user.project.provinceCode;

            self.requestProvince = $.ajax({
                url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
                type: "GET"
            }).done(function (res) {
                $("#organization_cluster_table #province_select2").empty()
                    .append($("<option/>")
                        .val(res.province_code)
                        .text(res.name))
                    .trigger("change");
            });

            self.requestProject = $.ajax({
                url: Routing.generate("ajax_get_project", { proId: self.state.user.project.proId }),
                type: "GET"
            }).done(function (res) {
                $("#organization_cluster_table #project_select2").empty()
                    .append($("<option/>")
                        .val(res.proId)
                        .text(res.proName))
                    .trigger("change");

                self.initDatatable();
            });
        }

        self.requestActiveElection = $.ajax({
            url: Routing.generate("ajax_get_active_election"),
            type: "GET"
        }).done(function (res) {
            $("#organization_cluster_table #election_select2").empty()
                .append($("<option/>")
                    .val(res.electId)
                    .text(res.electName))
                .trigger("change");
        });

        if (!self.state.user.isAdmin) {
            $("#organization_cluster_table #election_select2").attr('disabled', 'disabled');
            $("#organization_cluster_table #province_select2").attr('disabled', 'disabled');
            $("#organization_cluster_table #project_select2").attr('disabled', 'disabled');
        }
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var custer_table = $("#custer_table");

        grid.init({
            src: custer_table,

            dataTable: {
                "bState": true,
                "autoWidth": true,
                "serverSide": true,
                "processing": true,
                "ajax": {
                    "url": Routing.generate('ajax_datatable_organization_cluster'),
                    "type": "GET",
                    "data": function (d) {
                        d.provinceCode = 53;
                        d.municipalityNo = $('#custer_table #municipality_select2').val();
                        d.brgyNo = $('#custer_table #barangay_select2').val();
                        d.voterName = $('#custer_table input[name="voter_name"]').val();
                        d.cellphone = $('#custer_table input[name="cellphone"]').val();
                        d.voterGroup = 'LGC'
                        d.electId = self.props.elecId;
                        d.proId = self.props.proId;
                    }
                },
                columnDefs: [
                    {
                        'className': 'text-center valign-middle',
                        'orderable': false,
                        'targets': [0, 2, 3, 4, 5, 6, 7]
                    }
                ],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "render": function (data, type, row) {
                            return (row.voted_2017 == 1 ? "*" : "") + data;
                        }
                    },
                    {
                        "data": "municipality_name",
                        "width": 150
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150
                    },
                    {
                        "data": "cluster_no",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "total_barangay",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "cellphone_no",
                        "className": "text-center",
                        "width": 100
                    },
                    {
                        "width": 70,
                        "render": function (data, type, row) {
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';

                            var btnGroup = '';
                            btnGroup += editBtn;
                            btnGroup += deleteBtn;

                            return btnGroup;
                        },
                        "className": "text-center"
                    }
                ]
            }

        });


        custer_table.on('click', '.edit-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            console.log(data.voter_name);
            self.setState({ showEditModal : true, targetId : data.pro_voter_id, targetName : data.voter_name });
        });

        custer_table.on('click', '.delete-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.pro_voter_id);
        });

        self.grid = grid;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    delete: function (proVoterId) {
        var self = this;

        if (confirm("continue clear assigned barangays?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_organization_cluster", { proVoterId: proVoterId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                    this.state.showCreateModal &&
                    React.createElement(OrganizationClusterCreateModal, {
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId, 
                        show: this.state.showCreateModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeCreateModal}
                    ), 
                

                
                    this.state.showEditModal &&
                    React.createElement(OrganizationClusterEditModal, {
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId, 
                        proVoterId: this.state.targetId, 
                        voterName: this.state.targetName, 
                        show: this.state.showEditModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeEditModal}
                    ), 
                

                React.createElement("div", {className: "row", id: "organization_cluster_table"}, 
                    React.createElement("div", {className: "col-md-5"}, 
                        React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openCreateModal}, "Add CluterHead")
                    ), 

                    React.createElement("div", {className: "col-md-7"}, 
                        React.createElement("form", {onSubmit: this.onApplyCode}, 
                            React.createElement("div", {className: "col-md-3 col-md-offset-1"}, 
                                React.createElement("select", {id: "election_select2", className: "form-control form-filter input-sm"}
                                )
                            ), 
                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("select", {id: "province_select2", className: "form-control form-filter input-sm"}
                                )
                            ), 
                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("select", {id: "project_select2", className: "form-control form-filter input-sm"}
                                )
                            )
                        )
                    )
                ), 

                React.createElement("div", {className: "table-container"}, 
                    React.createElement("div", {className: "table-actions-wrapper"}
                    ), 
                    React.createElement("table", {id: "custer_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", {className: "text-center"}, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", {className: "text-center"}, "Municipality"), 
                                React.createElement("th", {className: "text-center"}, "Brgy"), 
                                React.createElement("th", {className: "text-center"}, "CL"), 
                                React.createElement("th", {className: "text-center"}, "Total"), 
                                React.createElement("th", {className: "text-center"}, "CP No."), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilterChange})
                                ), 

                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 

                                React.createElement("td", {style: { padding: "10px 5px"}}
                                
                                ), 

                                
                                React.createElement("td", {style: { padding: "10px 5px"}}
                                
                                ), 

                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "cellphone", onChange: this.handleFilterChange})
                                ), 

                                React.createElement("td", {className: "text-center"}, 
                                    React.createElement("button", {style: { marginTop: "5px", marginBottom: "5px"}, className: "btn btn-xs green btn-outline filter-submit"}, 
                                        React.createElement("i", {className: "fa fa-search"}), "Search"
                                    )
                                )
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.OrganizationClusterDatatable = OrganizationClusterDatatable;
var ProjectEventComponent = React.createClass({displayName: "ProjectEventComponent",

    notify : function(message,color){
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    render : function(){
        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body"}, 
                    React.createElement("p", null, "Organization Cluster"), 
                    React.createElement(OrganizationClusterDatatable, {notify:  this.notify})
                )
            )
        )
    }
});

setTimeout(function(){
    ReactDOM.render(
    React.createElement(ProjectEventComponent, null),
        document.getElementById('page-container')
    );
},500);
