var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdSummaryModal = React.createClass({displayName: "HouseholdSummaryModal",
    getInitialState: function () {
        return {
            summary: [],
        }
    },

    componentDidMount: function () {
        this.loadSummary();
    },

    printPage: function () {
        console.log('printing');
        $.print("#household_summary1_table" /*, options*/);
    },

    loadSummary: function (userId) {
        var self = this;

        console.log('municipality no');
        console.log(this.props.municipalityNo);
        self.requestUser = $.ajax({
            url: Routing.generate("ajax_m_get_household_voters_summary_by_barangay", { municipalityNo: this.props.municipalityNo }),
            type: "GET"
        }).done(function (res) {
            console.log("summary has been received");
            self.setState({ summary: res });
        });
    },

    render: function () {
        var self = this;
        var data = self.state.header;
        var gPuerto = 0;
        var gAborlan = 0;
        var gHousehold = 0;
        var gOutside = 0;
        var gPotential = 0;
        var gTotal = 0;

        var gTl = 0;
        var gK0 = 0;
        var gK1 = 0;
        var gK2 = 0;
        var gNoPos = 0;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Municipality Breakdown Summary")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12 text-right"}, 
                            React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.printPage}, "Print Page")
                        )
                    ), 
                    React.createElement("br", null), 
                    React.createElement("div", null, 
                        React.createElement("table", {id: "household_summary1_table", className: "table table-condensed table-bordered"}, 
                            React.createElement("thead", {style: { backgroundColor: "#5ab866"}}, 
                                React.createElement("tr", {className: "text-center"}, 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Household Address"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Households"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Est. Target"), 
                                    React.createElement("th", {colSpan: "2", className: "text-center"}, "Voting Address"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Outside"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Potential"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Total"), 
                                    React.createElement("th", {colSpan: "5", className: "text-center"}, "Hierarchy")
                                ), 
                                React.createElement("tr", null, 
                                    React.createElement("th", {className: "text-center"}, "Puerto"), 
                                    React.createElement("th", {className: "text-center"}, "Aborlan"), 
                                    React.createElement("th", {className: "text-center"}, "TL"), 
                                    React.createElement("th", {className: "text-center"}, "K0"), 
                                    React.createElement("th", {className: "text-center"}, "K1"), 
                                    React.createElement("th", {className: "text-center"}, "K2"), 
                                    React.createElement("th", {className: "text-center"}, "No Position")
                                )
                            ), 
                            React.createElement("tbody", null, 
                                
                                    this.state.summary.map(function (item, index) {

                                        gTotal += Number.parseInt(item.total_household);
                                        gPuerto += Number.parseInt(item.total_puerto);
                                        gHousehold += Number.parseInt(item.total_household);
                                        gAborlan += Number.parseInt(item.total_aborlan);
                                        gOutside += Number.parseInt(item.total_outside);
                                        gPotential += Number.parseInt(item.total_potential);

                                        gTl += Number.parseInt(item.total_tl);
                                        gK0 += Number.parseInt(item.total_k0);
                                        gK1 += Number.parseInt(item.total_k1);
                                        gK2 += Number.parseInt(item.total_k2);
                                        gNoPos += Number.parseInt(item.total_no_pos);

                                        return (
                                            React.createElement("tr", null, 
                                                React.createElement("td", {className: "text-left"}, ++index, ". ", item.asn_barangay_name), 
                                                React.createElement("td", {className: "text-center"}, item.total_household), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_household) * 4), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_puerto)), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_aborlan)), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_outside)), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_potential)), 
                                                React.createElement("td", {className: "text-center"}, React.createElement("strong", null, Number.parseInt(item.total_puerto) + Number.parseInt(item.total_aborlan) + Number.parseInt(item.total_potential))), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_tl)), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_k0)), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_k1)), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_k2)), 
                                                React.createElement("td", {className: "text-center"}, Number.parseInt(item.total_no_pos))
                                            )
                                        );
                                    }), 
                                
                                React.createElement("tr", null, 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, "Total")), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gHousehold)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gHousehold * 4)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gPuerto)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gAborlan)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gOutside)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gPotential)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gPuerto + gAborlan + gPotential)), 

                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gTl)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gK0)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gK1)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gK2)), 
                                    React.createElement("td", {className: "text-center"}, React.createElement("strong", null, gNoPos))
                                )
                            )
                        )
                    )
                )
            )
        );
    }

});


window.HouseholdSummaryModal = HouseholdSummaryModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdMemberCreateModal = React.createClass({displayName: "HouseholdMemberCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterId: null,
                    cellphone: "",
                    voterGroup: "",
                    assignedPrecinct: "",
                    precinctNo: "",
                    remarks: "",
                    inputVoterGroup: "KFC"
                },
                errors: []
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#household-member-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household-member-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#household-member-form #municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household-member-form #form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: self.props.proId,
                        electId: self.props.electId,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#relationship_select2").select2({
            casesentitive: false,
            placeholder: "Select relation",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_relationship'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.relationship, text: item.relationship };
                        })
                    };
                },
            }
        });


        $("#other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").on("change", function () {
            self.loadVoter(self.props.proId, $(this).val());
        });

        $("#household-member-form #municipality_select2").on("change", function () {
            self.setFieldValue("municipalityNo", $(this).val());
        });

        $("#household-member-form #barangay_select2").on("change", function () {
            self.setFieldValue("barangayNo", $(this).val());
        });

        $("#relationship_select2").on("change", function () {
            self.setFieldValue("relationship", $(this).val());
        });

        $("#other_position_select2").on("change", function () {
            self.setFieldValue("position", $(this).val());
        });

        $("#household-member-form #municipality_select2").empty()
            .append($("<option/>")
                .val(this.props.municipalityNo)
                .text(this.props.municipalityName))
            .trigger("change");

        $("#household-member-form #barangay_select2").empty()
            .append($("<option/>")
                .val(this.props.barangayNo)
                .text(this.props.barangayName))
            .trigger("change");

    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var chunks = res.voterName.split(",");
            var firstname = '';
            var middlename = '';
            var lastname = '';

            if (chunks.length > 1) {
                chunks = chunks[1].trim().split(" ");
                lastname = res.voterName.split(",")[0];
                middlename = chunks.length > 1 ? chunks[chunks.length - 1] : '';
                firstname = res.voterName.split(",")[1].replace(middlename, '');;
            } else {
                chunks = res.voterName.trim().split(" ");
                lastname = chunks[0];
                firstname = chunks[1];
                middlename = chunks.length > 2 ? chunks[2] : '';
            }

            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphone = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.birthdate = !self.isEmpty(res.birthdate) ? moment(res.birthdate).format('YYYY-MM-DD') : '';
            form.data.gender = res.gender;
            form.data.firstname = self.isEmpty(res.firstname) ? firstname.trim() : res.firstname;
            form.data.middlename = self.isEmpty(res.middlename) ? middlename.trim() : res.middlename;
            form.data.lastname = self.isEmpty(res.lastname) ? lastname.trim() : res.lastname;
            form.data.extName = res.extname;
            form.data.position = res.position;

            $("#other_position_select2").empty()
                .append($("<option/>")
                    .val(res.position)
                    .text(res.position))
                .trigger("change");

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';
        form.data.position = '';

        self.setState({ form: form })
    },

    reset: function () {
        var form = this.state.form;
        form.data.proVoterId = "";
        form.data.cellphoneNo = "";
        form.data.firstname = "";
        form.data.lastname = "";
        form.data.middlename = "";
        form.data.extName = "";
        form.data.gender = "";
        form.data.birthdate = "";
        form.data.relationship = "";
        form.data.position = "";
        form.data.remarks = "";

        form.errors = [];

        $("#form-voter-select2").empty().trigger("change");
        $("#relationship_select2").empty().trigger("change");

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setNewProfile: function (data) {
        var self = this;

        $("#form-voter-select2").empty()
            .append($("<option/>")
                .val(data.proVoterId)
                .text(data.voterName))
            .trigger("change")
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },


    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.householdId = self.props.householdId;
        data.proId = self.props.proId;
        data.electId = self.props.electId;
        data.position = $("#other_position_select2").val();

        self.requestAddAttendee = $.ajax({
            url: Routing.generate("ajax_post_household_detail"),
            type: "POST",
            data: data
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
            self.notify("Member has been added.", "teal");
        }).fail(function (err) {
            self.notify("Form Validation Failed.", "ruby");
            self.setErrors(err.responseJSON);
        });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: true })
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, bsSize: "lg", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Household Member Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: 3, 
                            electId: 423, 
                            provinceCode: 53, 
                            show: this.state.showNewVoterCreateModal, 
                            onHide: this.closeNewVoterCreateModal, 
                            onSuccess: this.setNewProfile, 

                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "household-member-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo"}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo"}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-8"}, 
                                React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('voterName')}, 
                                    React.createElement(ControlLabel, null, " Voter Name : "), 
                                    React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterName'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("button", {style: { marginTop: "25px"}, onClick: this.openNewVoterCreateModal, className: "btn btn-primary btn-sm", type: "button"}, " New Voter ")
                            )
                        ), 


                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                    React.createElement(ControlLabel, null, " Remarks : "), 
                                    React.createElement("textarea", {rows: "5", value: this.state.form.data.remarks, className: "input-sm form-control", onChange: this.setFormProp, name: "remarks"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('remarks'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", disabled: this.isEmpty(this.state.form.data.proVoterId), type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.HouseholdMemberCreateModal = HouseholdMemberCreateModal;

var HouseholdDetailDatatable = React.createClass({displayName: "HouseholdDetailDatatable",

    getInitialState: function () {
        return {
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            showEditModal: false
        }
    },

    componentDidMount: function () {
        this.initDatatable(this.props.householdId);
    },

    initDatatable: function (householdId) {
        var self = this;
        var grid = new Datatable();

        var project_recruitment_detail_datatable = $("#project_recruitment_detail_datatable");
        var grid_project_event = new Datatable();

        var url = Routing.generate("ajax_get_datatable_household_detail", { householdId: householdId }, true);

        grid_project_event.init({
            src: project_recruitment_detail_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.provinceCode = '53';
                        d.voterName = $('#project_recruitment_detail_datatable input[name="voterName"]').val();
                        d.barangayName = $('#project_recruitment_detail_datatable input[name="barangayName"]').val();
                        d.householdId = self.props.householdId;
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 20,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "className": "text-left",
                        "render" : function(data,type,row){
                            return  row.is_non_voter == 1 ? '--- ' + data :  data;
                        }
                    },
                    {
                        "data": "birthdate",
                        "className": "text-center",
                        "width": 100
                    },
                 
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150
                    },
                    {
                        "data": "cellphone",
                        "className": "text-center",
                        "width": 100,
                    },

                    {
                        "width": 60,
                        "className" : "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";

                            return deleteBtn;
                        }
                    }
                ],
            }
        });


        project_recruitment_detail_datatable.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        // project_recruitment_detail_datatable.on('click', '.edit-button', function () {
        //     var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
        //     self.edit(data.voter_id);
        // });

        self.grid = grid_project_event;
    },

    edit: function (voterId) {
        this.setState({ showEditModal: true, target: voterId })
    },

    closeEditModal: function () {
        this.reload();
        this.setState({ showEditModal: false, target: null });
    },

    delete: function (householdDetailId) {
        var self = this;

        if (confirm("Are you sure you want to remove this member ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_household_detail", { householdDetailId: householdDetailId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    reloadFiltered: function (precinctNo) {
        var self = this;
        $('#project_recruitment_detail_datatable input[name="assignedPrecinct"]').val(precinctNo);

        setTimeout(function () {
            self.grid.getDataTable().ajax.reload();
        });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },


    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    render: function () {
        return (
            React.createElement("div", null, 

                this.state.showEditModal &&
                    React.createElement(VoterEditModal, {
                        show: this.state.showEditModal, 
                        onHide: this.closeEditModal, 
                        notify: this.props.notify, 
                        voterId: this.state.target, 
                        proId: this.props.proId}
                    ), 
                

                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "project_recruitment_detail_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Birthdate"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Cellphone #"), 
                                React.createElement("th", null, "Actions")
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "birthdate", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangayName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.HouseholdDetailDatatable = HouseholdDetailDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdMemberModal = React.createClass({displayName: "HouseholdMemberModal",
    getInitialState: function () {
        return {
            member: null,
            showAddMemberModal: false,
            header: {
                householdCode: "",
                voterName: "",
                barangayName: "",
                municipalityName: "",
                cellphone: "",
                lgc: {
                    voter_name: ""
                }
            }
        }
    },

    render: function () {
        var self = this;
        var data = self.state.header;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Household Information : ", data.voterName, " ")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showAddMemberModal &&
                        React.createElement(HouseholdMemberCreateModal, {
                            proId: self.props.proId, 
                            provinceCode: 53, 
                            municipalityNo: this.state.header.municipalityNo, 
                            municipalityName: this.state.header.municipalityName, 
                            barangayNo: this.state.header.barangayNo, 
                            barangayName: this.state.header.barangayName, 

                            electId: self.props.electId, 
                            householdId: this.props.id, 
                            show: this.state.showAddMemberModal, 
                            notify: this.props.notify, 
                            onSuccess: this.reloadDatatable, 
                            onHide: this.closeAddMemberModal}
                        ), 
                    
                    React.createElement("div", {style: { marginBottom: "25px"}}, 
                        React.createElement("strong", null, "Household # : "), " ", this.state.header.householdCode, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Household Leader : "), " ", this.state.header.isNonVoter == 1 ? '---' + this.state.header.voterName : this.state.header.voterName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Municipality : "), " ", this.state.header.municipalityName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Barangay : "), "  ", this.state.header.barangayName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Cellphone : "), "  ", this.state.header.cellphone
                    ), 

                    React.createElement("div", {className: "col-md-3"}, 
                        React.createElement(FormGroup, {controlId: "formCellphoneNo"}, 
                            React.createElement(ControlLabel, null, " Cellphone No : "), 
                            React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.header.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"})
                        )
                    ), 

                    React.createElement("div", {className: "col-md-12", style: { marginBottom: "10px"}}, 
                        React.createElement("textarea", {rows: "5", placeholder: "Type notes here...", value: this.state.header.remarks, className: "input-sm form-control", onChange: this.setFormProp, name: "remarks"}
                        )
                    ), 
                    React.createElement("div", {className: "col-md-12"}, 
                        React.createElement("button", {style: { float: "right"}, onClick: this.patchRemarks, type: "button", className: "btn btn-sm btn-primary"}, "Save Notes")
                    ), 

                    React.createElement("div", {className: "col-md-12", style: { paddingLeft: "0px", marginBottom: "10px"}}, 
                        React.createElement("button", {onClick: this.openAddMemberModal, type: "button", className: "btn btn-sm btn-primary"}, "Add Member")
                    ), 

                    React.createElement(HouseholdDetailDatatable, {ref: "DetailDatatable", 
                        municipalityNo: this.state.header.municipalityNo, 
                        municipalityName: this.state.header.municipalityName, 
                        barangayNo: this.state.header.barangayNo, 
                        barangayName: this.state.header.barangayName, 
                        notify: this.props.notify, 
                        householdId: this.props.id, 
                        electId: self.props.electId, 
                        proId: self.props.proId
                    }
                    )

                )
            )
        );
    },

    componentDidMount: function () {
        this.loadHeader(this.props.id);
    },

    loadHeader: function (id) {
        var self = this;

        self.requestRecruiter = $.ajax({
            url: Routing.generate("ajax_get_household_header", { id: id }),
            type: "GET"
        }).done(function (res) {
            self.setState({ header: res });
        });
    },

    setFormProp: function (e) {
        let header = this.state.header;
        header[ e.target.name] = e.target.value;

        this.setState({ header : header });
    },

    reloadDatatable: function () {
        this.refs.DetailDatatable.reload();
    },

    openAddMemberModal: function () {
        console.log("showing add member modal");
        this.setState({ showAddMemberModal: true })
    },

    closeAddMemberModal: function () {
        this.setState({ showAddMemberModal: false });
    },

    patchRemarks: function () {
        let self = this;

        let data = {
            remarks: this.state.header.remarks,
            contactNo : this.state.header.cellphone
        };

        console.log('data');
        console.log(data);

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_patch_household_notes", { householdId: this.props.id }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.props.notify("Household has been updated.", 'teal');
            self.props.onDataPatched();
        }).fail(function (err) {
            self.props.notify("Validation failed !", 'ruby');
        });

        console.log('saving notes');

    }

});


window.HouseholdMemberModal = HouseholdMemberModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryCreateModal = React.createClass({displayName: "VoterTemporaryCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                    React.createElement(ControlLabel, null, " Precinct No : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.precinctNo, className: "input-sm form-control", onChange: this.setFormProp, name: "precinctNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 
                        
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });


        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#new-voter-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#new-voter-create-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }

        if (!self.props.user.isAdmin) {
            $("#new-voter-create-form #municipality_select2").attr('disabled', 'disabled');
        }
    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, voterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.nodeLabel = res.voterName;
            form.data.nodeOrder = 10;
            form.data.municipalityNo = res.municipalityNo;
            form.data.brgyNo = res.brgyNo;
            form.data.voterId = res.voterId;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? "" : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? "KFC" : res.voterGroup;
            form.data.remarks = self.isEmpty(res.remarks) ? "" : res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");


            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-create-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-create-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-create-form #occupation_select2').val();
        data.religion = $('#new-voter-create-form #religion_select2').val();
        data.dialect = $('#new-voter-create-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-create-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-create-form #voter_group_select2').val();
        data.position = $('#new-voter-create-form #other_position_select2').val();

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_project_temporary_voter"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.VoterTemporaryCreateModal = VoterTemporaryCreateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdEditModal = React.createClass({displayName: "HouseholdEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    electId: null,
                    proVoterId: null,
                    voterGroup : null,
                    voterName : null
                },
                errors: []
            },
            provinceCode: 53,
            showNewVoterCreateModal: false
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Household Edit Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    React.createElement("form", {id: "kfc-household-edit-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBarangay", validationState: this.getValidationState('barangayNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-8"}, 
                                React.createElement(FormGroup, {controlId: "formVoterId", validationState: this.getValidationState('voterId')}, 
                                    React.createElement(ControlLabel, null, " Household Leader : "), 
                                    React.createElement("select", {id: "voter-recruit-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterId'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement("button", {style: { marginTop: "25px"}, onClick: this.openNewVoterCreateModal, className: "btn btn-primary btn-sm", type: "button"}, " New Voter ")
                            )
                        ), 

                        /* <div className="row">

                            <div className="col-md-2" >
                                <FormGroup controlId="formLastname" validationState={this.getValidationState('lastname')}>
                                    <ControlLabel > Apelyido : </ControlLabel>
                                    <input type="text" value={this.state.form.data.lastname} className="input-sm form-control" onChange={this.setFormProp} name="lastname" />
                                    <HelpBlock>{this.getError('lastname')}</HelpBlock>
                                </FormGroup>
                            </div>

                            <div className="col-md-2" >
                                <FormGroup controlId="formFirstname" validationState={this.getValidationState('firstname')}>
                                    <ControlLabel > Pangalan : </ControlLabel>
                                    <input type="text" value={this.state.form.data.firstname} className="input-sm form-control" onChange={this.setFormProp} name="firstname" />
                                    <HelpBlock>{this.getError('firstname')}</HelpBlock>
                                </FormGroup>
                            </div>

                            <div className="col-md-2" >
                                <FormGroup controlId="formMiddlename" validationState={this.getValidationState('middlename')}>
                                    <ControlLabel > Gitnang Pangalan : </ControlLabel>
                                    <input type="text" value={this.state.form.data.middlename} className="input-sm form-control" onChange={this.setFormProp} name="middlename" />
                                    <HelpBlock>{this.getError('middlename')}</HelpBlock>
                                </FormGroup>
                            </div>

                            <div className="col-md-1" >
                                <FormGroup controlId="formExtName" validationState={this.getValidationState('extName')}>
                                    <ControlLabel > Ext : </ControlLabel>
                                    <input type="text" value={this.state.form.data.extName} className="input-sm form-control" onChange={this.setFormProp} name="extName" />
                                    <HelpBlock>{this.getError('extName')}</HelpBlock>
                                </FormGroup>
                            </div>
                        </div> */

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphoneNo')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphoneNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )

                            /* <div className="col-md-2">
                                <FormGroup controlId="formGender" validationState={this.getValidationState('gender')}>
                                    <ControlLabel > Kasarian : </ControlLabel>
                                    <select className="input-sm form-control" onChange={this.setFormProp} value={data.gender} name="gender">
                                        <option value="">- Select -</option>
                                        <option value="M">Male</option>
                                        <option value="F">Female</option>
                                    </select>
                                    <HelpBlock>{this.getError('gender')}</HelpBlock>
                                </FormGroup>
                            </div> */
                        ), 

                        /* <div className="row">
                            <div className="col-md-2">
                                <div className="form-group">
                                    <label className="control-label">Civil Status</label>
                                    <select id="civil_status_select2" className="form-control form-filter input-sm" name="civilStatus">
                                    </select>
                                </div>
                            </div>

                            <div className="col-md-2">
                                <div className="form-group">
                                    <label className="control-label">Blood Type</label>
                                    <select id="bloodtype_select2" className="form-control form-filter input-sm" name="bloodtype">
                                    </select>
                                </div>
                            </div>

                            <div className="col-md-2">
                                <div className="form-group">
                                    <label className="control-label">Occupation</label>
                                    <select id="occupation_select2" className="form-control form-filter input-sm" name="occupation">
                                    </select>
                                </div>
                            </div>

                            <div className="col-md-2">
                                <div className="form-group">
                                    <label className="control-label">Ip Group</label>
                                    <select id="ip_group_select2" className="form-control form-filter input-sm" name="ipGroup">
                                    </select>
                                </div>
                            </div>
                            <div className="col-md-2">
                                <div className="form-group">
                                    <label className="control-label">Position</label>
                                    <select id="voter_group_select2" className="form-control form-filter input-sm" name="voterGroup">
                                    </select>
                                </div>
                            </div>

                            <div className="col-md-2">
                                <div className="form-group">
                                    <label className="control-label">Barangay Position</label>
                                    <select id="other_position_select2" className="form-control form-filter input-sm" name="position">
                                    </select>
                                </div>
                            </div>

                        </div>

                        <div className="row">
                            <div className="col-md-2">
                                <label className="mt-checkbox">
                                    <input type="checkbox" name="isTagalog" checked={data.isTagalog == 1} onChange={this.setFormCheckProp} />
                                Is Tagalog
                                <span></span>
                                </label>
                                <br />
                                <label className="mt-checkbox">
                                    <input type="checkbox" name="isCuyonon" checked={data.isCuyonon == 1} onChange={this.setFormCheckProp} />
                                     Is Cuyonon
                                <span></span>
                                </label>
                            </div>

                            <div className="col-md-2">
                                <label className="mt-checkbox">
                                    <input type="checkbox" name="isIlonggo" checked={data.isIlonggo == 1} onChange={this.setFormCheckProp} />
                                    Is Ilonggo
                                <span></span>
                                </label>
                                <br />
                                <label className="mt-checkbox">
                                    <input type="checkbox" name="isBisaya" checked={data.isBisaya == 1} onChange={this.setFormCheckProp} />
                                    Is Bisaya
                                <span></span>
                                </label>
                            </div>

                            <div className="col-md-2">
                                <FormGroup controlId="formDialect" validationState={this.getValidationState('dialect')}>
                                    <ControlLabel > Other Dialect : </ControlLabel>
                                    <select id="dialect_select2" className="form-control form-filter input-sm" name="dialect">
                                    </select>
                                    <HelpBlock>{this.getError('dialect')}</HelpBlock>
                                </FormGroup>
                            </div>
                        </div>


                        <div className="row" style={{ marginTop: "15px" }}>
                            <div className="col-md-2">
                                <label className="mt-checkbox">
                                    <input type="checkbox" name="isCatholic" checked={data.isCatholic == 1} onChange={this.setFormCheckProp} />
                                Is Catholic
                                <span></span>
                                </label>
                                <br />
                                <label className="mt-checkbox">
                                    <input type="checkbox" name="isInc" checked={data.isInc == 1} onChange={this.setFormCheckProp} />
                                Is INC
                                <span></span>
                                </label>
                            </div>

                            <div className="col-md-2">
                                <label className="mt-checkbox">
                                    <input type="checkbox" name="isIslam" checked={data.isIslam == 1} onChange={this.setFormCheckProp} />
                                Is Islam
                                <span></span>
                                </label>
                            </div>

                            <div className="col-md-2">
                                <FormGroup controlId="formReligion" validationState={this.getValidationState('religion')}>
                                    <ControlLabel > Other Religion : </ControlLabel>
                                    <select id="religion_select2" className="form-control form-filter input-sm" name="religion">
                                    </select>
                                    <HelpBlock>{this.getError('religion')}</HelpBlock>
                                </FormGroup>
                            </div>
                        </div> */

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, disabled: this.isEmpty(this.state.form.data.proVoterId), type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )

                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadData(this.props.householdId);
    },

    initSelect2: function () {
        var self = this;

        $("#kfc-household-edit-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#kfc-household-edit-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: $("#kfc-household-edit-form #municipality_select2").val(),
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    var hasId = data.has_id == 1 ? "YES" : "NO";

                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - ID : ' + hasId;
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#kfc-household-edit-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#kfc-household-edit-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#kfc-household-edit-form #voter_group_select2").on("change", function () {
            self.setFormPropValue("voterGroup", $(this).val());
        });

        $("#kfc-household-edit-form #municipality_select2").on("change", function () {
            self.setFormPropValue('municipalityNo', $(this).val());
        });

        $("#kfc-household-edit-form #barangay_select2").on("change", function () {
            self.setFormPropValue('barangayNo', $(this).val());
        });

        $("#kfc-household-edit-form #voter-recruit-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            
            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.birthdate = !self.isEmpty(res.birthdate) ? moment(res.birthdate).format('YYYY-MM-DD') : '';
            form.data.gender = res.gender;
            form.data.voterName = res.voterName;
            form.data.voterGroup = res.voterGroup;

            $("#kfc-household-edit-form #voter_group_select2").empty()
                .append($("<option/>")
                    .val(res.voterGroup)
                    .text(res.voterGroup))
                .trigger("change");

            console.log('loading voter');

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';

        self.setState({ form: form })
    },

    loadData: function (householdId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_household_header_full", { id: householdId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.proVoterId = res.pro_voter_id;
            form.data.cellphoneNo = self.isEmpty(res.cellphone) ? '' : res.cellphone;
            form.data.birthdate = !self.isEmpty(res.birthdate) ? moment(res.birthdate).format('YYYY-MM-DD') : '';
            form.data.gender = res.gender;
         
            form.data.municipalityName = res.municipality_name;
            form.data.municipalityNo = res.municipality_no;
            form.data.barangayName = res.barangay_name;
            form.data.barangayNo = res.barangay_no;
            form.data.voterName = res.voter_name;
            form.data.voterGroup = res.voter_group;

            self.setState({ form: form }, self.reinitSelect2);
        });
    },

    reinitSelect2: function () {
        var data = this.state.form.data;

        $("#kfc-household-edit-form #voter-recruit-select2").empty()
            .append($("<option/>")
                .val(data.proVoterId)
                .text(data.voterName))
            .trigger("change");

        $("#kfc-household-edit-form #municipality_select2").empty()
            .append($("<option/>")
                .val(data.municipalityNo)
                .text(data.municipalityName))
            .trigger("change");

        $("#kfc-household-edit-form #barangay_select2").empty()
            .append($("<option/>")
                .val(data.barangayNo)
                .text(data.barangayName))
            .trigger("change");

        $("#kfc-household-edit-form #civil_status_select2").empty()
            .append($("<option/>")
                .val(data.civilStatus)
                .text(data.civilStatus))
            .trigger("change");


        $("#kfc-household-edit-form #bloodtype_select2").empty()
            .append($("<option/>")
                .val(data.bloodtype)
                .text(data.bloodtype))
            .trigger("change");


        $("#kfc-household-edit-form #occupation_select2").empty()
            .append($("<option/>")
                .val(data.occupation)
                .text(data.occupation))
            .trigger("change");

        $("#kfc-household-edit-form #religion_select2").empty()
            .append($("<option/>")
                .val(data.religion)
                .text(data.religion))
            .trigger("change");

        $("#kfc-household-edit-form #dialect_select2").empty()
            .append($("<option/>")
                .val(data.dialect)
                .text(data.dialect))
            .trigger("change");

        $("#kfc-household-edit-form #ip_group_select2").empty()
            .append($("<option/>")
                .val(data.ipGroup)
                .text(data.ipGroup))
            .trigger("change");

        $("#kfc-household-edit-form #voter_group_select2").empty()
            .append($("<option/>")
                .val(data.voterGroup)
                .text(data.voterGroup))
            .trigger("change");
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },
    
    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        console.log('opening modal');
        this.setState({ showNewVoterCreateModal: true })
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;
        data.electId = self.props.electId;
     

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_patch_household_header", { householdId: this.props.householdId }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.reset();
            self.props.reload();
            self.props.onHide();
            self.notify("Household has been updated.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Validation failed !", 'ruby');
        });
    }
});

window.HouseholdEditModal = HouseholdEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdCreateModal = React.createClass({displayName: "HouseholdCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    electId: 3,
                    proVoterId: null,
                    isTagalog: 0,
                    isBisaya: 0,
                    isCuyonon: 0,
                    isIlonggo: 0,
                    isCatholic: 0,
                    isInc: 0,
                    isIslam: 0
                },
                errors: []
            },
            provinceCode: 53,
            showNewVoterCreateModal: false
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "lg", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Household Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: this.props.proId, 
                            electId: this.props.electId, 
                            provinceCode: this.props.provinceCode, 
                            show: this.state.showNewVoterCreateModal, 
                            notify: this.props.notify, 
                            onHide: this.closeNewVoterCreateModal}
                        ), 
                    

                    React.createElement("form", {id: "household-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBarangay", validationState: this.getValidationState('barangayNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-8"}, 
                                React.createElement(FormGroup, {controlId: "formVoterName", validationState: this.getValidationState('voterName')}, 
                                    React.createElement(ControlLabel, null, " Household Leader : "), 
                                    React.createElement("select", {id: "voter-recruit-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterName'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("button", {style: { marginTop: "26px"}, onClick: this.openNewVoterCreateModal, className: "btn btn-primary btn-sm", type: "button"}, " New Voter ")
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )

                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#household-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#household-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: $("#household-create-form #municipality_select2").val(),
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var voterStatus = parseInt(item.is_non_voter) == 0 ? "V" :"NV";
                            var position = (item.position == null || item.position == '') ? "No Household" : item.position;
                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - ' + voterStatus + '|' + position;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#household-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#household-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#household-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#household-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#household-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#household-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").on("change", function () {
            self.loadVoter(self.props.proId, $(this).val());
        });

        $("#household-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#household-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#household-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#household-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#household-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#household-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#household-create-form #voter_group_select2").on("change", function () {
            self.setFormPropValue("voterGroup", $(this).val());
        });

        $("#household-create-form #other_position_select2").on("change", function () {
            self.setFormPropValue("position", $(this).val());
        });

        $("#household-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue('municipalityNo', $(this).val());
        });

        $("#household-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue('barangayNo', $(this).val());
        });

        $("#household-create-form #voter-recruit-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var chunks = res.voterName.split(",");
            var firstname = '';
            var middlename = '';
            var lastname = '';

            if (chunks.length > 1) {
                chunks = chunks[1].trim().split(" ");
                lastname = res.voterName.split(",")[0];
                middlename = chunks.length > 1 ? chunks[chunks.length - 1] : '';
                firstname = res.voterName.split(",")[1].replace(middlename, '');;
            } else {
                chunks = res.voterName.trim().split(" ");
                lastname = chunks[0];
                firstname = chunks[1];
                middlename = chunks.length > 2 ? chunks[2] : '';
            }

            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.birthdate = !self.isEmpty(res.birthdate) ? moment(res.birthdate).format('YYYY-MM-DD') : '';
            form.data.gender = res.gender;
            form.data.firstname = self.isEmpty(res.firstname) ? firstname.trim() : res.firstname;
            form.data.middlename = self.isEmpty(res.middlename) ? middlename.trim() : res.middlename;
            form.data.lastname = self.isEmpty(res.lastname) ? lastname.trim() : res.lastname;
            form.data.extName = res.extname;
            form.data.civilStatus = res.civilStatus;
            form.data.bloodtype = res.bloodtype;
            form.data.occupation = res.occupation;
            form.data.religion = res.religion;
            form.data.dialect = res.dialect;
            form.data.ipGroup = res.ipGroup;
            form.data.isTagalog = self.isEmpty(res.isTagalog) ? 0 : res.isTagalog;
            form.data.isCuyonon = self.isEmpty(res.isCuyonon) ? 0 : res.isCuyonon;
            form.data.isBisaya = self.isEmpty(res.isBisaya) ? 0 : res.isBisaya;
            form.data.isIlonggo = self.isEmpty(res.isIlonggo) ? 0 : res.isIlonggo;
            form.data.isCatholic = self.isEmpty(res.isCatholic) ? 0 : res.isCatholic;
            form.data.isInc = self.isEmpty(res.isInc) ? 0 : res.isInc;
            form.data.isIslam = self.isEmpty(res.isIslam) ? 0 : res.isIslam;
            form.data.position = res.position;

            $("#household-create-form #civil_status_select2").empty()
                .append($("<option/>")
                    .val(res.civilStatus)
                    .text(res.civilStatus))
                .trigger("change");


            $("#household-create-form #bloodtype_select2").empty()
                .append($("<option/>")
                    .val(res.bloodtype)
                    .text(res.bloodtype))
                .trigger("change");


            $("#household-create-form #occupation_select2").empty()
                .append($("<option/>")
                    .val(res.occupation)
                    .text(res.occupation))
                .trigger("change");

            $("#household-create-form #religion_select2").empty()
                .append($("<option/>")
                    .val(res.religion)
                    .text(res.religion))
                .trigger("change");

            $("#household-create-form #dialect_select2").empty()
                .append($("<option/>")
                    .val(res.dialect)
                    .text(res.dialect))
                .trigger("change");

            $("#household-create-form #ip_group_select2").empty()
                .append($("<option/>")
                    .val(res.ipGroup)
                    .text(res.ipGroup))
                .trigger("change");

            $("#household-create-form #voter_group_select2").empty()
                .append($("<option/>")
                    .val(res.voterGroup)
                    .text(res.voterGroup))
                .trigger("change");

            $("#household-create-form #other_position_select2").empty()
                .append($("<option/>")
                    .val(res.position)
                    .text(res.position))
                .trigger("change");


            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';

        self.setState({ form: form })
    },


    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        console.log('opening modal');
        this.setState({ showNewVoterCreateModal: true })
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;
        data.electId = self.props.electId;

        data.voterGroup = $("#household-create-form #voter_group_select2").val();
        data.position = $("#household-create-form #other_position_select2").val();

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_household_header"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.reset();
            self.props.reload();
            self.props.onHide();
            self.props.onSuccess(res.id);
            self.notify("New household has been created.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Validation failed !", 'ruby');
        });
    }
});


window.HouseholdCreateModal = HouseholdCreateModal;
var HouseholdDatatable = React.createClass({displayName: "HouseholdDatatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showRecruitsModal: false,
            showHouseholdSummary: false,
            target: null,
            typingTimer: null,
            municipalityNo: null,
            modalMunicipalityNo: null,
            doneTypingInterval: 1500,
            user: null,
            summary: null,
            filters: {
                electId: 3,
                provinceCode: 53,
                proId: 3
            }
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        this.initSelect2();
        this.loadSummary();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    loadSummary: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_m_get_household_voters_summary"),
            type: "GET"
        }).done(function (res) {
            console.log("summary has been received");
            self.setState({ summary: res });
        });
    },

    initSelect2: function () {
        var self = this;

        $("#handler_component #election_select2").select2({
            casesentitive: false,
            placeholder: "Select Election...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#handler_component #project_select2").select2({
            casesentitive: false,
            placeholder: "Select Project...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_projects'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.pro_id, text: item.pro_name };
                        })
                    };
                },
            }
        });

        $("#handler_component #province_select2").select2({
            casesentitive: false,
            placeholder: "Enter Province...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province_strict'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });


        $("#household_table #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#household_table #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Enter name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53,
                        municipalityNo: $("#household_table #municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#handler_component #election_select2").on("change", function () {
            var filters = self.state.filters;
            filters.electId = $(this).val();

            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #project_select2").on("change", function () {
            var filters = self.state.filters;
            filters.proId = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #province_select2").on("change", function () {
            var filters = self.state.filters;
            filters.provinceCode = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

        $("#household_table #municipality_select2").on("change", function () {
            self.handleFilterChange();
            self.setState({ municipalityNo: $(this).val() });
        });

        $("#household_table #barangay_select2").on("change", function () {
            self.handleFilterChange();
        });

    },

    reinitSelect2: function () {
        var self = this;

        if (!self.isEmpty(self.state.user.project)) {
            var provinceCode = self.state.user.project.provinceCode;

            self.requestProvince = $.ajax({
                url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
                type: "GET"
            }).done(function (res) {
                $("#handler_component #province_select2").empty()
                    .append($("<option/>")
                        .val(res.province_code)
                        .text(res.name))
                    .trigger("change");
            });

            self.requestProject = $.ajax({
                url: Routing.generate("ajax_get_project", { proId: self.state.user.project.proId }),
                type: "GET"
            }).done(function (res) {
                $("#handler_component #project_select2").empty()
                    .append($("<option/>")
                        .val(res.proId)
                        .text(res.proName))
                    .trigger("change");

                self.initDatatable();
            });
        }

        self.requestActiveElection = $.ajax({
            url: Routing.generate("ajax_get_active_election"),
            type: "GET"
        }).done(function (res) {
            $("#handler_component #election_select2").empty()
                .append($("<option/>")
                    .val(res.electId)
                    .text(res.electName))
                .trigger("change");
        });

        if (!self.state.user.isAdmin) {
            $("#handler_component #election_select2").attr('disabled', 'disabled');
            $("#handler_component #province_select2").attr('disabled', 'disabled');
            $("#handler_component #project_select2").attr('disabled', 'disabled');
        }
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var household_table = $("#household_table");
        var grid_project_recruitment = new Datatable();
        var url = Routing.generate("ajax_get_datatable_household_header", {}, true);

        grid_project_recruitment.init({
            src: household_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "pageLength": 100,
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.voterName = $('#household_table input[name="voter_name"]').val();
                        d.voterGroup = $('#household_table input[name="voter_group"]').val();
                        d.municipalityNo = $('#household_table #municipality_select2').val();
                        d.barangayNo = $('#household_table #barangay_select2').val();
                        d.householdCode = $('#household_table input[name="household_code"]').val();
                        d.electId = 423;
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 6, 7, 8, 9, 10, 11, 12]
                }, {
                    'className': 'align-center',
                    'targets': [2, 3]
                }],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "render": function (data, type, row) {
                            return row.is_non_voter == 1 ? '--- ' + data : data;
                        }
                    },
                    { "data": "voter_group", "className": "text-center", width: 40 },
                    { "data": "municipality_name", "className": "text-center", width: 150 },
                    { "data": "barangay_name", width: 120 },
                    { "data": "household_code", width: 80, className: "text-center" },
                    {
                        "data": "total_voters",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "total_non_voters",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "total_members",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "contact_no",
                        "className": "text-center",
                        "width": 100
                    },
                    {
                        "data": "updated_at",
                        "className": "text-center",
                        "width": 80,
                        "render": function (data, type, row) {
                            console.log('updated at');
                            console.log(data);

                            return (data == "" || data == null) ? "" : moment(data).format("MMM Do YY");
                        }
                    },
                    {
                        "data": "updated_by",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "width": 100,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var recruitBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green recruits-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-calendar'></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit'></i></a>";
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            return editBtn + recruitBtn + deleteBtn;
                        }
                    }
                ],
            }
        });

        household_table.on('click', '.edit-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        })

        household_table.on('click', '.recruits-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showRecruitsModal: true, target: data.id });
        });

        household_table.on('click', '.delete-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_recruitment;
    },


    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false, target: null });
    },

    openEditModal: function () {
        this.setState({ showEditModal: true });
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
    },

    closeRecruitsModal: function () {
        this.setState({ showRecruitsModal: false, target: null });
    },

    delete: function (householdId) {
        var self = this;

        if (confirm("Are you sure you want to delete this record ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_household_header", { householdId: householdId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    openHouseholdSummary: function (municipalityNo) {
        console.log("modal municipalityNo ", municipalityNo);

        this.setState({ showHouseholdSummary: true, modalMunicipalityNo: municipalityNo });
    },

    closeHouseholdSummary: function () {
        this.setState({ showHouseholdSummary: false });
    },

    onCreateSuccess: function (id) {
        var self = this;
        self.setState({ showRecruitsModal: true, target: id });
    },

    handleFilterChange: function () {
        var self = this;

        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        let summary = this.state.summary;
        let self = this;

        return (
            React.createElement("div", null, 
                
                    this.state.showCreateModal &&
                    React.createElement(HouseholdCreateModal, {
                        proId: this.state.filters.proId, 
                        electId: "423", 
                        provinceCode: this.state.filters.provinceCode, 
                        show: this.state.showCreateModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeCreateModal, 
                        onSuccess: this.onCreateSuccess}
                    ), 
                

                
                    this.state.showEditModal &&
                    React.createElement(HouseholdEditModal, {
                        proId: this.state.filters.proId, 
                        electId: "423", 
                        provinceCode: this.state.filters.provinceCode, 
                        show: this.state.showEditModal, 
                        notify: this.props.notify, 
                        reload: this.reload, 
                        onHide: this.closeEditModal, 
                        householdId: this.state.target}
                    ), 
                
                
                    this.state.showRecruitsModal &&
                    React.createElement(HouseholdMemberModal, {
                        id: this.state.target, 
                        show: this.state.showRecruitsModal, 
                        reload: this.reload, 
                        onHide: this.closeRecruitsModal, 
                        proId: this.state.filters.proId, 
                        electId: "423", 
                        notify: this.props.notify, 
                        onDataPatched: this.reload}
                    ), 
                

                
                    this.state.showHouseholdSummary &&
                    React.createElement(HouseholdSummaryModal, {
                        show: this.state.showHouseholdSummary, 
                        municipalityNo: this.state.modalMunicipalityNo, 
                        onHide: this.closeHouseholdSummary}
                    ), 
                

                React.createElement("div", {className: "row", id: "handler_component"}, 

                    React.createElement("div", {className: "col-md-10 col-md-offset-1"}, 
                        React.createElement("table", {className: "table table-condensed table-bordered"}, 
                            React.createElement("thead", {style: { backgroundColor: "#5ab866"}}, 
                                React.createElement("tr", {className: "text-center"}, 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Household Address"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Households"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Converted Votes"), 
                                    React.createElement("th", {colSpan: "2", className: "text-center"}, "Voting Address"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Outside"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Potential"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Total"), 
                                    React.createElement("th", {colSpan: "6", className: "text-center"}, "Hierarchy"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"})
                                ), 
                                React.createElement("tr", null, 
                                    React.createElement("th", {className: "text-center"}, "Puerto"), 
                                    React.createElement("th", {className: "text-center"}, "Aborlan"), 
                                    React.createElement("th", {className: "text-center"}, "TL"), 
                                    React.createElement("th", {className: "text-center"}, "K0"), 
                                    React.createElement("th", {className: "text-center"}, "K1"), 
                                    React.createElement("th", {className: "text-center"}, "K2"), 
                                    React.createElement("th", {className: "text-center"}, "No Position"), 
                                    React.createElement("th", {className: "text-center"}, "No Household")
                                )
                            ), 
                            React.createElement("tbody", null, 
                                (summary != null && (self.state.municipalityNo == null || self.state.municipalityNo == '01')) ? (
                                    React.createElement("tr", {className: "text-center"}, 
                                        React.createElement("td", null, "ABORLAN"), 
                                        React.createElement("td", null, summary.household[0].total_household), 
                                        React.createElement("td", null, summary.household[0].total_household * 4), 
                                        React.createElement("td", null, summary.voters[0].total_puerto), 
                                        React.createElement("td", null, summary.voters[0].total_aborlan), 
                                        React.createElement("td", null, summary.total_voter_outside[0].total_voter), 
                                        React.createElement("td", null, summary.total_voter_potential[0].total_voter_potential), 
                                        React.createElement("td", null, Number.parseInt(summary.voters[0].total_aborlan) + Number.parseInt(summary.voters[0].total_puerto) + Number.parseInt(summary.total_voter_potential[0].total_voter_potential)), 
                                        React.createElement("td", null, summary.hierarchy_summary[0].total_tl), 
                                        React.createElement("td", null, summary.hierarchy_summary[0].total_k0), 
                                        React.createElement("td", null, summary.hierarchy_summary[0].total_k1), 
                                        React.createElement("td", null, summary.hierarchy_summary[0].total_k2), 
                                        React.createElement("td", null, summary.hierarchy_summary[0].total_no_pos), 
                                        React.createElement("td", {rowSpan: 3}, summary.hierarchy_summary[1].total_no_profile), 

                                        React.createElement("td", null, 
                                            React.createElement("button", {onClick: this.openHouseholdSummary.bind(this, '01'), className: "btn btn-xs btn-primary btn-icon"}, React.createElement("i", {className: "fa fa-eye"}))
                                        )
                                    )
                                ) : null, 
                                (summary != null && (self.state.municipalityNo == null || self.state.municipalityNo == '16')) ? (
                                    React.createElement("tr", {className: "text-center"}, 
                                        React.createElement("td", null, "PUERTO PRINCESA CITY"), 
                                        React.createElement("td", null, summary.household[1].total_household), 
                                        React.createElement("td", null, summary.household[1].total_household * 4), 
                                        React.createElement("td", null, summary.voters[1].total_puerto), 
                                        React.createElement("td", null, summary.voters[1].total_aborlan), 
                                        React.createElement("td", null, summary.total_voter_outside[1].total_voter), 
                                        React.createElement("td", null, summary.total_voter_potential[1].total_voter_potential), 
                                        React.createElement("td", null, Number.parseInt(summary.voters[1].total_aborlan) + Number.parseInt(summary.voters[1].total_puerto) + Number.parseInt(summary.total_voter_potential[1].total_voter_potential)), 
                                        React.createElement("td", null, summary.hierarchy_summary[1].total_tl), 
                                        React.createElement("td", null, summary.hierarchy_summary[1].total_k0), 
                                        React.createElement("td", null, summary.hierarchy_summary[1].total_k1), 
                                        React.createElement("td", null, summary.hierarchy_summary[1].total_k2), 
                                        React.createElement("td", null, summary.hierarchy_summary[1].total_no_pos), 
                                        React.createElement("td", null, 
                                            React.createElement("button", {onClick: this.openHouseholdSummary.bind(this, '16'), className: "btn btn-xs btn-primary btn-icon"}, React.createElement("i", {className: "fa fa-eye"}))
                                        )
                                    )
                                ) : null, 
                                (summary != null && (self.state.municipalityNo == null)) ? (
                                    React.createElement("tr", {className: "text-center"}, 
                                        React.createElement("td", null, React.createElement("strong", null, "Total")), 
                                        React.createElement("td", null, Number.parseInt(summary.household[0].total_household) + Number.parseInt(summary.household[1].total_household)), 
                                        React.createElement("td", null, (Number.parseInt(summary.household[0].total_household) + Number.parseInt(summary.household[1].total_household)) * 4), 
                                        React.createElement("td", null, Number.parseInt(summary.voters[0].total_puerto) + Number.parseInt(summary.voters[1].total_puerto)), 
                                        React.createElement("td", null, Number.parseInt(summary.voters[0].total_aborlan) + Number.parseInt(summary.voters[1].total_aborlan)), 
                                        React.createElement("td", null, Number.parseInt(summary.total_voter_outside[0].total_voter) + Number.parseInt(summary.total_voter_outside[1].total_voter)), 
                                        React.createElement("td", null, Number.parseInt(summary.total_voter_potential[0].total_voter_potential) + Number.parseInt(summary.total_voter_potential[1].total_voter_potential)), 
                                        React.createElement("td", null, (Number.parseInt(summary.voters[0].total_aborlan) + Number.parseInt(summary.voters[0].total_puerto) + Number.parseInt(summary.total_voter_potential[0].total_voter_potential))
                                            + Number.parseInt(summary.voters[1].total_aborlan) + Number.parseInt(summary.voters[1].total_puerto) + Number.parseInt(summary.total_voter_potential[1].total_voter_potential)), 

                                        React.createElement("td", null, 
                                            Number.parseInt(summary.hierarchy_summary[0].total_tl) + Number.parseInt(summary.hierarchy_summary[1].total_tl)
                                        ), 
                                        React.createElement("td", null, 
                                            Number.parseInt(summary.hierarchy_summary[0].total_k0) + Number.parseInt(summary.hierarchy_summary[1].total_k0)
                                        ), 
                                        React.createElement("td", null, 
                                            Number.parseInt(summary.hierarchy_summary[0].total_k1) + Number.parseInt(summary.hierarchy_summary[1].total_k1)
                                        ), 
                                        React.createElement("td", null, 
                                            Number.parseInt(summary.hierarchy_summary[0].total_k2) + Number.parseInt(summary.hierarchy_summary[1].total_k2)
                                        ), 
                                        React.createElement("td", null, 
                                            Number.parseInt(summary.hierarchy_summary[0].total_no_pos) + Number.parseInt(summary.hierarchy_summary[1].total_no_pos)
                                        ), 
                                        React.createElement("td", null)
                                    )
                                ) : null
                            )
                        )
                    )
                ), 
                React.createElement("div", {className: "col-md-6"}, 
                    React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openCreateModal}, "New Household"), 
                    React.createElement("br", null), 
                    React.createElement("br", null)
                ), 
                React.createElement("div", {className: "col-md-12"}, 
                    React.createElement("div", {className: "table-container"}, 
                        React.createElement("table", {id: "household_table", className: "table table-striped table-bordered", width: "100%"}, 
                            React.createElement("thead", null, 
                                React.createElement("tr", null, 
                                    React.createElement("th", {rowSpan: "2"}, "No"), 
                                    React.createElement("th", {rowSpan: "2"}, "Name"), 
                                    React.createElement("th", {rowSpan: "2"}, "Position"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Municipality"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Barangay"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "House No."), 
                                    React.createElement("th", {className: "text-center", colSpan: "3"}, "Household"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Contact #"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "Last Update"), 
                                    React.createElement("th", {rowSpan: "2", className: "text-center"}, "User"), 
                                    React.createElement("th", {rowSpan: "2", width: "60px", className: "text-center"})
                                ), 
                                React.createElement("tr", null, 
                                    React.createElement("th", {className: "text-center"}, "Voter"), 
                                    React.createElement("th", {className: "text-center"}, "Non-Voter"), 
                                    React.createElement("th", {className: "text-center"}, "Total")
                                ), 
                                React.createElement("tr", null, 
                                    React.createElement("td", null), 
                                    React.createElement("td", {style: { padding: "10px 5px"}}, 
                                        React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilterChange})
                                    ), 
                                    React.createElement("td", null, 
                                        React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_group", onChange: this.handleFilterChange})
                                    ), 
                                    React.createElement("td", {style: { padding: "10px 5px"}}, 
                                        React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm"}
                                        )
                                    ), 
                                    React.createElement("td", {style: { padding: "10px 5px"}}, 
                                        React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm"}
                                        )
                                    ), 
                                    React.createElement("td", null, 
                                        React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "household_code", onChange: this.handleFilterChange})
                                    ), 
                                    React.createElement("td", null), 
                                    React.createElement("td", null), 
                                    React.createElement("td", null), 
                                    React.createElement("td", null), 
                                    React.createElement("td", null), 
                                    React.createElement("td", null), 
                                    React.createElement("td", null)
                                )
                            ), 
                            React.createElement("tbody", null
                            )
                        )
                    )
                )
            )
        )
    }
});

window.HouseholdDatatable = HouseholdDatatable;
var HouseholdComponent = React.createClass({displayName: "HouseholdComponent",

    notify : function(message,color){
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    render : function(){
        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body"}, 
                    React.createElement(HouseholdDatatable, {notify: this.notify})
                )
            )
        )
    }
});

setTimeout(function(){
    ReactDOM.render(
    React.createElement(HouseholdComponent, null),
        document.getElementById('page-container')
    );
},500);
