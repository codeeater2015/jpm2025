var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var RenewalCreateModal = React.createClass({displayName: "RenewalCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterId: null,
                    cellphone: "",
                    voterGroup: "",
                    assignedPrecinct: "",
                    precinctNo: "",
                    remarks: ""
                },
                errors: []
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 3000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters_unrenewed'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: self.props.proId,
                        electId : self.props.electId,
                        provinceCode : self.props.provinceCode,
                        municipalityNo : $("#municipality_select2").val(),
                        brgyNo : $("#barangay_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )' + " | New Photo : " +  (Number.parseInt(item.has_new_photo) == 1 ? "YES" : "NO");
                            var disabled = false;
                            
                            if(Number.parseInt(item.has_new_photo)){
                                disabled = true;
                            }
                            return { id: item.pro_voter_id, text: text, disabled : disabled };
                        })
                    };
                },
            }
        });

        $("#voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });

        $("#voter-group-select2").on("change", function () {
            self.setFieldValue("voterGroup", $(this).val());
        });

        $("#municipality_select2").empty()
            .append($("<option/>")
                .val(this.props.municipalityNo)
                .text(this.props.municipalityName))
            .trigger("change");
        
        $("#barangay_select2").empty()
            .append($("<option/>")
                .val(this.props.brgyNo)
                .text(this.props.barangayName))
            .trigger("change");
    },

    loadVoter: function (proId, voterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.proVoterId = res.proVoterId;
            form.data.voterId = res.voterId;
            form.data.cellphone = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.voterGroup = "KCL2";
            form.data.assignedPrecinct = self.isEmpty(res.assignedPrecinct) ? '' : res.assignedPrecinct;
            form.data.precinctNo = self.isEmpty(res.precinctNo) ? '' : res.precinctNo;

            form.data.remarks = res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.voterGroup = '';
        form.data.remarks = '';

        self.setState({ form: form })
    },

    reset: function () {
        var form = this.state.form;
        form.data.proVoterId = "";
        form.data.cellphone = "";
        form.data.remarks = "";

        form.errors = [];

        $("#form-voter-select2").empty().trigger("change");

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        
        self.requestAddAttendee = $.ajax({
            url: Routing.generate("ajax_post_renew_id"),
            type: "POST",
            data: data
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
            self.props.notify("Member has been added.", "teal");
        }).fail(function (err) {
            if (err.status == '401') {
                self.props.notify("You dont have the permission to update this record.", "ruby");
            } else {
                self.props.notify("Form Validation Failed.", "ruby");
            }
            self.setErrors(err.responseJSON);
        });
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-custom-40", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Member Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-node-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement("div", {className: "col-md-6", style: { paddingLeft: "0"}}, 
                                    React.createElement(FormGroup, {controlId: "formMunicipalityNo"}, 
                                        React.createElement(ControlLabel, null, " Municipality : "), 
                                        React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "col-md-6", style: { paddingRight: "0"}}, 
                                    React.createElement(FormGroup, {controlId: "formBrgyNo"}, 
                                        React.createElement(ControlLabel, null, " Barangay : "), 
                                        React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                        )
                                    )
                                ), 

                                React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('proVoterId')}, 
                                    React.createElement(ControlLabel, null, " Voter Name : "), 
                                    React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                )
                                
                            )
                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", disabled: this.isEmpty(this.state.form.data.proVoterId), type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.RenewalCreateModal = RenewalCreateModal;
var RenewalDatatable = React.createClass({displayName: "RenewalDatatable",

    getInitialState: function () {
        return {
            showPhotoModal: false,
            showItemsModal : false,
            targetId: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            gPhotos : 0,
            gLinked : 0,
            gId : 0,
            gUploads : 0,
            gTarget : 0,
            gUnlinked : 0
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.initDatatable);
        });
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();
        var field_photo_table = $("#field_photo_table");

        grid.init({
            src: field_photo_table,
            dataTable: {
                "bState": true,
                "autoWidth": true,
                "serverSide": true,
                "processing": true,
                "deferLoading" : true,
                "ajax": {
                    "url": Routing.generate('ajax_datatable_renewed_id'),
                    "type": "GET",
                    "data": function (d) {
                        d.barangayName = $('#field_photo_table input[name="barangay_name"]').val();
                        d.voterGroup = self.props.voterGroup;
                        d.uploadDate = $('#field_photo_table input[name="upload_date"]').val();
                        d.municipalityName = self.props.municipalityName;

                        self.setState({
                            gPhotos : 0,
                            gLinked : 0,
                            gUnlinked : 0,
                            gId : 0,
                            gUploads : 0,
                            gTarget : 0
                        }); 
                    }
                },
                pageLength: 100,
                columnDefs: [
                    {
                        'className': 'text-center valign-middle',
                        'orderable': false,
                        'targets': [0, 2, 3, 4, 5, 6, 7]
                    }
                ],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "className" : "text-left"
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "width": 120
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 120
                    },
                    {
                        "data": "created_at",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "has_new_photo",
                        "className": "text-center",
                        "width": 40
                    },
                    {
                        "data": "has_new_id",
                        "className": "text-center",
                        "width": 40
                    },
                    {
                        "width": 120,
                        "render": function (data, type, row) {
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';
                            var itemsBtn = '<button class="btn btn-xs blue items-btn"><i class="fa fa-file"></i></button>';
                            var downloadBtn = '<button class="btn btn-xs green download-btn"><i class="fa fa-download"></i></button>';

                            var btnGroup = '';
                            btnGroup += itemsBtn;
                           
                                //btnGroup += downloadBtn;
                                btnGroup += deleteBtn;

                            return "";
                        },
                        "className": "text-center"
                    }
                ]
            }

        });


        field_photo_table.on('click', '.edit-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showPhotoModal: true, targetId: data.id });
        });

        
        field_photo_table.on('click', '.items-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showItemsModal: true, targetId: data.id });
        });

        field_photo_table.on('click', '.delete-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        field_photo_table.on('click', '.download-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            var url = Routing.generate("ajax_get_download_photo_album", { id: data.id });

            window.location.assign(url);
        });

        self.grid = grid;
    },

    delete: function (id) {
        var self = this;

        if (confirm("continue delete?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_field_upload", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },
    
    closeItemsModal:function(){
        this.setState({ showItemsModal : false, targetId : null});
    },

    reload: function () {
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    closePhotoModal: function () {
        this.setState({ showPhotoModal: false, targetId: null })
    },

    render: function () {
        return (
            React.createElement("div", null, 
                React.createElement("div", {className: "table-container"}, 
                    React.createElement("div", {className: "table-actions-wrapper"}
                    ), 
                    React.createElement("table", {id: "field_photo_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", {className: "text-center"}, "No"), 
                                React.createElement("th", {className: "text-center"}, "Name"), 
                                React.createElement("th", {className: "text-center"}, "Municipality"), 
                                React.createElement("th", {className: "text-center"}, "Barangay"), 
                                React.createElement("th", {className: "text-center"}, "Renew Date"), 
                                React.createElement("th", {className: "text-center"}, "New Photo"), 
                                React.createElement("th", {className: "text-center"}, "New ID"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangay_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", {className: "text-center"}, 
                                    React.createElement("button", {style: { marginTop: "5px", marginBottom: "5px"}, className: "btn btn-xs green btn-outline filter-submit"}, 
                                        React.createElement("i", {className: "fa fa-search"}), "Search"
                                    )
                                )
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.RenewalDatatable = RenewalDatatable;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var RenewId = React.createClass({displayName: "RenewId",

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
    },

    getInitialState: function () {
        return {
            municipalityName: null,
            brgyNo: null,
            showCreateModal: false
        };
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.initSelect2);
        });
    },
    
    openCreateModal : function(){
        this.setState({ showCreateModal : true})
    },

    closeCreateModal : function(){
        this.setState({ showCreateModal : false})
    },

    onSuccess : function(){
        this.reloadDatatable();
    },
    
    reloadDatatable: function () {
        console.log("reloading datatable");
            this.refs.renewedDatatable.reload();
    },

    render: function () {
        return (
            React.createElement("div", null, 
                React.createElement("div", {className: "row"}, 
                    React.createElement("div", {className: "col-md-12"}, 
                        React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                            React.createElement("div", {className: "portlet-body"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("h4", null, React.createElement("strong", null, "ID Renewal")), 

                                        
                                            this.state.showCreateModal &&
                                            React.createElement(RenewalCreateModal, {
                                                show: this.state.showCreateModal, 
                                                notify: this.notify, 
                                                reload: this.reload, 
                                                onHide: this.closeCreateModal, 
                                                onSuccess: this.onSuccess}
                                            ), 
                                        
                                            React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.openCreateModal}, "Renew Member"), 
                                            React.createElement(RenewalDatatable, {ref: "renewedDatatable"})
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(RenewId, null),
        document.getElementById('page-container')
    );
}, 500);
