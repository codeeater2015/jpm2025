var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SmsTemplateModal = React.createClass({displayName: "SmsTemplateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    templateName : ""
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white bold", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Template Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "sms-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement(FormGroup, {controlId: "formTemplateName", validationState: this.getValidationState('templateName')}, 
                                React.createElement(ControlLabel, null, "Template Name : "), 
                                React.createElement(FormControl, {name: "templateName", className: "form-control input-sm", value: data.templateName, onChange: this.setFormProp}), 
                                React.createElement(HelpBlock, null, this.getError('templateName'))
                            )
                        ), 

                        React.createElement("div", {className: "text-right col-md-12"}, 
                            React.createElement("button", {type: "submit", style: { marginRight: "5px"}, className: "btn blue-madison btn-sm"}, "Submit"), 
                            React.createElement("button", {type: "button", className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close")
                        )
                    )
                )
            )
        );
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;

        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.templateContent = this.props.templateContent;

        self.requestTemplate = $.ajax({
            url : Routing.generate("ajax_post_sms_template"),
            type : "POST",
            data : data
        }).done(function(res){
            
            //self.props.notify("Template has been saved...", "teal");
            self.props.onSuccess();
            self.props.onHide();

        }).fail(function(err){
            self.setErrors(err.responseJSON);
            //self.props.notify("Form validation failed...", "ruby");
        });
    },


    isEmpty: function (value) {
        return value == null || value == '';
    }
});


window.SmsTemplateModal = SmsTemplateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var BcbpEditModal = React.createClass({displayName: "BcbpEditModal",

    getInitialState: function () {
        return {
            showNewProfileModal: false,
            form: {
                data: {
                    municipalityNo: "",
                    barangayNo: "",
                    cellphoneNo: ""
                },
                errors: []
            }
        };
    },

    loadProfile: function (id) {

        console.log("loading profile");
        console.log(id);

        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_bcbp_profile", { id: id }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.contactNumber = res.contactNumber;
            form.data.firstname = res.firstname;
            form.data.lastname = res.lastname;
            form.data.birthdate = res.birthdate;
            form.data.chapterName = res.chapterName;
            form.data.batchName = res.batchName;
            form.data.nickname = res.nickname;
            form.data.unitName = res.unitName;
            form.data.groupName = res.groupName;
            form.data.position = res.position;
            
            $("#chapter_select2").empty()
            .append($("<option />")
                .val(res.chapterName)
                .text(res.chapterName))
            .trigger("change");

            $("#batch_select2").empty()
            .append($("<option />")
                .val(res.batchName)
                .text(res.batchName))
            .trigger("change");
            
            $("#gender_select2").empty()
            .append($("<option />")
                .val(res.gender)
                .text(res.gender))
            .trigger("change");

            $("#position_select2").empty()
            .append($("<option />")
                .val(res.position)
                .text(res.positionr))
            .trigger("change");

            $("#group_select2").empty()
            .append($("<option />")
                .val(res.groupName)
                .text(res.groupName))
            .trigger("change");
            
            $("#unit_select2").empty()
            .append($("<option />")
                .val(res.unitName)
                .text(res.unitName))
            .trigger("change");

            self.setState({ form: form });
        });
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, bsSize: "lg", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Edit BCBP Profile")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewProfileModal &&
                        React.createElement(TupadCreateNewProfileModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            show: this.state.showNewProfileModal, 
                            onHide: this.closeNewProfileModal, 
                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "fa-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formChapterName", validationState: this.getValidationState('chapterName')}, 
                                            React.createElement(ControlLabel, null, " Chapter : "), 
                                            React.createElement("select", {id: "chapter_select2", className: "form-control form-filter input-md", name: "chapterName"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('chapterName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formBatchName", validationState: this.getValidationState('batchName')}, 
                                            React.createElement(ControlLabel, null, " Batch : "), 
                                            React.createElement("select", {id: "batch_select2", className: "form-control form-filter input-md", name: "batchName"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('batchName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formPosition", validationState: this.getValidationState('position')}, 
                                            React.createElement(ControlLabel, null, " Position : "), 
                                            React.createElement("select", {id: "position_select2", className: "form-control form-filter input-md", name: "position"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('position'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formUnitName", validationState: this.getValidationState('unitName')}, 
                                            React.createElement(ControlLabel, null, " Unit : "), 
                                            React.createElement("select", {id: "unit_select2", className: "form-control form-filter input-md", name: "unitName"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('unitName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formGroupName", validationState: this.getValidationState('groupName')}, 
                                            React.createElement(ControlLabel, null, " Action Group : "), 
                                            React.createElement("select", {id: "group_select2", className: "form-control form-filter input-md", name: "groupName"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('groupName'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                            React.createElement(ControlLabel, null, " Firstname : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.firstname, name: "firstname", className: "input-md form-control", onChange: this.setFormProp})
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                            React.createElement(ControlLabel, null, " Lastname : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.lastname, name: "lastname", className: "input-md form-control", onChange: this.setFormProp})
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                            React.createElement(ControlLabel, null, " Birthday : "), 
                                            React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-md form-control", name: "birthdate", onChange: this.setFormProp})
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formNickname", validationState: this.getValidationState('nickname')}, 
                                            React.createElement(ControlLabel, null, " Nickname : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.nickname, name: "nickname", className: "input-md form-control", onChange: this.setFormProp})
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                            React.createElement(ControlLabel, null, " Gender : "), 
                                            React.createElement("select", {id: "gender_select2", className: "form-control form-filter input-md", name: "gender"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('gender'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formContactNo", validationState: this.getValidationState('contactNumber')}, 
                                            React.createElement(ControlLabel, null, " Cellphone No: "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.contactNumber, name: "contactNumber", className: "input-md form-control", onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('contactNumber'))
                                        )
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right", style: { marginTop: "30px"}}, 
                            React.createElement("button", {type: "button", className: "btn-lg btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                            React.createElement("button", {type: "button", className: "btn-lg btn-primary", onClick: this.submit}, "Submit")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadProfile(this.props.id);
    },


    initSelect2: function () {
        var self = this;

        $("#fa-form #chapter_select2").select2({
            casesentitive: false,
            placeholder: "Select Chapter",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_chapter'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.chapter_name, text: item.chapter_name };
                        })
                    };
                },
            }
        });

        $("#fa-form #batch_select2").select2({
            casesentitive: false,
            placeholder: "Select batch",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_batch'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.batch_name, text: item.batch_name };
                        })
                    };
                },
            }
        });

        
        $("#fa-form #unit_select2").select2({
            casesentitive: false,
            placeholder: "Select unit",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_unit'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.unit_name, text: item.unit_name };
                        })
                    };
                },
            }
        });

        $("#fa-form #group_select2").select2({
            casesentitive: false,
            placeholder: "Select action group",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.group_name, text: item.group_name };
                        })
                    };
                },
            }
        });

        $("#fa-form #position_select2").select2({
            casesentitive: false,
            placeholder: "Select position",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#fa-form #gender_select2").select2({
            casesentitive: false,
            placeholder: "Select gender",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_gender'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.gender, text: item.gender };
                        })
                    };
                },
            }
        });


        $("#fa-form #chapter_select2").on("change", function () {
            self.setFormPropValue('chapterName', $(this).val());
        });

        $("#fa-form #batch_select2").on("change", function () {
            self.setFormPropValue('batchName', $(this).val());
        });

        $("#fa-form #gender_select2").on("change", function () {
            self.setFormPropValue('gender', $(this).val());
        });

        $("#fa-form #position_select2").on("change", function () {
            self.setFormPropValue('position', $(this).val());
        });

        $("#fa-form #group_select2").on("change", function () {
            self.setFormPropValue('groupName', $(this).val());
        });

        $("#fa-form #unit_select2").on("change", function () {
            self.setFormPropValue('unitName', $(this).val());
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    openNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: true });
    },

    closeNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: false });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        console.log("form data");
        console.log(self.state.form.data);

        data.id = this.props.id;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_bcbp_patch_profile"),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.reset();
            self.props.onHide();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.BcbpEditModal = BcbpEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var BcbpCreateModal = React.createClass({displayName: "BcbpCreateModal",

    getInitialState: function () {
        return {
            showNewProfileModal: false,
            form: {
                data: {
                    municipalityNo: "",
                    barangayNo: "",
                    cellphoneNo: "",
                    nickname : ""
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, bsSize: "lg", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New BCBP Profile")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewProfileModal &&
                        React.createElement(TupadCreateNewProfileModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            show: this.state.showNewProfileModal, 
                            onHide: this.closeNewProfileModal, 
                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "fa-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formChapterName", validationState: this.getValidationState('chapterName')}, 
                                            React.createElement(ControlLabel, null, " Chapter : "), 
                                            React.createElement("select", {id: "chapter_select2", className: "form-control form-filter input-md", name: "chapterName"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('chapterName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formBatchName", validationState: this.getValidationState('batchName')}, 
                                            React.createElement(ControlLabel, null, " Batch : "), 
                                            React.createElement("select", {id: "batch_select2", className: "form-control form-filter input-md", name: "batchName"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('batchName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formPosition", validationState: this.getValidationState('position')}, 
                                            React.createElement(ControlLabel, null, " Position : "), 
                                            React.createElement("select", {id: "position_select2", className: "form-control form-filter input-md", name: "position"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('position'))
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formUnitName", validationState: this.getValidationState('unitName')}, 
                                            React.createElement(ControlLabel, null, " Unit : "), 
                                            React.createElement("select", {id: "unit_select2", className: "form-control form-filter input-md", name: "unitName"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('unitName'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formGroupName", validationState: this.getValidationState('groupName')}, 
                                            React.createElement(ControlLabel, null, " Action Group : "), 
                                            React.createElement("select", {id: "group_select2", className: "form-control form-filter input-md", name: "groupName"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('groupName'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                            React.createElement(ControlLabel, null, " Firstname : "), 
                                            React.createElement("input", {type: "text", name: "firstname", value:  this.state.form.data.firstname, className: "input-md form-control", onChange: this.setFormProp})
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                            React.createElement(ControlLabel, null, " Lastname : "), 
                                            React.createElement("input", {type: "text", name: "lastname", value:  this.state.form.data.lastname, className: "input-md form-control", onChange: this.setFormProp})
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                            React.createElement(ControlLabel, null, " Birthday : "), 
                                            React.createElement("input", {type: "date", className: "input-md form-control", value:  this.state.form.data.birthdate, name: "birthdate", onChange: this.setFormProp})
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formNickname", validationState: this.getValidationState('nickname')}, 
                                            React.createElement(ControlLabel, null, " Nickname : "), 
                                            React.createElement("input", {type: "text", name: "nickname", value:  this.state.form.data.nickname, className: "input-md form-control", onChange: this.setFormProp})
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                            React.createElement(ControlLabel, null, " Gender : "), 
                                            React.createElement("select", {id: "gender_select2", className: "form-control form-filter input-md", name: "gender"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('gender'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formContactNo", validationState: this.getValidationState('contactNumber')}, 
                                            React.createElement(ControlLabel, null, " Cellphone No: "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.contactNumber, name: "contactNumber", className: "input-md form-control", onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('contactNumber'))
                                        )
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right", style: { marginTop: "30px"}}, 
                            React.createElement("button", {type: "button", className: "btn-lg btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                            React.createElement("button", {type: "button", className: "btn-lg btn-primary", onClick: this.submit}, "Submit")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },


    initSelect2: function () {
        var self = this;

        $("#fa-form #chapter_select2").select2({
            casesentitive: false,
            placeholder: "Select Chapter",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_chapter'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.chapter_name, text: item.chapter_name };
                        })
                    };
                },
            }
        });

        $("#fa-form #batch_select2").select2({
            casesentitive: false,
            placeholder: "Select batch",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_batch'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.batch_name, text: item.batch_name };
                        })
                    };
                },
            }
        });

        $("#fa-form #unit_select2").select2({
            casesentitive: false,
            placeholder: "Select unit",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_unit'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.unit_name, text: item.unit_name };
                        })
                    };
                },
            }
        });

        $("#fa-form #group_select2").select2({
            casesentitive: false,
            placeholder: "Select action group",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.group_name, text: item.group_name };
                        })
                    };
                },
            }
        });

        $("#fa-form #position_select2").select2({
            casesentitive: false,
            placeholder: "Select position",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#fa-form #gender_select2").select2({
            casesentitive: false,
            placeholder: "Select gender",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_gender'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.gender, text: item.gender };
                        })
                    };
                },
            }
        });


        $("#fa-form #chapter_select2").on("change", function () {
            self.setFormPropValue('chapterName', $(this).val());
        });

        $("#fa-form #batch_select2").on("change", function () {
            self.setFormPropValue('batchName', $(this).val());
        });

        $("#fa-form #gender_select2").on("change", function () {
            self.setFormPropValue('gender', $(this).val());
        });

        $("#fa-form #position_select2").on("change", function () {
            self.setFormPropValue('position', $(this).val());
        });

        $("#fa-form #group_select2").on("change", function () {
            self.setFormPropValue('groupName', $(this).val());
        });

        $("#fa-form #unit_select2").on("change", function () {
            self.setFormPropValue('unitName', $(this).val());
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        form.data.firstname  = "";
        form.data.lastname = "";
        form.data.nickname = "";
        form.data.birthdate = "";
        form.data.contactNumber = "";

        this.setState({ form: form });
    },

    openNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: true });
    },

    closeNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: false });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        console.log("form data");
        console.log(self.state.form.data);

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_bcbp_post_profile"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.BcbpCreateModal = BcbpCreateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var BcbpSmsModal = React.createClass({displayName: "BcbpSmsModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    address: "",
                    sex: "",
                    gender: "",
                    remarks: "",
                    messageBody: "",
                    voters: []
                },
                errors: []
            },
            categories: [],
            votersList: [],
            unselected: [],
            maxChars: 160,
            messageSent: 0,
            messageTotal: 0,
            messageQueue: 0,
            sending: false,
            uploadedRecord: 0,
            totalRows: 0,
            percentage: 0,
            showTemplateModal: false,
            templates: []
        };
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-custom-70", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white bold", closeButton: true}, 
                    React.createElement(Modal.Title, null, "BCBP SMS Modal")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    this.state.showTemplateModal &&
                        React.createElement(SmsTemplateModal, {
                            show: this.state.showTemplateModal, 
                            onHide: this.closeTemplateModal, 
                            templateContent: this.state.form.data.messageBody, 
                            notify: this.props.notify, 
                            onSuccess: this.loadTemplates}
                        ), 
                    

                    React.createElement("div", {className: "text-right"}, 
                        React.createElement("span", {className: "font-bold "}, " Total Messages : ", this.state.totalRows, " "), 
                        React.createElement("span", {className: "font-bold font-green-seagreen", style: { margin: "0 10px"}}, "Messages Sent : ", this.state.uploadedRecord), 
                        React.createElement("span", {className: "font-bold font-red-sunglo", style: { margin: "0 10px"}}, "On-Queue : ", this.state.totalRows - this.state.uploadedRecord)
                    ), 
                    React.createElement("form", {id: "sms-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "col-md-3"}, 
                            React.createElement(FormGroup, {controlId: "formChapter", validationState: this.getValidationState('chapter')}, 
                                React.createElement(ControlLabel, null, " Chapter : "), 
                                React.createElement("select", {id: "form-chapter-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('chapter'))
                            ), 
                            React.createElement(FormGroup, {controlId: "formBatch", validationState: this.getValidationState('batch')}, 
                                React.createElement(ControlLabel, null, " Batch : "), 
                                React.createElement("select", {id: "form-batch-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('batch'))
                            ), 

                            React.createElement(FormGroup, {controlId: "formGroup", validationState: this.getValidationState('group')}, 
                                React.createElement(ControlLabel, null, " Action Group : "), 
                                React.createElement("select", {id: "form-group-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('group'))
                            ), 

                            React.createElement(FormGroup, {controlId: "formUnit", validationState: this.getValidationState('unit')}, 
                                React.createElement(ControlLabel, null, " Unit : "), 
                                React.createElement("select", {id: "form-unit-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('unit'))
                            ), 

                            React.createElement(FormGroup, {controlId: "formPosition", validationState: this.getValidationState('position')}, 
                                React.createElement(ControlLabel, null, " Position : "), 
                                React.createElement("select", {id: "form-position-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('position'))
                            ), 

                            React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                React.createElement(ControlLabel, null, " Gender : "), 
                                React.createElement("select", {id: "form-gender-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('gender'))
                            ), 

                           
                            React.createElement("div", {className: "mt-checkbox-list"}, 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "withBirthdate", onChange: this.setFormCheckProp}), 
                                    "Today's BDay", 
                                React.createElement("span", null)
                                )
                            ), 

                            React.createElement("button", {type: "button", className: "btn btn-sm btn-primary", style: { width: "100%"}, onClick: this.loadVoters}, "Apply")
                        ), 
                        React.createElement("div", {className: "col-md-9"}, 
                            React.createElement("div", {style: { margin: "5px 0 20px 0 "}}, 
                                React.createElement("span", {style: { marginRight: "10px"}}, " Voters : "), 
                                React.createElement("div", {className: "btn-group", style: { marginTop: "-6px"}}, 
                                    React.createElement("button", {type: "button", onClick: this.deselectAll, className: "btn btn-xs grey-steel"}, "Deselect All"), 
                                    React.createElement("button", {type: "button", onClick: this.selectAll, className: "btn btn-xs green-turquoise"}, "Select All")
                                )
                            ), 

                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-6 remove-padding"}, 
                                React.createElement("div", null, " Available : ", this.state.unselected.length)
                            ), 
                            React.createElement("div", {className: "col-md-6 "}, 
                                React.createElement("div", {style: { marginLeft: '18px'}}, " Selected :  ", data.voters.length)
                            ), 
                            React.createElement(FormGroup, {controlId: "formProfiles", validationState: this.getValidationState('students')}, 
                                React.createElement("select", {multiple: true, ref: "selectBox", className: "searchable", id: "voters", name: "voters[]"}, 
                                    this.state.votersList.map(function (item) {
                                        var withoutNumber = self.isEmpty(item.contact_number);
                                        return (React.createElement("option", {key: item.id, disabled: withoutNumber, value: item.id}, item.name, " - (", item.contact_number, ") "))
                                    })
                                ), 
                                React.createElement("div", {className: "text-right"}, 
                                    React.createElement(HelpBlock, null, this.getError('voters'))
                                )
                            ), 

                            React.createElement(FormGroup, {controlId: "formMessageBody", validationState: this.getValidationState('messageBody')}, 
                                React.createElement("div", {className: "row", style: { marginBottom: "10px"}}, 
                                    React.createElement("div", {className: "col-md-9"}, 
                                        React.createElement(ControlLabel, null, "Your Message : ")
                                    ), 
                                    React.createElement("div", {className: "col-md-3 text-right"}, 
                                        React.createElement("select", {className: "form-control input-sm", onChange: self.handleTemplateChange}, 
                                            React.createElement("option", {value: ""}, " -- Select Template -- "), 
                                            this.state.templates.map(function (item) {
                                                return (React.createElement("option", {value: item.templateContent, key: "tempalte" + item.id}, item.templateName));
                                            })
                                        )
                                    )
                                ), 

                                React.createElement(FormControl, {componentClass: "textarea", disabled: this.state.sending, rows: "5", name: "messageBody", className: "form-control input-sm", value: data.messageBody, onChange: this.setMessageBody}), 
                                React.createElement("small", {style: { fontSize: "12px"}}, 
                                    React.createElement("span", null, 
                                        "You may use the ff. keywords( {n} = name, {fn} = firstname, {ln} = lastname, {px} = prefix , {nn} = nickname ) to add additional information on your message."
                                    )
                                ), 
                                React.createElement("div", {className: "text-right"}, 
                                    React.createElement("label", null, "Letter Count : ", data.messageBody.length + " / " + self.state.maxChars, " ")
                                ), 
                                React.createElement(HelpBlock, null, this.getError('messageBody'))
                            ), 
                            React.createElement("div", null, 
                                React.createElement("label", null, "Sent Logs"), 
                                React.createElement("div", {style: { padding: "5px", fontSize: "14px", overflow: "scroll", resize: "none", width: "100%", height: "130px", backgroundColor: "#D4D4D4"}, id: "message_logs"}
                                )
                            )
                        ), 

                        React.createElement("div", {className: "text-right col-md-12", style: { marginTop: "20px"}}, 
                            React.createElement("button", {type: "button", style: { marginRight: "5px"}, onClick: this.openTemplateModal, className: "btn blue-madison btn-sm"}, "Save Template"), 
                            !this.state.sending && React.createElement("button", {type: "submit", style: { marginRight: "5px"}, className: "btn blue-madison btn-sm"}, "Submit"), 
                            this.state.sending && React.createElement("button", {type: "submit", disabled: true, style: { marginRight: "5px"}, className: "btn blue-madison btn-sm"}, React.createElement("i", {className: "fa fa-spinner fa-pulse fa-1x fa-fw"}), " Sending Messages. Please wait..."), 
                            React.createElement("button", {type: "button", className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        console.log("showing modal");
        this.initSelect2();
        this.initMultiSelect();
        this.loadUser(window.userId);
        this.loadTemplates();
    },

    handleTemplateChange: function (e) {
        var form = this.state.form;
        form.data.messageBody = e.target.value;
        this.setState({ form: form });
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    loadTemplates: function () {
        var self = this;

        self.requestTemplates = $.ajax({
            url: Routing.generate("ajax_get_sms_template"),
            type: "GET"
        }).done(function (res) {
            self.setState({ templates: res });
        });
    },
    
    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form });
    },

    initMultiSelect: function () {

        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setVoters($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setVoters($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });
    },

    loadVoters: function () {
        var self = this;
        var data = self.state.form.data;
        self.requestVoters = $.ajax({
            url: Routing.generate('ajax_sms_multiselect_bcbp_member', data),
            type: "GET"
        }).done(function (res) {
            self.setState({ votersList: res, unselected: res });
            self.refreshSelectBox();
        });
    },

    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setVoters: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.voters = selected;
            unselected = this.state.votersList.filter(function (item) {
                return selected.indexOf(item.id) == -1;
            });
        } else {
            form.data.voters = [];
            unselected = this.state.votersList;
        }

        this.setState({ form: form, unselected: unselected });
    },

    initSelect2: function () {
        var self = this;

        $("#form-chapter-select2").select2({
            casesentitive: false,
            placeholder: "Enter chapter...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_chapter'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.chapter_name, text: item.chapter_name };
                        })
                    };
                },
            }
        });

        $("#form-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter group...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.group_name, text: item.group_name };
                        })
                    };
                },
            }
        });

        $("#form-batch-select2").select2({
            casesentitive: false,
            placeholder: "Enter batch...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_batch'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.batch_name, text: item.batch_name };
                        })
                    };
                },
            }
        });


        $("#form-unit-select2").select2({
            casesentitive: false,
            placeholder: "Enter unit...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_unit'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.unit_name, text: item.unit_name };
                        })
                    };
                },
            }
        });

        
        $("#form-position-select2").select2({
            casesentitive: false,
            placeholder: "Enter position...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });
        
        
        $("#form-gender-select2").select2({
            casesentitive: false,
            placeholder: "Enter gender...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_bcbp_gender'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.gender, text: item.gender };
                        })
                    };
                },
            }
        });

        $("#form-chapter-select2").on("change", function () {
            self.setFormPropValue("chapterName", $(this).val());
        });

        $("#form-batch-select2").on("change", function () {
            self.setFormPropValue("batchName", $(this).val());
        });

        $("#form-group-select2").on("change", function () {
            self.setFormPropValue("groupName", $(this).val());
        });

        $("#form-unit-select2").on("change", function () {
            self.setFormPropValue("unitName", $(this).val());
        });

        $("#form-gender-select2").on("change", function () {
            self.setFormPropValue("gender", $(this).val());
        });

        $("#form-position-select2").on("change", function () {
            self.setFormPropValue("position", $(this).val());
        });
    },

    setMessageBody: function (e) {
        var form = this.state.form;

        // if (e.target.value.length > this.state.maxChars)
        //     form.data.messageBody = e.target.value.substring(0, this.state.maxChars);
        // else
            form.data.messageBody = e.target.value;

        this.setState({ form: form });
    },

    genderChanged: function(e){
        var form = this.state.form;
        form.data.gender = e.target.value;
        console.log('gender');
        console.log(e.target.value);
        console.log("jquery");
        console.log($('#form-gender').text());

        this.setState({form : form});
    },

    openTemplateModal: function () {
        if (!this.isEmpty(this.state.form.data.messageBody))
            this.setState({ showTemplateModal: true });
        else
            alert("Opps! Cannot save an empty template...");
    },

    closeTemplateModal: function () {
        this.setState({ showTemplateModal: false });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;

        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        var lastResponseLength = false;

        self.requestValidation = $.ajax({
            url: Routing.generate("ajax_post_bcbp_sms"),
            type: "POST",
            data: data,
            xhrFields: {
                onprogress: function (e) {
                    var progressResponse;
                    var response = e.currentTarget.response;

                    if (lastResponseLength === false) {
                        progressResponse = response;
                        lastResponseLength = response.length;
                    }
                    else {
                        progressResponse = response.substring(lastResponseLength);
                        lastResponseLength = response.length;
                    }

                    if (self.isJsonString(progressResponse)) {
                        progressResponse = JSON.parse(progressResponse);
                        var row = progressResponse.currentRow;

                        $('#message_logs').prepend("<div> " + progressResponse.currentRowIndex + ". Message to " + row.firstname + (progressResponse.status ? " was sent : " : " has failed : ") + progressResponse.message + "</div>")
                        self.setState({ uploadedRecord: progressResponse.currentRowIndex, totalRows: progressResponse.totalRows, percentage: progressResponse.percentage });
                    } else {
                        // invalid json data
                    }
                }
            }
        }).done(function () {
            self.reset();
        }).fail(function (err) {
            if (err.status == '401') {
                //self.props.notify("You dont have the permission to perform this action.", "ruby");
            } else if (err.status == '400') {
                //self.props.notify("Form Validation Failed.", "ruby");
            }
            self.setErrors(err.responseJSON)
        }).always(function () {
            self.setState({ sending: false });

        });

        $('#message_logs').empty();
        self.setState({ sending: true });
    },

    isJsonString: function (str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.deselectAll();
        this.setState({ form: form });
    }

});


window.BcbpSmsModal = BcbpSmsModal;
var BcbpDatatable = React.createClass({displayName: "BcbpDatatable",

    getInitialState: function () {
        return {
            showEditModal: false,
            showReleaseModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        //this.loadUser(window.userId);
        this.initDatatable();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },


    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var bcbp_table = $("#bcbp_table");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get_datatable_bcbp_temp_profile", {}, true);

        grid_project_event.init({
            src: bcbp_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "pageLength" : 100,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.name = $('#bcbp_table input[name="name"]').val();
                        d.position = $('#bcbp_table input[name="position"]').val();
                        d.groupName = $('#bcbp_table input[name="group_name"]').val();
                        d.unitName = $('#bcbp_table input[name="unit_name"]').val();
                        d.chapterName = $('#bcbp_table input[name="chapter_name"]').val();
                        d.batchName = $('#bcbp_table input[name="batch_name"]').val();
                        d.contactNumber = $('#bcbp_table input[name="contact_number"]').val();
                        d.gender = $('#bcbp_table input[name="gender"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [0, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "name",
                        "className": "text-left",
                        "render": function (data) {
                            return "<a href='javascript:void(0);' class='release-button'><strong>" + data + '</strong></a>';
                        }
                    },
                    {
                        "data": "nickname",
                        "className": "text-center",
                        "width": 50,
                    },
                    {
                        "data": "position",
                        "className": "text-center",
                        "width": 100,
                    },
                    {
                        "data": "unit_name",
                        "className": "text-center",
                        "width": 100,
                    },
                    {
                        "data": "group_name",
                        "className": "text-center",
                        "width": 100,
                    },
                    {
                        "data": "batch_name",
                        "width": 100,
                        "className": "text-center"
                    },
                    {
                        "data": "chapter_name",
                        "className": "text-center",
                        "width": 150
                    },
                    {
                        "data": "contact_number",
                        "width": 100,
                        "className": "text-center"
                    },
                    {
                        "data": "gender",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "birthdate",
                        "className": "text-center",
                        "width": 100
                    },

                    {
                        "data": "source_number",
                        "className": "text-center",
                        "width": 50
                    },

                    {
                        "data": "created_at",
                        "className": "text-center",
                        "width": 150
                    },

                    {
                        "width": 50 ,
                        "render": function (data, type, row) {

                            var viewBtn = '<button class="btn btn-xs default edit2-btn"><i class="fa fa-eye"></i></button>';
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var assignBtn = '<button class="btn btn-xs blue assign-btn"><i class="fa fa-edit"></i>Assign</button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';
                            var btnGroup = '';

                            btnGroup += editBtn;

                            return btnGroup;
                        },

                        "className": "text-center"
                    }
                ],
            }
        });

        bcbp_table.on('click', '.edit-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
        this.reload();
    },

    closeReleaseModal: function () {
        this.setState({ showReleaseModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    openClosingModal: function () {
        this.setState({ showClosingModal: true });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this request?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_tupad_transaction", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {

        console.log("relaod databable");
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    openProfile: function (id) {
        this.setState({ showEditModal: true, target: id });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 

                
                    this.state.showEditModal &&
                    React.createElement(BcbpEditModal, {
                        show: this.state.showEditModal, 
                        reload: this.reload, 
                        onHide: this.closeEditModal, 
                        id: this.state.target}
                    ), 
                
                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "bcbp_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Nickname"), 
                                React.createElement("th", null, "Position"), 
                                React.createElement("th", null, "Unit"), 
                                React.createElement("th", null, "Action Group"), 
                                React.createElement("th", null, "Batch #"), 
                                React.createElement("th", null, "Chapter"), 
                                React.createElement("th", null, "Contact Number"), 
                                React.createElement("th", null, "Gender"), 
                                React.createElement("th", null, "Birthdate"), 
                                React.createElement("th", null, "Sender"), 
                                React.createElement("th", null, "Date Created"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "position", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "unit_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "group_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "batch_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "chapter_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "contact_number", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "gender", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.BcbpDatatable = BcbpDatatable;
var BcbpComponent = React.createClass({displayName: "BcbpComponent",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showSmsModal: false,
            form: {
                data: {}
            }
        }
    },

    openSmsModal: function () {
        console.log("open sms modal");
        this.setState({ showSmsModal: true });
        console.log(this.state.showSmsModal);
    },

    closeSmsModal: function () {
        this.setState({ showSmsModal: false });
    },

    openCreateModal: function () {
        console.log("open sms modal");
        this.setState({ showCreateModal: true });
        console.log(this.state.showCreateModal);
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false });
        this.refs.bcbpDatatableRef.reload();
    },

    onCreateSuccess : function(){
        this.refs.bcbpDatatableRef.reload();
    },

    render: function () {
        var self = this;

        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body", id: "bcbp_component"}, 
                    React.createElement("div", {className: "row"}, 

                        
                            this.state.showSmsModal &&
                            React.createElement(BcbpSmsModal, {
                                show: this.state.showSmsModal, 
                                onHide: this.closeSmsModal}
                            ), 
                        

                        
                            this.state.showCreateModal &&
                            React.createElement(BcbpCreateModal, {
                                show: this.state.showCreateModal, 
                                onHide: this.closeCreateModal, 
                                onSuccess: this.onCreateSuccess}
                            ), 
                        

                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement("button", {type: "button", className: "btn btn-success btn-sm", style: { marginRight:"10px"}, onClick: this.openCreateModal}, "Add Profile"), 
                            React.createElement("button", {type: "button", className: "btn btn-success btn-sm", onClick: this.openSmsModal}, "Send Messages")
                        )
                    ), 
                    React.createElement("div", {className: "row"}, 
                        React.createElement(BcbpDatatable, {ref: "bcbpDatatableRef"})
                    )
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(BcbpComponent, null),
        document.getElementById('page-container')
    );
}, 500);
