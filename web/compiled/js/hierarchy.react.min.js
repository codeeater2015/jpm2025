var HierarchyProfileDatatable = React.createClass({displayName: "HierarchyProfileDatatable",

    getInitialState: function () {
        return {
            showEditModal: false,
            showReleaseModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        //this.loadUser(window.userId);
        this.initDatatable();
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },


    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var kfc_attendance_profile = $("#kfc_attendance_profile");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get__hierarchy_datatable_household_profile", {proVoterId : self.props.proVoterId }, true);

        grid_project_event.init({
            src: kfc_attendance_profile,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "pageLength": 100,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.hdrId= self.props.hdrId;
                        d.voterName = $('#kfc_attendance_profile input[name="voter_name"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "className": "text-left",
                        "render" : function(data,type,row){
                            return  row.is_non_voter == 1 ? '--- ' + data :  data;
                        }
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "width": 250,
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "data": "is_non_voter",
                        "className": "text-center",
                        "width": 50,
                        "render" : function(data,type,row){
                            return Number.parseInt(data) == 1 ? "NO" : "YES";
                        }
                    },
                    {
                        "data": "cellphone",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "width": 80,
                        "render": function (data, type, row) {

                            var viewBtn = '<button class="btn btn-xs default edit2-btn"><i class="fa fa-eye"></i></button>';
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var assignBtn = '<button class="btn btn-xs blue assign-btn"><i class="fa fa-edit"></i>Assign</button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';
                            var btnGroup = '';

                            btnGroup += deleteBtn;

                            return btnGroup;
                        },

                        "className": "text-center"
                    }
                ],
            }
        });

        kfc_attendance_profile.on('click', '.edit-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        });

        kfc_attendance_profile.on('click', '.delete-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
        this.reload();
    },

    closeReleaseModal: function () {
        this.setState({ showReleaseModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    openClosingModal: function () {
        this.setState({ showClosingModal: true });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this household profile?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_kfc_attendance_detail_profile", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
                self.props.reloadDetail();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {

        console.log("relaod databable");
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    openProfile: function (id) {
        this.setState({ showEditModal: true, target: id });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                    this.state.showEditModal &&
                    React.createElement(KfcAttendanceListModal, {
                        show: this.state.showEditModal, 
                        reload: this.reload, 
                        onHide: this.closeEditModal, 
                        id: this.state.target}
                    ), 
                
                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "kfc_attendance_profile", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Municipality"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Voter?"), 
                                React.createElement("th", null, "Contact No"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.HierarchyProfileDatatable = HierarchyProfileDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HierarchyProfileModal = React.createClass({displayName: "HierarchyProfileModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    voterId: null,
                    proVoterId: null
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, dialogClassName: "modal-custom-85", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, self.props.headerText, " Household Profile ")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement(HierarchyProfileDatatable, {proVoterId: this.props.proVoterId})
                )
            )
        );
    },

    componentDidMount: function () {
        console.log("hierarchy profile modal has been loaded");
    },

});


window.HierarchyProfileModal = HierarchyProfileModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HierarchyItemEditModal = React.createClass({displayName: "HierarchyItemEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    voterId: null,
                    proVoterId: null
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, bsSize: "sm", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Update Profile")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-recruit-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formContactNo", validationState: this.getValidationState('contactNo')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.contactNo, className: "input-sm form-control", onChange: this.setFormProp, name: "contactNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('contactNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-12", style: { paddingRight: "0"}}, 
                                React.createElement(FormGroup, {controlId: "formVoterGroup", validationState: this.getValidationState('voterGroup')}, 
                                    React.createElement(ControlLabel, null, "Position : "), 
                                    React.createElement("select", {id: "edit-voter-group-select2", className: "form-control input-sm"}, 
                                        React.createElement("option", {value: ""}, " ")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterGroup'))
                                )
                            )
                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-default", type: "button", onClick: this.props.onHide}, " Close "), 
                                React.createElement("button", {className: "btn btn-primary", type: "submit", style: { marginLeft: "10px"}}, " Submit ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadData(this.props.proVoterId);
    },

    loadData: function (proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_hierarchy_item", { proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            console.log('update profile data has been received');
            console.log(res);
            var form = self.state.form;

            form.data = res;
            self.setState({ form: form }, self.reinitSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#edit-voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term.toUpperCase(),
                    text: params.term.toUpperCase(),
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#edit-voter-group-select2").on("change", function () {
            self.setFormPropValue("voterGroup", $(this).val());
        });
    },

    reinitSelect2: function () {
        var voterGroup = this.state.form.data.voterGroup;
        $("#edit-voter-group-select2").empty()
            .append($("<option />")
                .val(voterGroup)
                .text(voterGroup))
            .trigger("change");
    },


    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;
        data.voterGroup = $('#edit-voter-group-select2').val();

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_hierarchy_patch_item_info", { proVoterId: self.props.proVoterId }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            console.log('patch complete');
            self.props.onSuccess();
            self.props.onHide();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.HierarchyItemEditModal = HierarchyItemEditModal;

var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var Hierarchy = React.createClass({displayName: "Hierarchy",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showSmsModal: false,
            showProfileModal: false,
            selectedItem: null,
            summary : {
                municipality_name : "",
                barangay_name : "",
                total_voter : 0,
                total_tl : 0,
                total_0 : 0,
                total_1 : 0,
                total_2 : 0,
                target_tl : 0,
                target_0 : 0,
                total_no_profile : 0
            },
            form: {
                data: {
                    leaderId: null,
                    assignedMunNo: null,
                    assignedBrgyNo: null,
                    assignedPurok: null,
                    voterGroup: null,
                    voterGroupFilter: null,
                    municipalityFilter: null,
                    barangayFilter: null,
                    voterNameFilter: null
                }
            }
        }
    },

    componentDidMount: function () {
        var self = this;

        $('#tree1').tree({
            dragAndDrop: true,
            autoOpen: true,
            onCreateLi: function (node, $li) {
                // Append a link to the jqtree-element div.
                // The link has an url '#node-[id]' and a data property 'node-id'.
                console.log(node.getLevel());

                let level = node.getLevel();
                let badgeColor = 'badge-light';

                switch (level) {
                    case 1:
                        badgeColor = 'badge-success';
                        break;
                    case 2:
                        badgeColor = 'badge-warning';
                        break;
                    case 3:
                        badgeColor = 'badge-danger';
                        break;
                    default:
                        badgeColor = 'badge-light';
                        break;
                }

                console.log("node name");
                console.log(node.name);

                let nameParts = node.name.split(":");

                console.log(nameParts);

                // 0 = position
                // 1 = name
                // 2 = municipality 
                // 3 = barangay 
                // 4 = household profile counts

                let customHtml = '<em><small style="padding-left:5px;"><span class="badge badge-pill ' + badgeColor + '"> level ' + level + '</span></small></em>'
                //let profileCounterHtml = '<small style="margin-top:3px;margin-left:5px;" class="badge badge-primary badge-pill"><span><i class="fa fa-user"></i><span>' + nameParts[4] + '</span></span></small>';

                //customHtml += profileCounterHtml;
                customHtml += '<a href="#node-' + node.id + '" class="btn btn-icon tree-delete" style="margin-top:0px;padding-top:0px;color:#e62044" data-node-id="' + node.id + '"><i data-node-id="' + node.id + '"class="fa fa-trash"></i></a>';



                $li.find('.jqtree-element').append(
                    customHtml
                );

                //$('#tree1').jstree('updateNode', node, nameParts[1])

            }
        });

        $('#tree1').on(
            'tree.move',
            function (event) {
                console.log('moved_node', event.move_info.moved_node);
                console.log('target_node', event.move_info.target_node);
                console.log('position', event.move_info.position);
                console.log('previous_parent', event.move_info.previous_parent);
                console.log("update item");

                let data = {
                    proVoterId: event.move_info.moved_node.id,
                    parentId: event.move_info.target_node.id,
                    nodeLevel: event.move_info.target_node.getLevel() + 1
                };

                if (data.parentId != null) {
                    self.requestPost = $.ajax({
                        url: Routing.generate("ajax_hierarchy_patch_item"),
                        data: data,
                        type: 'PATCH'
                    }).done(function (res) {
                        console.log("patch succeeded.");
                        let selectedItem = self.state.selectedItem;
                        selectedItem.proVoterId = data.proVoterId;

                        self.setState({ selectedItem: selectedItem }, self.openEditModal);
                    }).fail(function (err) {
                        self.setErrors(err.responseJSON);
                        console.log("ops! something went wrong");
                    });
                } else {
                    alert("State not saved. No target node was found.");
                }

            }
        );


        $('#tree1').on('click', '.tree-delete', function (e) {

            console.log('delete triggered');

            // Get the id from the 'node-id' data property
            var node_id = $(e.target).data('node-id');

            console.log('node id', node_id);

            // Get the node from the tree
            var node = $('#tree1').tree('getNodeById', node_id.toString());
            console.log('node', node);

            if (node) {
                if (node.getLevel() != 1) {
                    if (confirm("are you sure you want to continue deleting this entire branch?")) {
                        self.delete(node_id);
                    } else {
                        console.log('canceling');
                    }
                } else {
                    //self.delete(node_id);
                    alert("You dont have permission to remove level 1 branch");
                }
            }
        });

        $('#tree1').on(
            'tree.select',
            function (event) {
                if (event.node) {
                    // node was selected
                    var node = event.node;
                    var form = self.state.form;

                    //alert(node.name);
                    self.loadSelectedItem(node.id);
                    // form.data.leaderId = node.id;

                    // self.setState({ form : form });
                }
                else {
                    // event.node is null
                    // a node was deselected
                    // e.previous_node contains the deselected node
                    console.log("node deselected");
                    self.setState({ selectedItem: null })
                }
            }
        );

        this.initSelect2();
        this.loadSummaryData();
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },


    openCreateModal: function () {
        console.log("open sms modal");
        this.setState({ showCreateModal: true });
        console.log(this.state.showCreateModal);
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false });
        this.refs.bcbpDatatableRef.reload();
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false });
    },

    onCreateSuccess: function () {
        this.refs.attendanceDatatable.reload();
        this.setState({ showCreateModal: false });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    initSelect2: function () {
        var self = this;

        $("#hierarchy_page #voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 423,
                        proId: 3,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var isVoter = item.is_non_voter == 1 ? "NV" : "V";
                            var profileLabel = (item.position == '' || item.position == null) ? "No Profile" : item.position;

                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) ' + isVoter + " | " + profileLabel;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #voter-head-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 423,
                        proId: 3,
                        provinceCode: 53,
                        municipalityNo: $("#hierarchy_page #municipality_filter_select2").val(),
                        brgyNo: $("#hierarchy_page #barangay_filter_select2").val(),
                        voterGroup: self.state.form.data.voterGroupFilter
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var isVoter = item.is_non_voter == 1 ? "NO" : "YES";
                            var voterGroup = item.voter_group;

                            var text = item.voter_name + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' ) - is voter? : ' + isVoter + '||' + voterGroup;

                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term.toUpperCase(),
                    text: params.term.toUpperCase(),
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #voter-group-filter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term.toUpperCase(),
                    text: params.term.toUpperCase(),
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #purok_select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_hierarchy_select2_purok'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#municipality_select2").val(),
                        brgyNo: $("#barangay_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.assigned_purok, text: item.assigned_purok };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #municipality_filter_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#hierarchy_page #barangay_filter_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#hierarchy_page #municipality_filter_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        var self = this;

        $("#hierarchy_page #voter-group-select2").on("change", function () {
            console.log("voter group has been selected");
            console.log($(this).val());
            var form = self.state.form;
            form.data.voterGroup = $(this).val();

            self.setState({ form: form });
        });

        $("#hierarchy_page #voter-group-filter-select2").on("change", function () {
            var form = self.state.form;
            form.data.voterGroupFilter = $(this).val();

            self.setState({ form: form }, self.loadHierarchyData);
        });

        $("#hierarchy_page #municipality_select2").on("change", function () {

            self.setFieldValue("assignedMunNo", $(this).val());
        });

        $("#hierarchy_page #barangay_select2").on("change", function () {
            self.setFieldValue("assignedBrgyNo", $(this).val());
        });

        $("#hierarchy_page #municipality_filter_select2").on("change", function () {
            var form = self.state.form;
            form.data.municipalityFilter = $(this).val();

            self.setState({ form: form }, self.loadHierarchyData);
        });

        $("#hierarchy_page #barangay_filter_select2").on("change", function () {
            var form = self.state.form;
            form.data.barangayFilter = $(this).val();

            self.setState({ form: form }, self.loadHierarchyData);
        });

        $("#hierarchy_page #purok_select2").on("change", function () {
            self.setFieldValue("assignedPurok", $(this).val());
        });

        $("#hierarchy_page #voter-select2").on("change", function () {
            self.loadVoter(3, $(this).val());
        });

        $("#hierarchy_page #voter-head-select2").on("change", function () {
            console.log("head has been selected");
            console.log("reloading tree");

            let form = self.state.form;
            form.data.leaderId = $(this).val();

            self.setState({ form: form }, self.loadHierarchyData)
        });

        $("#hierarchy_page #voter-group-filter-select2").empty()
            .append($("<option />")
                .val('TOP LEADER')
                .text('TOP LEADER'))
            .trigger("change");
    },


    loadHierarchyData: function () {
        var leaderId = this.state.form.data.leaderId;
        var voterGroupFilter = this.state.form.data.voterGroupFilter;
        var municipalityNo = this.state.form.data.municipalityFilter;
        var barangayNo = this.state.form.data.barangayFilter;

        var hierarchyRoute = Routing.generate("ajax_get_hierarchy_sample_data", {
            leaderId: leaderId,
            voterGroupFilter: voterGroupFilter,
            municipalityNo: municipalityNo,
            barangayNo: barangayNo
        });

        var self = this;
        self.requestHierarchyData = $.ajax({
            url: hierarchyRoute,
            type: "GET"
        }).done(function (res) {
            console.log("new data has been received");
            console.log(res);
            $('#tree1').tree("loadData", res);
        });

        self.loadSummaryData();
    },

    loadSummaryData: function () {
        var municipalityNo = this.state.form.data.municipalityFilter;
        var barangayNo = this.state.form.data.barangayFilter;

        var hierarchyRoute = Routing.generate("ajax_m_get_hierarchy_summary", {
            municipalityNo: municipalityNo,
            barangayNo: barangayNo
        });

        var self = this;
        self.requestHierarchyData = $.ajax({
            url: hierarchyRoute,
            type: "GET"
        }).done(function (res) {
            console.log("summary has been received");
            console.log(res);
            self.setState({ summary : res });
        });

    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;

            form.data.proVoterId = res.proVoterId;
            form.data.contactNo = res.cellphone;
            console.log('voter recieved');

            console.log(form.data);

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.contactNo = '';

        self.setState({ form: form })
    },

    loadSelectedItem: function (proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_hierarchy_item", { proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            console.log('selected item has been received');
            console.log(res);
            self.setState({ selectedItem: res });
        });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    openEditModal: function () {
        this.setState({ showEditModal: true });
    },

    closeProfileModal: function () {
        this.setState({ showProfileModal: false });
    },

    onSuccessUpdate: function () {
        this.loadHierarchyData();
    },

    addItem: function () {
        console.log('adding item');
        let self = this;

        if (self.state.form.data.proVoterId != null) {
            let parentId = 0;
            let proceedAdd = true;

            if (self.state.selectedItem != null) {
                parentId = self.state.selectedItem.proVoterId;
            } else {
                proceedAdd = confirm("No parent node selected. Are you sure you want to add a root node?");
                parentId = 0;
            }

            console.log(parentId);


            if (proceedAdd) {

                parentId = parentId != null ? parentId : 0;
                var voterGroup = $('#hierarchy_page #voter-group-select2').val();

                parentId = voterGroup == 'TOP LEADER' ? 0 : parentId;

                if (parentId == 0) {
                    if (!confirm("Are you sure you want to add a root node?")) {
                        proceedAdd = false;
                    }
                }

                if (proceedAdd) {
                    let data = {
                        proVoterId: this.state.form.data.proVoterId,
                        parentId: parentId,
                        voterGroup: voterGroup,
                        assignedMunNo: this.state.form.data.assignedMunNo,
                        assignedBrgyNo: this.state.form.data.assignedBrgyNo,
                        assignedPurok: this.state.form.data.assignedPurok
                    };

                    console.log(data);

                    self.requestPost = $.ajax({
                        url: Routing.generate("ajax_hierarchy_post_item"),
                        data: data,
                        type: 'POST'
                    }).done(function (res) {
                        console.log("request succeeded.")
                        self.loadHierarchyData();
                        $("#hierarchy_page #voter-select2").empty().trigger("change");
                    }).fail(function (err) {

                        for (const [key, value] of Object.entries(err.responseJSON)) {
                            console.log(`Key: ${key}, Value: ${value}`);
                            self.notify(`${key} : ${value}`, "teal");
                        }
                        console.log("ops! something went wrong");
                    });
                }
            }
        } else {
            alert("Opps! Empty form!");
        }
    },

    delete: function (proVoterId) {
        var self = this;

        self.requestDeleteVoter = $.ajax({
            url: Routing.generate("ajax_delete_hierarchy_item", { proVoterId: proVoterId }),
            type: "DELETE"
        }).done(function (res) {
            console.log('item has been removed.');
            self.loadHierarchyData();
        }).fail(function (res) {
        });
    },

    openProfileModal: function () {
        if (this.state.selectedItem != null) {
            this.setState({ showProfileModal: true });
        }
    },

    numberWithCommas: function(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    },

    render: function () {
        var self = this;
        var selectedItem = this.state.selectedItem;
        var summary = this.state.summary;

        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body", id: "bcbp_component"}, 
                    
                        this.state.showEditModal &&
                        React.createElement(HierarchyItemEditModal, {
                            show: this.state.showEditModal, 
                            onHide: this.closeEditModal, 
                            onSuccess: this.onSuccessUpdate, 
                            proVoterId: this.state.selectedItem.proVoterId}
                        ), 
                    

                    
                        this.state.showProfileModal &&
                        React.createElement(HierarchyProfileModal, {
                            show: this.state.showProfileModal, 
                            onHide: this.closeProfileModal, 
                            proVoterId: this.state.selectedItem.hh_pro_voter_id, 
                            headerText: this.state.selectedItem.hh_voter_name}
                        ), 
                    
                    React.createElement("div", {className: "row", id: "hierarchy_page"}, 
                        React.createElement("div", {className: "col-md-4"}, 

                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formMunicipality"}, 
                                        React.createElement("select", {id: "municipality_filter_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formBarangay"}, 
                                        React.createElement("select", {id: "barangay_filter_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-4"}, 
                                    React.createElement(FormGroup, {controlId: "formProVoterId"}, 
                                        React.createElement(ControlLabel, null, "Position Filter : "), 
                                        React.createElement("select", {id: "voter-group-filter-select2", className: "form-control input-sm"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement(FormGroup, {controlId: "formProVoterId"}, 
                                        React.createElement(ControlLabel, null, "Name Filter: "), 
                                        React.createElement("select", {id: "voter-head-select2", className: "form-control input-sm"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("h3", null, React.createElement("strong", null, "Add Member:"))
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formMunicipality"}, 
                                        React.createElement("label", {className: "control-label"}, "Assigned City/Municipality"), 
                                        React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                    )
                                ), 

                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formBarangay"}, 
                                        React.createElement("label", {className: "control-label"}, "Assigned Barangay"), 
                                        React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formAssignedPurok"}, 
                                        React.createElement("label", {className: "control-label"}, "Assigned Purok / Sitio "), 
                                        React.createElement("select", {id: "purok_select2", className: "form-control form-filter input-sm", name: "assignedPurok"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('assignedPurok'))
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement(FormGroup, {controlId: "formProVoterId"}, 
                                        React.createElement(ControlLabel, null, "Position : "), 
                                        React.createElement("select", {id: "voter-group-select2", className: "form-control input-sm"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement(FormGroup, {controlId: "formProVoterId"}, 
                                        React.createElement(ControlLabel, null, "Name : "), 
                                        React.createElement("select", {id: "voter-select2", className: "form-control input-sm"}
                                        ), 
                                        React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("button", {type: "button", className: "btn btn-success btn-lg", style: { width: "100%", marginRight: "10px", marginTop: "26px"}, onClick: this.addItem}, "Add Item")
                                )
                            )
                        ), 

                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("table", {className: "table table-condensed table-bordered"}, 
                                    React.createElement("tbody", {style: { backgroundColor: "#a4baeb"}}, 
                                        React.createElement("tr", null, 
                                            React.createElement("th", {colSpan: "2", className: "text-center"}, "TL : ", self.numberWithCommas(parseInt(summary.total_tl)), " / ", self.numberWithCommas(parseInt(summary.target_tl))), 
                                            React.createElement("th", {colSpan: "2", className: "text-center"}, "K0 : ", self.numberWithCommas(parseInt(summary.total_k0)), " / ", self.numberWithCommas(parseInt(summary.target_0))), 
                                            React.createElement("th", {colSpan: "2", className: "text-center"}, "K1 : ", self.numberWithCommas(parseInt(summary.total_k1)), " / ", self.numberWithCommas(parseInt(summary.target_0) * 4)), 
                                            React.createElement("th", {colSpan: "2", className: "text-center"}, "K2 : ", self.numberWithCommas(parseInt(summary.total_k2)), " / ", self.numberWithCommas(parseInt(summary.target_0) * 24)), 
                                            React.createElement("th", {rowSpan: "2", className: "text-center"}, "No Profile : ", self.numberWithCommas(parseInt(summary.total_no_profile)))
                                        )
                                    )
                                )
                            ), 
                            
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-12"}, 
                                    React.createElement("div", {id: "tree1"})
                                )
                            )
                        ), 
                        React.createElement("div", {className: "col-md-2"}, 
                            React.createElement("p", {className: "text-center"}, React.createElement("strong", null, "ACTIVE BRANCH OVERVIEW")), 
                            selectedItem != null ? (
                                React.createElement("div", null, 
                                    React.createElement("div", null, 
                                        React.createElement("a", {onClick: this.openProfileModal, style: { marginLeft: "5px"}, href: "#", className: "btn btn-sm btn-success m-btn m-btn--icon m-btn--icon-only"}, 
                                            React.createElement("i", {className: "fa fa-home"})
                                        ), 
                                        React.createElement("a", {onClick: this.openEditModal, style: { marginLeft: "5px"}, href: "#", className: "btn btn-sm btn-primary m-btn m-btn--icon m-btn--icon-only"}, 
                                            React.createElement("i", {className: "fa fa-edit"})
                                        )
                                    ), 
                                    React.createElement("br", null), 
                                    React.createElement("div", {className: "text-center", style: { fontSize: "1.2em", marginBottom: "10px", marginTop: "10px"}}, React.createElement("strong", null, selectedItem.voterName, " ")), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, " Registered Address : ")), " ", React.createElement("br", null), " ", selectedItem.municipalityName, ", ", selectedItem.barangayName), 
                                    React.createElement("div", {style: { marginBottom: "10px"}}, React.createElement("strong", null, " ", React.createElement("small", null, "is Voter :"), " "), " ", selectedItem.isNonVoter == 1 ? "NO" : "YES"), 
                                    React.createElement("div", {style: { marginBottom: "10px"}}, React.createElement("strong", null, React.createElement("small", null, "Assigned Address :")), " ", React.createElement("br", null), " ", selectedItem.assignedMunicipality, ",  ", selectedItem.assignedBarangay, ", ", selectedItem.assignedPurok), 

                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Contact # :")), "  ", selectedItem.voter.cellphone, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Hierarchy Position :")), " ", selectedItem.voter.voterGroup, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "HH Position :")), " ", selectedItem.voter.position, " "), 
                                    React.createElement("br", null), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Total Household Members :")), " ", selectedItem.members.length, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Voting Strength :")), " ", selectedItem.votingStrength.totalVoter, " / ", selectedItem.votingStrength.householdSize, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Within District : ")), " ", selectedItem.votingStrength.withinDistrict), 
                                    React.createElement("div", null, React.createElement("strong", null, React.createElement("small", null, "Outside District : ")), " ", selectedItem.votingStrength.outsideDistrict)
                                )
                            ) : ""
                        )
                    )
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(Hierarchy, null),
        document.getElementById('page-container')
    );
}, 500);
