var LocationAssignmentDatatable = React.createClass({displayName: "LocationAssignmentDatatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500
        }
    },

    componentDidMount: function () {
        this.initDatatable();
    },

    initDatatable: function () {
        var self = this;

        var location_table = $("#location_assignment_table");
        var grid_table = new Datatable();
        var url = Routing.generate("ajax_get_datatable_location_assignment", { proIdCode: self.props.proIdCode }, true);

        grid_table.init({
            src: location_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "dom": "pit",
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.municipalityName = $('#location_assignment_table input[name="municipalityName"]').val();
                        d.barangayName = $('#location_assignment_table input[name="barangayName"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 1, 2, 3]
                }],
                "order": [
                    [2, "ASC"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "municipality_name"
                    },
                    { "data": "barangay_name" },
                    {
                        "width": 20,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs btn-danger delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            return deleteBtn;
                        }
                    }
                ],
            }
        });

        location_table.on('click', '.delete-button', function () {
            var data = grid_table.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_table;
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this location?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_location_assignment", { id: id }),
                type: 'DELETE'
            }).done(function () {
                self.reload();
            });
        }
    },

    
    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    render: function () {
        return (
            React.createElement("div", {style: { marginTop: "10px"}}, 
                React.createElement("div", {className: "table-container"}, 
                    React.createElement("div", {className: "table-actions-wrapper"}, 
                        React.createElement("span", null, " ")
                    ), 
                    React.createElement("table", {id: "location_assignment_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Municipality"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Action")
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "municipalityName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangayName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.LocationAssignmentDatatable = LocationAssignmentDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var LocationAssignmentCreateModal = React.createClass({displayName: "LocationAssignmentCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    provinceCode: 53,
                    municipalityNo: "",
                    brgyNo: "",
                    userId: null,
                    barangays: []
                },
                errors: []
            },

            barangayList: [],
            unselected: []
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Add Location")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "access-form"}, 
                        React.createElement("div", {class: "row"}, 
                            React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                React.createElement(ControlLabel, null, " City / Municipality : "), 
                                React.createElement("select", {id: "form-municipality-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                            )
                        ), 

                        React.createElement("div", {class: "row"}, 
                            React.createElement("div", {class: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formBarangays", validationState: this.getValidationState('barangays')}, 
                                    React.createElement("select", {multiple: true, ref: "selectBox", className: "searchable", id: "barangays", name: "barangays[]"}, 
                                        this.state.barangayList.map(function (item) {
                                            return (React.createElement("option", {key: item.brgy_no, value: item.brgy_no}, item.name))
                                        })
                                    ), 
                                    React.createElement("div", {className: "text-right"}, 
                                        React.createElement(HelpBlock, null, this.getError('barangays'))
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {class: "row"}, 
                            React.createElement("div", {className: "text-right col-md-12"}, 
                                React.createElement("button", {type: "button", className: "btn  btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                                React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadBarangays();
    },

    initSelect2: function () {
        var self = this;

        $("#form-municipality-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name ...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.form.data.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-municipality-select2").on("change", function () {
            var form = self.state.form;
            form.data.municipalityNo = $(this).val();

            self.setState({ form: form }, self.loadBarangays);
        });
    },


    initMultiSelect: function () {

        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setBarangays($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setBarangays($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });
    },

    loadBarangays: function () {
        var self = this;
        var data = self.state.form.data;

        self.requestBarangays = $.ajax({
            url: Routing.generate('ajax_location_assignment_multiselect_municipality', data),
            type: "GET"
        }).done(function (res) {
            self.setState({ barangayList: res, unselected: res });
            self.refreshSelectBox();
        });
    },


    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setBarangays: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.barangays = selected;
            unselected = this.state.barangayList.filter(function (item) {
                return selected.indexOf(item.brgy_no) == -1;
            });
        } else {
            form.data.barangays = [];
            unselected = this.state.barangayList;
        }

        this.setState({ form: form, unselected: unselected });
    },


    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.data.brgyNo = "";
        form.errors = [];

        $("#form-barangay-select2").empty().trigger("change");

        this.setState({ form: form });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.barangays = $(self.refs.selectBox).val();

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_location_assignment", { proIdCode: self.props.proIdCode }),
            data: data,
            type: 'POST',
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
        }).fail(function (err) {
            self.props.notify("Form Validation Failed.", "ruby");
            self.setErrors(err.responseJSON);
        });
    }
});


window.LocationAssignmentCreateModal = LocationAssignmentCreateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var LocationAssignmentModal = React.createClass({displayName: "LocationAssignmentModal",

    getInitialState: function () {
        return {
            showAddLocationModal: false
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, bsSize: "lg", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Assigned Locations")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showAddLocationModal &&
                        React.createElement(LocationAssignmentCreateModal, {
                            proIdCode: self.props.proIdCode, 
                            show: this.state.showAddLocationModal, 
                            onSuccess: this.reloadDatatable, 
                            onHide: this.closeAddLocationModal}
                        ), 
                    

                    React.createElement("div", {className: "col-md-7", style: { paddingLeft: "0px", marginBottom: "10px"}}, 
                        React.createElement("button", {onClick: this.openAddLocationModal, type: "button", className: "btn btn-sm btn-primary"}, "Add location")
                    ), 

                    React.createElement("div", null, 
                        React.createElement(LocationAssignmentDatatable, {
                            proIdCode: self.props.proIdCode, 
                            ref: "locationDatatable"}
                        )
                    )

                )
            )
        );
    },


    reloadDatatable: function () {
        if(this.refs.locationDatatable != null){
            this.refs.locationDatatable.reload();
        }
    },

    openAddLocationModal: function () {
        console.log("showing add member modal");
        this.setState({ showAddLocationModal: true })
    },

    closeAddLocationModal: function () {
        this.setState({ showAddLocationModal: false });
    }

});


window.LocationAssignmentModal = LocationAssignmentModal;
var Modal = ReactBootstrap.Modal;
var Tab = ReactBootstrap.Tab;
var Tabs = ReactBootstrap.Tabs;
var Nav = ReactBootstrap.Nav;
var NavItem = ReactBootstrap.NavItem;

var VoterCropModal = React.createClass({displayName: "VoterCropModal",

    getInitialState: function () {
        return {
            imageCropper : null
        };
    },

    render: function () {
        var photoUrl = window.imgUrl + this.props.proId + '_' + this.props.generatedIdNo + "?" + new Date().getTime();
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Crop Photo")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                
                React.createElement("div", null, 
                    React.createElement("img", {id: "original_image", style: {maxWidth: "100%"}, src: photoUrl})
                ), 
                React.createElement("div", {className: "col-md-12 text-right", style: { marginTop: "15px"}}, 
                    React.createElement("button", {className: "btn btn-sm btn-primary", onClick: this.saveImage, style: { marginRight : "10px"}}, "Crop Selected Area"), 
                React.createElement("button", {className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close ")

                )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initCropper();
    },

    initCropper : function(){
        var self = this;
        var image = document.getElementById('original_image');
        var croppable = false;

        var cropper = new Cropper(image, {
            aspectRatio: 4 / 5,
            autoCropArea: 0.65,
            viewMode: 1,
            ready: function () {
              croppable = true;
            },
        });

        this.imageCropper = cropper;
    },

    saveImage : function(){
        
        console.log("saving image");
        var self = this;

        var croppedCanvas = this.imageCropper.getCroppedCanvas();

        croppedCanvas.toBlob(function (blob) {
            console.log("blob data");
            console.log(blob);

            var formData = new FormData();
            formData.append('files[]', blob, 'profile_photo.jpg');

            $.ajax(Routing.generate('ajax_upload_project_voter_photo', { proId: self.props.proId, proVoterId: self.props.proVoterId }), {
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false }).done(function(res){
                self.props.onSuccess();
                self.props.onHide();
            }).fail(function(err){
                console.log("something went wrong");
            });
        });
    }

});

window.VoterCropModal = VoterCropModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryEditModal = React.createClass({displayName: "VoterTemporaryEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterName: "test",
                    lgcName: "test"
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        console.log("form data");
        console.log(data);

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Voter Information : ", data.voterName, " | LGC : ", data.lgcName)
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-edit-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M", selected: this.state.form.data.gender == 'M'}, "Male"), 
                                        React.createElement("option", {value: "F", selected: this.state.form.data.gender == 'F'}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isCatholic", checked: data.hasPhoto == 1, disabled: "true"}), 
                                        "With Photo", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("br", null), 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isInc", checked: data.hasId == 1, disabled: "true"}), 
                                        "With ID", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("br", null), 

                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isNonVoter", checked: data.isNonVoter != 1, disabled: "true"}), 
                                        "Is Voter",       
                                    React.createElement("span", null)
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadVoter(3, this.props.proVoterId);
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-edit-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-edit-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-edit-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-edit-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });
        
        $("#new-voter-edit-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-edit-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-edit-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-edit-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-edit-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-edit-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-edit-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-edit-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });

        $("#new-voter-edit-form #other_position_select2").on("change", function () {
            self.setFormPropValue("position", $(this).val());
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;
            form.data = res;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = res.cellphoneNo;
            form.data.birthdate = moment(res.birthdate).format('YYYY-MM-DD');
            form.data.gender = res.gender;
            form.data.firstname = res.firstname;
            form.data.middlename = res.middlename;
            form.data.lastname = res.lastname;
            form.data.extName = res.extname;
            form.data.civilStatus = res.civilStatus;
            form.data.bloodtype = res.bloodtype;
            form.data.occupation = res.occupation;
            form.data.religion = res.religion;
            form.data.dialect = res.dialect;
            form.data.ipGroup = res.ipGroup;
            form.data.position = res.position;

            $("#new-voter-edit-form #civil_status_select2").empty()
                .append($("<option/>")
                    .val(res.civilStatus)
                    .text(res.civilStatus))
                .trigger("change");


            $("#new-voter-edit-form #bloodtype_select2").empty()
                .append($("<option/>")
                    .val(res.bloodtype)
                    .text(res.bloodtype))
                .trigger("change");


            $("#new-voter-edit-form #occupation_select2").empty()
                .append($("<option/>")
                    .val(res.occupation)
                    .text(res.occupation))
                .trigger("change");

            $("#new-voter-edit-form #religion_select2").empty()
                .append($("<option/>")
                    .val(res.religion)
                    .text(res.religion))
                .trigger("change");

            $("#new-voter-edit-form #dialect_select2").empty()
                .append($("<option/>")
                    .val(res.dialect)
                    .text(res.dialect))
                .trigger("change");

            $("#new-voter-edit-form #ip_group_select2").empty()
                .append($("<option/>")
                    .val(res.ipGroup)
                    .text(res.ipGroup))
                .trigger("change");

            $("#new-voter-edit-form #voter_group_select2").empty()
                .append($("<option/>")
                    .val(res.voterGroup)
                    .text(res.voterGroup))
                .trigger("change");


            $("#new-voter-edit-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(res.municipalityNo)
                    .text(res.municipalityName))
                .trigger("change");

            $("#new-voter-edit-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(res.brgyNo)
                    .text(res.barangayName))
                .trigger("change");


            $("#new-voter-edit-form #other_position_select2").empty()
            .append($("<option/>")
                .val(res.position)
                .text(res.position))
            .trigger("change");

            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-edit-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-edit-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-edit-form #occupation_select2').val();
        data.religion = $('#new-voter-edit-form #religion_select2').val();
        data.dialect = $('#new-voter-edit-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-edit-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-edit-form #voter_group_select2').val();
        data.position = $('#new-voter-edit-form #other_position_select2').val();
        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_patch_project_temporary_voter", { proVoterId: this.props.proVoterId }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.props.onHide();
            self.notify("Record has been updated.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});

window.VoterTemporaryEditModal = VoterTemporaryEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryCreateModal = React.createClass({displayName: "VoterTemporaryCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                    React.createElement(ControlLabel, null, " Precinct No : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.precinctNo, className: "input-sm form-control", onChange: this.setFormProp, name: "precinctNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 
                        
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });


        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#new-voter-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#new-voter-create-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }
    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, voterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.nodeLabel = res.voterName;
            form.data.nodeOrder = 10;
            form.data.municipalityNo = res.municipalityNo;
            form.data.brgyNo = res.brgyNo;
            form.data.voterId = res.voterId;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? "" : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? "KFC" : res.voterGroup;
            form.data.remarks = self.isEmpty(res.remarks) ? "" : res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");


            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-create-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-create-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-create-form #occupation_select2').val();
        data.religion = $('#new-voter-create-form #religion_select2').val();
        data.dialect = $('#new-voter-create-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-create-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-create-form #voter_group_select2').val();
        data.position = $('#new-voter-create-form #other_position_select2').val();

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_project_temporary_voter"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.VoterTemporaryCreateModal = VoterTemporaryCreateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterJpmModal = React.createClass({displayName: "VoterJpmModal",

    getInitialState : function(){
        return {
            form : {
                data : {
                  municipality_name : "",
                  barangay_name : ""
                },
                errors : []
            },
            loadingText : ""
        };
    },

    getDefaultProps : function(){
        return {
            create : true
        }
    },

    componentDidMount : function(){
        this.initSelect2();
    },

    initSelect2 : function(){
        var self = this;

        $("#form-municipality-select2").select2({
            casesentitive : false,
            placeholder : "Enter Name...",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('ajax_select2_jpm_municipality'),
                data :  function (params) {
                    return {
                        searchText : params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.municipality_name , text: item.municipality_name};
                        })
                    };
                },
            }
        });

        $("#form-barangay-select2").select2({
            casesentitive : false,
            placeholder : "Enter name...",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('ajax_select2_jpm_barangay'),
                data :  function (params) {
                    return {
                        searchText: params.term,
                        municipalityName : $("#form-municipality-select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.barangay_name , text: item.barangay_name};
                        })
                    };
                },
            }
        });

        $("#form-municipality-select2").on("change", function() {
            $("#form-barangay-select2").empty().trigger('change');
            self.setFormPropValue("municipality_name", $(this).val());
        });

        $("#form-barangay-select2").on("change", function() {
            self.setFormPropValue("barangay_name", $(this).val());
        });
    },
    
    setFormPropValue : function(field,value){
        var form = this.state.form;
        form.data[field] = value;
        this.setState({form : form});
    },

    setFormProp : function(e){
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({form : form});
    },

    setErrors : function(errors){
        var form = this.state.form;
        form.errors = errors;

        this.setState({form : form});
    },

    getError : function(field){
        var errors = this.state.form.errors;
        for(var errorField in errors){
            if(errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState : function(field){
        return this.getError(field) != null ? 'error' : '';
    },

    numberWithCommas : function(x) {
        x = parseFloat(x).toFixed(2);
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    isEmpty : function(value){
        return value == null || value == '';
    },

    reset : function(){
      var form = this.state.form;
      form.data.brgyNo = "";
      form.errors = [];

      $("#form-barangay-select2").empty().trigger("change");
      this.setState({details : null , form : form});
    },

    submit : function(e){
        e.preventDefault();
        var data = this.state.form.data;
        var url = 'http://' + window.hostIp + ':8100/voter-report/web/voter/jpm/index.php?municipality_name='+ data.municipality_name + '&barangay_name=' + data.barangay_name;

        this.popupCenter(url, 'JPM LIST', 900, 600);
    },

    popupCenter: function (url, title, w, h) {
        // Fixes dual-screen position                         Most browsers      Firefox  
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;
        var width = 0;
        var height = 0;

        width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

        // Puts focus on the newWindow  
        if (window.focus) {
            newWindow.focus();
        }
    },
    
    render : function(){
        var self = this;
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-form", enctype: "multipart/form-data"}, 
                        React.createElement("div", {class: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "form-municipality-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formBarangayNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "form-barangay-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {class: "row", style: {marginTop:"20px"}}, 
                            React.createElement("div", {className: "text-right col-md-12"}, 
                                React.createElement("button", {type: "button", className: "btn  btn-default", style: {marginRight : "5px"}, onClick: this.props.onHide}, "Close"), 
                                React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.VoterJpmModal = VoterJpmModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SmsTemplateModal = React.createClass({displayName: "SmsTemplateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    templateName : ""
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white bold", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Template Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "sms-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement(FormGroup, {controlId: "formTemplateName", validationState: this.getValidationState('templateName')}, 
                                React.createElement(ControlLabel, null, "Template Name : "), 
                                React.createElement(FormControl, {name: "templateName", className: "form-control input-sm", value: data.templateName, onChange: this.setFormProp}), 
                                React.createElement(HelpBlock, null, this.getError('templateName'))
                            )
                        ), 

                        React.createElement("div", {className: "text-right col-md-12"}, 
                            React.createElement("button", {type: "submit", style: { marginRight: "5px"}, className: "btn blue-madison btn-sm"}, "Submit"), 
                            React.createElement("button", {type: "button", className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close")
                        )
                    )
                )
            )
        );
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;

        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.templateContent = this.props.templateContent;

        self.requestTemplate = $.ajax({
            url : Routing.generate("ajax_post_sms_template"),
            type : "POST",
            data : data
        }).done(function(res){
            
            self.props.notify("Template has been saved...", "teal");
            self.props.onSuccess();
            self.props.onHide();

        }).fail(function(err){
            self.setErrors(err.responseJSON);
            self.props.notify("Form validation failed...", "ruby");
        });
    },


    isEmpty: function (value) {
        return value == null || value == '';
    }
});


window.SmsTemplateModal = SmsTemplateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var SmsModal = React.createClass({displayName: "SmsModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    provinceCode: "",
                    municipalityNo: "",
                    brgyNo: "",
                    voterGroup: "",
                    project: 3,
                    messageBody: "",
                    withCellphone: 1,
                    withNoCellphone: 0,
                    withId: 1,
                    withNoId: 0,
                    isNonVoter: 0,
                    isVoter : 0,
                    withBirthdate: 0,
                    withNoBirthdate: 0,
                    hasDropped: 0,
                    voters: []
                },
                errors: []
            },
            categories: [],
            votersList: [],
            unselected: [],
            maxChars: 160,
            messageSent: 0,
            messageTotal: 0,
            messageQueue: 0,
            sending: false,
            uploadedRecord: 0,
            totalRows: 0,
            percentage: 0,
            showTemplateModal: false,
            templates: []
        };
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-full", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white bold", closeButton: true}, 
                    React.createElement(Modal.Title, null, "SMS Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    this.state.showTemplateModal &&
                        React.createElement(SmsTemplateModal, {
                            show: this.state.showTemplateModal, 
                            onHide: this.closeTemplateModal, 
                            templateContent: this.state.form.data.messageBody, 
                            notify: this.props.notify, 
                            onSuccess: this.loadTemplates}
                        ), 
                    

                    React.createElement("div", {className: "text-right"}, 
                        React.createElement("span", {className: "font-bold "}, " Total Messages : ", this.state.totalRows, " "), 
                        React.createElement("span", {className: "font-bold font-green-seagreen", style: { margin: "0 10px"}}, "Messages Sent : ", this.state.uploadedRecord), 
                        React.createElement("span", {className: "font-bold font-red-sunglo", style: { margin: "0 10px"}}, "On-Queue : ", this.state.totalRows - this.state.uploadedRecord)
                    ), 
                    React.createElement("form", {id: "sms-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "col-md-3"}, 
                            React.createElement(FormGroup, {controlId: "formProvinceCode"}, 
                                React.createElement(ControlLabel, null, " Province : "), 
                                React.createElement("select", {id: "form-province-select2", className: "form-control input-sm"}
                                )
                            ), 
                            React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                React.createElement(ControlLabel, null, " Municipality : "), 
                                React.createElement("select", {id: "form-municipality-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                            ), 
                            React.createElement(FormGroup, {controlId: "formBarangayNo", validationState: this.getValidationState('brgyNo')}, 
                                React.createElement(ControlLabel, null, " Barangay : "), 
                                React.createElement("select", {id: "form-barangay-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('brgyNo'))
                            ), 
                            React.createElement(FormGroup, {controlId: "formVoterGroup", validationState: this.getValidationState('voterGroup')}, 
                                React.createElement(ControlLabel, null, " Position : "), 
                                React.createElement("select", {id: "form-voter-group-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('voterGroup'))
                            ), 

                            React.createElement("div", null, 
                                React.createElement("div", {className: "col-md-12", style: { padding: 0}}, 
                                    React.createElement("label", {className: "control-label"}, "Extra Filters")
                                ), 
                                React.createElement("div", {className: "col-md-6", style: { padding: 0}}, 
                                    React.createElement("div", {className: "mt-checkbox-list"}, 
                                        React.createElement("label", {className: "mt-checkbox"}, 
                                            React.createElement("input", {type: "checkbox", name: "withBirthdate", checked: data.withBirthdate, onChange: this.setFormCheckProp}), 
                                            "Today's BDay", 
                                        React.createElement("span", null)
                                        ), 
                                        React.createElement("label", {className: "mt-checkbox"}, 
                                            React.createElement("input", {type: "checkbox", name: "withNoBirthdate", checked: data.withNoBirthdate, onChange: this.setFormCheckProp}), 
                                            "No Birthdate", 
                                        React.createElement("span", null)
                                        ), 
                                        React.createElement("label", {className: "mt-checkbox"}, 
                                            React.createElement("input", {type: "checkbox", name: "isNonVoter", checked: data.isNonVoter, onChange: this.setFormCheckProp}), 
                                                "Is Non-voter", 
                                            React.createElement("span", null)
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-6", style: { padding: 0}}, 
                                    React.createElement("div", {className: "mt-checkbox-list"}, 
                                        React.createElement("label", {className: "mt-checkbox"}, 
                                            React.createElement("input", {type: "checkbox", name: "withId", checked: data.withId, onChange: this.setFormCheckProp}), 
                                            "With ID / Active", 
                                        React.createElement("span", null)
                                        ), 

                                        React.createElement("label", {className: "mt-checkbox"}, 
                                            React.createElement("input", {type: "checkbox", name: "withNoId", checked: data.withNoId, onChange: this.setFormCheckProp}), 
                                            "No ID", 
                                        React.createElement("span", null)
                                        ), 
                                        React.createElement("label", {className: "mt-checkbox"}, 
                                        React.createElement("input", {type: "checkbox", name: "isVoter", checked: data.isVoter, onChange: this.setFormCheckProp}), 
                                            "Is Voter", 
                                            React.createElement("span", null)
                                        )
                                    )
                                )
                            ), 

                            React.createElement("button", {type: "button", className: "btn btn-sm btn-primary", style: { width: "100%"}, onClick: this.loadVoters}, "Apply")
                        ), 
                        React.createElement("div", {className: "col-md-9"}, 
                            React.createElement("div", {style: { margin: "5px 0 20px 0 "}}, 
                                React.createElement("span", {style: { marginRight: "10px"}}, " Voters : "), 
                                React.createElement("div", {className: "btn-group", style: { marginTop: "-6px"}}, 
                                    React.createElement("button", {type: "button", onClick: this.deselectAll, className: "btn btn-xs grey-steel"}, "Deselect All"), 
                                    React.createElement("button", {type: "button", onClick: this.selectAll, className: "btn btn-xs green-turquoise"}, "Select All")
                                )
                            ), 

                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-6 remove-padding"}, 
                                React.createElement("div", null, " Available : ", this.state.unselected.length)
                            ), 
                            React.createElement("div", {className: "col-md-6 "}, 
                                React.createElement("div", {style: { marginLeft: '18px'}}, " Selected :  ", data.voters.length)
                            ), 
                            React.createElement(FormGroup, {controlId: "formProfiles", validationState: this.getValidationState('students')}, 
                                React.createElement("select", {multiple: true, ref: "selectBox", className: "searchable", id: "voters", name: "voters[]"}, 
                                    this.state.votersList.map(function (item) {
                                        var withoutNumber = self.isEmpty(item.cellphone);
                                        var bdayLabel = self.isEmpty(item.birthdate) ? "NO BDAY" : item.birthdate.split(" ")[0];
                                        var cpLabel = withoutNumber ? "NO CP" : item.cellphone;

                                        return (React.createElement("option", {key: item.pro_voter_id, disabled: withoutNumber, value: item.pro_voter_id}, item.voter_name, " - ", item.voter_group, " (", cpLabel, " , ", bdayLabel, ") "))
                                    })
                                ), 
                                React.createElement("div", {className: "text-right"}, 
                                    React.createElement(HelpBlock, null, this.getError('voters'))
                                )
                            ), 

                            React.createElement(FormGroup, {controlId: "formMessageBody", validationState: this.getValidationState('messageBody')}, 
                                React.createElement("div", {className: "row", style: { marginBottom: "10px"}}, 
                                    React.createElement("div", {className: "col-md-9"}, 
                                        React.createElement(ControlLabel, null, "Your Message : ")
                                    ), 
                                    React.createElement("div", {className: "col-md-3 text-right"}, 
                                        React.createElement("select", {className: "form-control input-sm", onChange: self.handleTemplateChange}, 
                                            React.createElement("option", {value: ""}, " -- Select Template -- "), 
                                            this.state.templates.map(function (item) {
                                                return (React.createElement("option", {value: item.templateContent, key: "tempalte" + item.id}, item.templateName));
                                            })
                                        )
                                    )
                                ), 

                                React.createElement(FormControl, {componentClass: "textarea", disabled: this.state.sending, rows: "5", name: "messageBody", className: "form-control input-sm", value: data.messageBody, onChange: this.setMessageBody}), 
                                React.createElement("small", {style: { fontSize: "12px"}}, 
                                    React.createElement("span", null, 
                                        "You may use the ff. keywords({name1}, {name2}, {name3}, {pos}, {precinctNo}, {brgy}, {mun}) to add additional information on your message."
                                    )
                                ), 
                                React.createElement("div", {className: "text-right"}, 
                                    React.createElement("label", null, "Letter Count : ", data.messageBody.length, " ")
                                ), 
                                React.createElement(HelpBlock, null, this.getError('messageBody'))
                            ), 
                            React.createElement("div", null, 
                                React.createElement("label", null, "Sent Logs"), 
                                React.createElement("div", {style: { padding: "5px", fontSize: "14px", overflow: "scroll", resize: "none", width: "100%", height: "130px", backgroundColor: "#D4D4D4"}, id: "message_logs"}

                                )
                            )
                        ), 

                        React.createElement("div", {className: "text-right col-md-12", style: { marginTop: "20px"}}, 
                            React.createElement("button", {type: "button", style: { marginRight: "5px"}, onClick: this.openTemplateModal, className: "btn blue-madison btn-sm"}, "Save Template"), 
                            !this.state.sending && React.createElement("button", {type: "submit", style: { marginRight: "5px"}, className: "btn blue-madison btn-sm"}, "Submit"), 
                            this.state.sending && React.createElement("button", {type: "submit", disabled: true, style: { marginRight: "5px"}, className: "btn blue-madison btn-sm"}, React.createElement("i", {className: "fa fa-spinner fa-pulse fa-1x fa-fw"}), " Sending Messages. Please wait..."), 
                            React.createElement("button", {type: "button", className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.initMultiSelect();
        this.loadUser(window.userId);
        this.loadTemplates();
    },

    handleTemplateChange: function (e) {
        var form = this.state.form;
        form.data.messageBody = e.target.value;
        this.setState({ form: form });
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    loadTemplates: function () {
        var self = this;

        self.requestTemplates = $.ajax({
            url: Routing.generate("ajax_get_sms_template"),
            type: "GET"
        }).done(function (res) {
            self.setState({ templates: res });
        });
    },

    initMultiSelect: function () {

        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setVoters($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setVoters($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });
    },

    loadVoters: function () {
        var self = this;
        var data = self.state.form.data;
        self.requestVoters = $.ajax({
            url: Routing.generate('ajax_sms_multiselect_voters', data),
            type: "GET"
        }).done(function (res) {
            self.setState({ votersList: res, unselected: res });
            self.refreshSelectBox();
        });
    },

    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setVoters: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.voters = selected;
            unselected = this.state.votersList.filter(function (item) {
                return selected.indexOf(item.voter_id) == -1;
            });
        } else {
            form.data.voters = [];
            unselected = this.state.votersList;
        }

        this.setState({ form: form, unselected: unselected });
    },

    initSelect2: function () {
        var self = this;

        $("#form-province-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-municipality-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: $('#form-province-select2').val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-barangay-select2").select2({
            casesentitive: false,
            placeholder: "Enter name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: $('#form-province-select2').val(),
                        municipalityNo: $("#form-municipality-select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Category",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });



        $("#form-province-select2").on("change", function () {
            $("#form-municipality-select2").empty().trigger('change');
            $("#form-barangay-select2").empty().trigger('change');
            self.setFormPropValue("provinceCode", $(this).val());
        });

        $("#form-municipality-select2").on("change", function () {
            $("#form-barangay-select2").empty().trigger('change');
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#form-barangay-select2").on("change", function () {
            var provinceCode = $("#form-province-select2").val();
            var municipalityNo = $("#form-municipality-select2").val();
            var brgyNo = $("#form-barangay-select2").val();

            self.setFormPropValue("brgyNo", $(this).val());
        });

        $("#form-voter-group-select2").on("change", function () {
            self.setFormPropValue("voterGroup", $(this).val());
        });
    },

    reinitSelect2: function () {
        var self = this;
        var provinceCode = self.state.user.province.provinceCode;

        self.requestProvince = $.ajax({
            url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
            type: "GET"
        }).done(function (res) {
            $("#form-province-select2").empty()
                .append($("<option/>")
                    .val(res.province_code)
                    .text(res.name))
                .trigger("change");
        });
    },

    setMessageBody: function (e) {
        var form = this.state.form;

        // if (e.target.value.length > this.state.maxChars)
        //     form.data.messageBody = e.target.value.substring(0, this.state.maxChars);
        // else
            form.data.messageBody = e.target.value;

        this.setState({ form: form });
    },

    openTemplateModal: function () {
        if (!this.isEmpty(this.state.form.data.messageBody))
            this.setState({ showTemplateModal: true });
        else
            alert("Opps! Cannot save an empty template...");
    },

    closeTemplateModal: function () {
        this.setState({ showTemplateModal: false });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;

        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        var lastResponseLength = false;

        self.requestValidation = $.ajax({
            url: Routing.generate("ajax_post_sms"),
            type: "POST",
            data: data,
            xhrFields: {
                onprogress: function (e) {
                    var progressResponse;
                    var response = e.currentTarget.response;

                    if (lastResponseLength === false) {
                        progressResponse = response;
                        lastResponseLength = response.length;
                    }
                    else {
                        progressResponse = response.substring(lastResponseLength);
                        lastResponseLength = response.length;
                    }

                    if (self.isJsonString(progressResponse)) {
                        progressResponse = JSON.parse(progressResponse);
                        var row = progressResponse.currentRow;

                        $('#message_logs').prepend("<div> " + progressResponse.currentRowIndex + ". Message to " + row.voter_name + (progressResponse.status ? " was sent : " : " has failed : ") + progressResponse.message + "</div>")
                        self.setState({ uploadedRecord: progressResponse.currentRowIndex, totalRows: progressResponse.totalRows, percentage: progressResponse.percentage });
                    } else {
                        // invalid json data
                    }
                }
            }
        }).done(function () {
            self.reset();
        }).fail(function (err) {
            if (err.status == '401') {
                self.props.notify("You dont have the permission to perform this action.", "ruby");
            } else if (err.status == '400') {
                self.props.notify("Form Validation Failed.", "ruby");
            }
            self.setErrors(err.responseJSON)
        }).always(function () {
            self.setState({ sending: false });

        });

        $('#message_logs').empty();
        self.setState({ sending: true });
    },

    isJsonString: function (str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.deselectAll();
        this.setState({ form: form });
    }

});


window.SmsModal = SmsModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var DswdSmsModal = React.createClass({displayName: "DswdSmsModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    address: "",
                    sex: "",
                    remarks: "",
                    messageBody: "",
                    voters: []
                },
                errors: []
            },
            categories: [],
            votersList: [],
            unselected: [],
            maxChars: 160,
            messageSent: 0,
            messageTotal: 0,
            messageQueue: 0,
            sending: false,
            uploadedRecord: 0,
            totalRows: 0,
            percentage: 0,
            showTemplateModal: false,
            templates: []
        };
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-full", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white bold", closeButton: true}, 
                    React.createElement(Modal.Title, null, "DSWD SMS Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    this.state.showTemplateModal &&
                        React.createElement(SmsTemplateModal, {
                            show: this.state.showTemplateModal, 
                            onHide: this.closeTemplateModal, 
                            templateContent: this.state.form.data.messageBody, 
                            notify: this.props.notify, 
                            onSuccess: this.loadTemplates}
                        ), 
                    

                    React.createElement("div", {className: "text-right"}, 
                        React.createElement("span", {className: "font-bold "}, " Total Messages : ", this.state.totalRows, " "), 
                        React.createElement("span", {className: "font-bold font-green-seagreen", style: { margin: "0 10px"}}, "Messages Sent : ", this.state.uploadedRecord), 
                        React.createElement("span", {className: "font-bold font-red-sunglo", style: { margin: "0 10px"}}, "On-Queue : ", this.state.totalRows - this.state.uploadedRecord)
                    ), 
                    React.createElement("form", {id: "sms-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "col-md-3"}, 
                            React.createElement(FormGroup, {controlId: "formAddress", validationState: this.getValidationState('address')}, 
                                React.createElement(ControlLabel, null, " Barangay : "), 
                                React.createElement("select", {id: "form-address-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('address'))
                            ), 
                            React.createElement(FormGroup, {controlId: "formSex", validationState: this.getValidationState('sex')}, 
                                React.createElement(ControlLabel, null, " Gender : "), 
                                React.createElement("select", {id: "form-sex-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('sex'))
                            ), 
                            React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                React.createElement(ControlLabel, null, " Remarks : "), 
                                React.createElement("select", {id: "form-remarks-select2", className: "form-control input-sm"}
                                ), 
                                React.createElement(HelpBlock, null, this.getError('remarks'))
                            ), 

                            React.createElement("button", {type: "button", className: "btn btn-sm btn-primary", style: { width: "100%"}, onClick: this.loadVoters}, "Apply")
                        ), 
                        React.createElement("div", {className: "col-md-9"}, 
                            React.createElement("div", {style: { margin: "5px 0 20px 0 "}}, 
                                React.createElement("span", {style: { marginRight: "10px"}}, " Voters : "), 
                                React.createElement("div", {className: "btn-group", style: { marginTop: "-6px"}}, 
                                    React.createElement("button", {type: "button", onClick: this.deselectAll, className: "btn btn-xs grey-steel"}, "Deselect All"), 
                                    React.createElement("button", {type: "button", onClick: this.selectAll, className: "btn btn-xs green-turquoise"}, "Select All")
                                )
                            ), 

                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-6 remove-padding"}, 
                                React.createElement("div", null, " Available : ", this.state.unselected.length)
                            ), 
                            React.createElement("div", {className: "col-md-6 "}, 
                                React.createElement("div", {style: { marginLeft: '18px'}}, " Selected :  ", data.voters.length)
                            ), 
                            React.createElement(FormGroup, {controlId: "formProfiles", validationState: this.getValidationState('students')}, 
                                React.createElement("select", {multiple: true, ref: "selectBox", className: "searchable", id: "voters", name: "voters[]"}, 
                                    this.state.votersList.map(function (item) {
                                        var withoutNumber = self.isEmpty(item.contact_no);
                                        return (React.createElement("option", {key: item.id, disabled: withoutNumber, value: item.id}, item.firstname, " ", item.middlename, " ", item.lastname, "- ", item.remarks, " (", item.contact_no, ") "))
                                    })
                                ), 
                                React.createElement("div", {className: "text-right"}, 
                                    React.createElement(HelpBlock, null, this.getError('voters'))
                                )
                            ), 

                            React.createElement(FormGroup, {controlId: "formMessageBody", validationState: this.getValidationState('messageBody')}, 
                                React.createElement("div", {className: "row", style: { marginBottom: "10px"}}, 
                                    React.createElement("div", {className: "col-md-9"}, 
                                        React.createElement(ControlLabel, null, "Your Message : ")
                                    ), 
                                    React.createElement("div", {className: "col-md-3 text-right"}, 
                                        React.createElement("select", {className: "form-control input-sm", onChange: self.handleTemplateChange}, 
                                            React.createElement("option", {value: ""}, " -- Select Template -- "), 
                                            this.state.templates.map(function (item) {
                                                return (React.createElement("option", {value: item.templateContent, key: "tempalte" + item.id}, item.templateName));
                                            })
                                        )
                                    )
                                ), 

                                React.createElement(FormControl, {componentClass: "textarea", disabled: this.state.sending, rows: "5", name: "messageBody", className: "form-control input-sm", value: data.messageBody, onChange: this.setMessageBody}), 
                                React.createElement("small", {style: { fontSize: "12px"}}, 
                                    React.createElement("span", null, 
                                        "You may use the ff. keywords({firstname},{middlename},{lastname}, {address}, {sex}, {age}, {remarks}) to add additional information on your message."
                                    )
                                ), 
                                React.createElement("div", {className: "text-right"}, 
                                    React.createElement("label", null, "Letter Count : ", data.messageBody.length + " / " + self.state.maxChars, " ")
                                ), 
                                React.createElement(HelpBlock, null, this.getError('messageBody'))
                            ), 
                            React.createElement("div", null, 
                                React.createElement("label", null, "Sent Logs"), 
                                React.createElement("div", {style: { padding: "5px", fontSize: "14px", overflow: "scroll", resize: "none", width: "100%", height: "130px", backgroundColor: "#D4D4D4"}, id: "message_logs"}

                                )
                            )
                        ), 

                        React.createElement("div", {className: "text-right col-md-12", style: { marginTop: "20px"}}, 
                            React.createElement("button", {type: "button", style: { marginRight: "5px"}, onClick: this.openTemplateModal, className: "btn blue-madison btn-sm"}, "Save Template"), 
                            !this.state.sending && React.createElement("button", {type: "submit", style: { marginRight: "5px"}, className: "btn blue-madison btn-sm"}, "Submit"), 
                            this.state.sending && React.createElement("button", {type: "submit", disabled: true, style: { marginRight: "5px"}, className: "btn blue-madison btn-sm"}, React.createElement("i", {className: "fa fa-spinner fa-pulse fa-1x fa-fw"}), " Sending Messages. Please wait..."), 
                            React.createElement("button", {type: "button", className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.initMultiSelect();
        this.loadUser(window.userId);
        this.loadTemplates();
    },

    handleTemplateChange: function (e) {
        var form = this.state.form;
        form.data.messageBody = e.target.value;
        this.setState({ form: form });
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    loadTemplates: function () {
        var self = this;

        self.requestTemplates = $.ajax({
            url: Routing.generate("ajax_get_sms_template"),
            type: "GET"
        }).done(function (res) {
            self.setState({ templates: res });
        });
    },

    initMultiSelect: function () {

        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' class='form-control input-sm' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setVoters($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setVoters($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });
    },

    loadVoters: function () {
        var self = this;
        var data = self.state.form.data;
        self.requestVoters = $.ajax({
            url: Routing.generate('ajax_sms_multiselect_dswd_member', data),
            type: "GET"
        }).done(function (res) {
            self.setState({ votersList: res, unselected: res });
            self.refreshSelectBox();
        });
    },

    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setVoters: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.voters = selected;
            unselected = this.state.votersList.filter(function (item) {
                return selected.indexOf(item.voter_id) == -1;
            });
        } else {
            form.data.voters = [];
            unselected = this.state.votersList;
        }

        this.setState({ form: form, unselected: unselected });
    },

    initSelect2: function () {
        var self = this;

        $("#form-address-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_dswd_address'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.address, text: item.address };
                        })
                    };
                },
            }
        });

        $("#form-sex-select2").select2({
            casesentitive: false,
            placeholder: "Enter gender...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_dswd_sex'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.sex, text: item.sex };
                        })
                    };
                },
            }
        });

        $("#form-remarks-select2").select2({
            casesentitive: false,
            placeholder: "Enter remarks...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_dswd_remarks'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.remarks, text: item.remarks };
                        })
                    };
                },
            }
        });

        $("#form-address-select2").on("change", function () {
            self.setFormPropValue("address", $(this).val());
        });

        $("#form-sex-select2").on("change", function () {
            self.setFormPropValue("sex", $(this).val());
        });

        $("#form-remarks-select2").on("change", function () {
            self.setFormPropValue("remarks", $(this).val());
        });
    },

    setMessageBody: function (e) {
        var form = this.state.form;

        if (e.target.value.length > this.state.maxChars)
            form.data.messageBody = e.target.value.substring(0, this.state.maxChars);
        else
            form.data.messageBody = e.target.value;

        this.setState({ form: form });
    },

    openTemplateModal: function () {
        if (!this.isEmpty(this.state.form.data.messageBody))
            this.setState({ showTemplateModal: true });
        else
            alert("Opps! Cannot save an empty template...");
    },

    closeTemplateModal: function () {
        this.setState({ showTemplateModal: false });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;

        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        var lastResponseLength = false;

        self.requestValidation = $.ajax({
            url: Routing.generate("ajax_post_dswd_sms"),
            type: "POST",
            data: data,
            xhrFields: {
                onprogress: function (e) {
                    var progressResponse;
                    var response = e.currentTarget.response;

                    if (lastResponseLength === false) {
                        progressResponse = response;
                        lastResponseLength = response.length;
                    }
                    else {
                        progressResponse = response.substring(lastResponseLength);
                        lastResponseLength = response.length;
                    }

                    if (self.isJsonString(progressResponse)) {
                        progressResponse = JSON.parse(progressResponse);
                        var row = progressResponse.currentRow;

                        $('#message_logs').prepend("<div> " + progressResponse.currentRowIndex + ". Message to " + row.firstname + (progressResponse.status ? " was sent : " : " has failed : ") + progressResponse.message + "</div>")
                        self.setState({ uploadedRecord: progressResponse.currentRowIndex, totalRows: progressResponse.totalRows, percentage: progressResponse.percentage });
                    } else {
                        // invalid json data
                    }
                }
            }
        }).done(function () {
            self.reset();
        }).fail(function (err) {
            if (err.status == '401') {
                self.props.notify("You dont have the permission to perform this action.", "ruby");
            } else if (err.status == '400') {
                self.props.notify("Form Validation Failed.", "ruby");
            }
            self.setErrors(err.responseJSON)
        }).always(function () {
            self.setState({ sending: false });

        });

        $('#message_logs').empty();
        self.setState({ sending: true });
    },

    isJsonString: function (str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.deselectAll();
        this.setState({ form: form });
    }

});


window.DswdSmsModal = DswdSmsModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterCreateAssistanceModal = React.createClass({displayName: "VoterCreateAssistanceModal",

    getInitialState : function(){
        return {
            form : {
                data : {
                    voterId  : 0,
                    description : "",
                    remarks : "",
                    amount : 0,
                    category : "",
                    status : "",
                    issuedAt : moment(new Date()).format('YYYY-MM-DD')
                },
                errors : []
            }
        };
    },

    render : function(){
     
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Assisatance Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-updated-form"}, 
                        React.createElement("div", {className: "col-md-4"}, 
                            React.createElement(FormGroup, {controlId: "formIssuedAt", validationState: this.getValidationState('issuedAt')}, 
                                React.createElement(ControlLabel, null, "Issued At : "), 
                                React.createElement(FormControl, {type: "date", bsClass: "form-control input-sm", name: "issuedAt", value: this.state.form.data.issuedAt, onChange: this.setFormProp}), 
                                React.createElement(HelpBlock, null, this.getError('issuedAt'))
                            )
                        ), 
                        React.createElement("div", {className: "clearfix"}), 
                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement(FormGroup, {controlId: "formCategory", validationState: this.getValidationState('category')}, 
                                React.createElement(ControlLabel, null, "Category : "), 
                                React.createElement("select", {id: "category-select2", className: "form-control input-sm"}, 
                                    React.createElement("option", {value: ""}, " ")
                                ), 
                                React.createElement(HelpBlock, null, this.getError('category'))
                            )
                        ), 
                        React.createElement("div", {className: "col-md-6"}, 
                            React.createElement(FormGroup, {controlId: "formAmount", validationState: this.getValidationState('amount')}, 
                                React.createElement(ControlLabel, null, " Amount : "), 
                                React.createElement(FormControl, {bsClass: "form-control input-sm", name: "amount", value: this.state.form.data.amount, onChange: this.setFormProp}), 
                                React.createElement(HelpBlock, null, this.getError('amount'))
                            )
                        ), 
                        
                        React.createElement("div", {className: "clearfix"}), 
                        
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement(FormGroup, {controlId: "formDescription", validationState: this.getValidationState('description')}, 
                                React.createElement(ControlLabel, null, " Description : "), 
                                React.createElement(FormControl, {componentClass: "textarea", rows: "5", bsClass: "form-control input-sm", name: "description", value: this.state.form.data.description, onChange: this.setFormProp}), 
                                React.createElement(HelpBlock, null, this.getError('description'))
                            )
                        ), 
                        
                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right col-md-12"}, 
                            React.createElement("button", {type: "button", className: "btn  btn-default", style: {marginRight : "5px"}, onClick: this.props.onHide}, "Close"), 
                            React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit")
                        )
                    )
                )
            )
        );
    },

    componentDidMount : function(){
       this.initSelect2();
    },
    
    initSelect2 : function(){
        $("#category-select2").select2({
            casesentitive : false,
            placeholder : "Enter Name",
            width : '100%',
            allowClear : true,
            tags : true,
            containerCssClass : ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax : {
                url : Routing.generate('ajax_select2_assistance_category'),
                data :  function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return {id:item.category,text: item.category};
                        })
                    };
                },
            }
        });

        var self = this;
        
        $("#category-select2").on("change", function() {
            self.setFieldValue("category",$(this).val());
        });
    },

    reinitSelect2 : function(){
        var category = this.state.form.data.category;
        $("#category-select2").empty()
            .append($("<option/>")
                .val(category)
                .text(category))
            .trigger("change");
    },

    setFormProp : function(e){
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({form : form});
    },

    setFieldValue : function(field,value){
        var form = this.state.form;
        form.data[field] = value;
        this.setState({form : form});
    },

    setErrors : function(errors){
        var form = this.state.form;
        form.errors = errors;

        this.setState({form : form});
    },

    getError : function(field){
        var errors = this.state.form.errors;
        for(var errorField in errors){
            if(errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState : function(field){
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty : function(value){
        return value == null || value == '';
    },

    submit : function(e){
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        self.requestPost = $.ajax({
            url : Routing.generate('ajax_post_voter_assistance',{voterId : this.props.voterId}),
            type : "POST",
            data : (data)
        }).done(function(res){
            self.props.notify("Assistance record has been saved.","ruby");
            self.props.onHide();
        }).fail(function(err){
            if(err.status == '401'){
                self.props.notify("You dont have the permission to update this record.","ruby");
            }else{
                self.props.notify("Form Validation Failed.","ruby");
            }
            self.setErrors(err.responseJSON);
        });
    }
});

window.VoterCreateAssistanceModal = VoterCreateAssistanceModal;
var VoterAssistanceDatatable = React.createClass({displayName: "VoterAssistanceDatatable",

    getInitialState : function(){
      return {
          showCreateModal : false,
          typingTimer : null,
          doneTypingInterval : 1500
      }
    },

    componentDidMount : function(){
        this.gridTable();
    },
   
    gridTable : function(){
        var self = this;
        var grid = new Datatable();

        var voter_table = $("#voter_assistance_datatable");

        grid.init({
            src: voter_table,
            dataTable : {
                "bState" : true,
                "autoWidth": true,
                "serverSide": true,
                "processing" : true,
                "deferRender" : true,
                "dom": '<"top"i>rt<"bottom"lp><"clear">',
                "ajax" : {
                    "url" : Routing.generate('ajax_datatable_voter_assistance',{ voterId : self.props.voterId }),
                    "type" : "GET"
                },
                columnDefs : [
                    {
                        'className': 'text-center valign-middle',
                        'orderable' : false,
                        'targets' : [1,2,3,4,5]
                    }
                ],
                "order": [
                    [0, "desc"]
                ],
                "columns" : [
                    {
                        "data" : null,
                        "className" : "text-center",
                        "width" : 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data" : "description",
                        "className" : "text-left"
                    },
                    {
                        "data" : "category",
                        "width" : "150px"
                    },
                    {
                        "data" : "amount",
                        "className" : "text-right",
                        "width" : "100px",
                        "render" : function(data){
                            return self.numberWithCommas(data,2);
                        }
                    },
                    {
                        "data" : "issued_at",
                        "width" : "140px",
                        "className" : "text-center",
                        "render" : function(data){
                            return moment(data).format('MMM DD YYYY')
                        }
                    },
                    {
                        "className" : "text-center",
                        "width" : 20,
                        "render" : function(){
                            var btnGroup = '<button class="btn btn-xs btn-danger remove-btn"><i class="fa fa-trash"></i></button>';
                            return btnGroup;
                        }
                    }
                ]
            }

        });

        voter_table.on( 'click', '.remove-btn', function () {
            var data =  grid.getDataTable().row($(this).parents('tr') ).data();
            self.remove(data.ast_id);
        });

        self.grid = grid;
    },
    
    remove : function(astId){
        var self = this;

        if(confirm("Are you sure you want to removing this assistance?")){
            self.requestRemove = $.ajax({
                url : Routing.generate("ajax_delete_voter_assistance",{astId : astId}),
                type : "DELETE"
            }).done(function(res){
                self.reload();
                self.props.notify("Assistance has been removed.","teal");
            }).fail(function(err){
                if(err.status == '401'){
                    self.props.notify("You dont have the permission to perform this action.","ruby");
                }else if(err.status == '400'){
                    self.props.notify("Form Validation Failed.","ruby");
                    self.setErrors(err.responseJSON);
                }
            });
        }
    },

    reload : function(){
        this.grid.getDataTable().ajax.reload();
    },

    openCreateModal : function(){
        this.setState({showCreateModal : true});
    },

    closeCreateModal : function(){
        this.setState({showCreateModal : false});
        this.reload();
    },

    numberWithCommas : function(x,scale) {
        x = parseFloat(x).toFixed(scale);
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    render : function(){
        return (
            React.createElement("div", {className: "col-md-12"}, 
                React.createElement("button", {className: "btn btn-sm btn-primary", onClick: this.openCreateModal}, "Add Assistance"), 
                
                    this.state.showCreateModal &&
                    React.createElement(VoterCreateAssistanceModal, {
                        voterId: this.props.voterId, 
                        show: this.state.showCreateModal, 
                        onHide: this.closeCreateModal, 
                        notify: this.props.notify}
                    ), 
                
                React.createElement("div", {className: "table-container"}, 
                    React.createElement("div", {className: "table-actions-wrapper"}, 
                        React.createElement("span", null, " ")
                    ), 
                    React.createElement("table", {id: "voter_assistance_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Description"), 
                                React.createElement("th", null, "Category"), 
                                React.createElement("th", null, "Amount"), 
                                React.createElement("th", null, "Issued Date"), 
                                React.createElement("th", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.VoterAssistanceDatatable = VoterAssistanceDatatable;
var VoterHistoryDatatable = React.createClass({displayName: "VoterHistoryDatatable",

    getInitialState : function(){
      return {
          typingTimer : null,
          doneTypingInterval : 1500
      }
    },

    componentDidMount : function(){
        this.gridTable();
    },
   
    gridTable : function(){
        var self = this;
        var grid = new Datatable();

        var voter_table = $("#voter_history_table");

        grid.init({
            src: voter_table,
            dataTable : {
                "bState" : true,
                "autoWidth": true,
                "serverSide": true,
                "processing" : true,
                "deferRender" : true,
                "dom": '<"top">rt<"bottom"lp><"clear">',
                "ajax" : {
                    "url" : Routing.generate('ajax_datatable_voter_history',{ voterId : self.props.voterId }),
                    "type" : "GET"
                },
                columnDefs : [
                    {
                        'className': 'text-center valign-middle',
                        'orderable' : false,
                        'targets' : [0,1,2,3,4,5,6,7,8]
                    }
                ],
                "order": [
                    [9, "desc"]
                ],
                "columns" : [
                    {
                        "data" : null,
                        "className" : "text-center",
                        "width" : 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data" : "precinct_no",
                        "className" : "text-center",
                        "width" : "80px"
                    },
                    {
                        "data" : "municipality_name",
                        "width" : "150px"
                    },
                    {
                        "data" : "barangay_name",
                        "className" : "text-center",
                        "width" : "100px"
                    },
                    {
                        "data" : null,
                        "className" : "text-center",
                        "width" : "30px",
                        "render" : function(data,type,row){
                            var voterStatus  = '';
                            
                            voterStatus += row.has_ast == 1 ? "*" : "";
                            voterStatus += row.has_a == 1 ? "A" : "";
                            voterStatus += row.has_b == 1 ? "B" : "";
                            voterStatus += row.has_c == 1 ? "C" : "";

                            return voterStatus;
                        }
                    },
                    {
                        "data" : null,
                        "className" : "text-center",
                        "width" : "10px",
                        "render" : function(data,type,row){
                            var voterClass  = '';
                            
                            voterClass += row.is_1 == 1 ?  "1," : "";
                            voterClass += row.is_2 == 1 ?  "2," : "";
                            voterClass += row.is_3 == 1 ?  "3," : "";
                            voterClass += row.is_4 == 1 ?  "4," : "";
                            voterClass += row.is_5 == 1 ?  "5," : "";
                            voterClass += row.is_6 == 1 ?  "6," : "";
                            voterClass += row.is_7 == 1 ?  "7,"  : "";
                            voterClass = voterClass.slice(0,voterClass.lastIndexOf(","));

                            return voterClass;
                        }
                    },
                    
                    {
                        "data" : "voted_2017",
                        "className" : "text-center",
                        "width" : "10px",
                        "render" : function(data,type,row){
                            return data == 1 ? "YES" : "NO";
                        }
                    },
                    {
                        "data" : "cellphone_no",
                        "className" : "text-center",
                        "width" : "90px"
                    },
                    {
                        "data" : "created_by",
                        "width" : "140px",
                        "className" : "text-center"
                    },
                    {
                        "data" : "created_at",
                        "width" : "140px",
                        "className" : "text-center",
                        "render" : function(data){
                            return moment(data).format('MM/DD/YYYY hh:mm A')
                        }
                    }
                ]
            }

        });

        voter_table.on( 'click', '.edit-btn', function () {
            var data =  grid.getDataTable().row($(this).parents('tr') ).data();
            self.edit(data.voter_id);
        });

        voter_table.on( 'click', '.view-btn', function () {
            var data =  grid.getDataTable().row($(this).parents('tr') ).data();
            self.view(data.voter_id);
        });


        self.grid = grid;
    },

    reload : function(){
        this.grid.getDataTable().ajax.reload();
    },

    render : function(){
        return (
            React.createElement("div", {className: "col-md-12"}, 
                React.createElement("div", {className: "table-container"}, 
                    React.createElement("div", {className: "table-actions-wrapper"}, 
                        React.createElement("span", null, " ")
                    ), 
                    React.createElement("table", {id: "voter_history_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Precinct"), 
                                React.createElement("th", null, "Mun"), 
                                React.createElement("th", null, "Brgy"), 
                                React.createElement("th", null, "Stat"), 
                                React.createElement("th", null, "Tag"), 
                                React.createElement("th", null, "16"), 
                                React.createElement("th", null, "CP"), 
                                React.createElement("th", null, "Updated by"), 
                                React.createElement("th", null, "Updated At")
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.VoterHistoryDatatable = VoterHistoryDatatable;
var Modal = ReactBootstrap.Modal;
var Tab = ReactBootstrap.Tab;
var Tabs = ReactBootstrap.Tabs;
var Nav = ReactBootstrap.Nav;
var NavItem = ReactBootstrap.NavItem;

var VoterViewModal = React.createClass({displayName: "VoterViewModal",

    getInitialState: function () {
        return {
            voterName: "",
            birthdate: "",
            active: "assistance"
        };
    },

    render: function () {
        var photoUrl = window.imgUrl + this.props.proId + '_' + this.state.proIdCode + "?" + new Date().getTime();
        var self = this;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, bsSize: "lg", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Details")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    React.createElement("div", {className: "row voter-view-header"}, 
                        React.createElement("div", {className: "col-md-12"}, 

                            React.createElement("div", {className: "col-md-12", style: { marginBottom: "15px"}}, 
                                React.createElement("div", null, React.createElement("em", null, React.createElement("small", null, "Last Updated : ", moment(this.state.updatedAt).format('MMM DD, YYYY hh:mm: A')))), 
                                React.createElement("div", null, React.createElement("em", null, React.createElement("small", null, "Updated By : ", this.state.updatedBy)))
                            ), 

                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-3"}, 
                              
                            //     <div>
                            //     <img onClick={this.openCropModal}  src={photoUrl} className="img-responsive" alt="" />
                            // </div>

                              
                                
                                    /* <div>
                                     <img id="sample_image" style={{maxWidth: "100%"}} src={photoUrl}/>
                                 </div>*/
                                

                                React.createElement("div", null, 
                                    React.createElement("img", {src: photoUrl, className: "img-responsive", alt: ""})
                                ), 

                                React.createElement("div", {className: "profile-userbuttons", style: { marginTop: "10px"}}, 
                                    React.createElement("span", {className: "btn col-md-12 green btn-sm fileinput-button "}, 
                                        React.createElement("span", null, " Change Photo"), 
                                        React.createElement("input", {id: "voter-photo-upload", type: "file", name: "files[]", "data-url": Routing.generate('ajax_upload_project_voter_photo', { proId: this.props.proId, voterId: this.props.voterId }), multiple: false})
                                    )
                                ), 

                                
                                    // <div>
                                    //     <button className="btn btn-primary col-md-12" onClick={this.openCropModal} style={{ "marginTop": "10px" }}>Crop Image</button>
                                    // </div>
                                

                                this.isEmpty(this.state.proIdCode) && (
                                    React.createElement("div", null, 
                                        React.createElement("button", {className: "btn btn-primary col-md-12", onClick: this.generateIdNo, style: { "marginTop": "10px"}}, "Generate ID No")
                                    )
                                ), 
                                this.state.hasId && (
                                    React.createElement("div", null, 
                                        React.createElement("button", {className: "btn btn-info col-md-12", onClick: this.resetId, style: { "marginTop": "10px"}}, "Reprint ID")
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-5"}, 
                                React.createElement("div", null, React.createElement("strong", null, "Name : "), " ", this.state.voterName, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Birthdate : "), " ", this.state.birthdate == "" ? "- - - -" : this.state.birthdate, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Municipality :"), " ", this.state.municipalityName, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Barangay :"), " ", this.state.barangayName, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Voter No :"), " ", this.state.voterNo, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Precinct No :"), " ", this.state.precinctNo, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Clustered Precinct :"), " ", this.state.clusteredPrecinct, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Voting Center :"), " ", this.state.votingCenter, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Assigned Precinct No :"), " ", this.state.precinctNo, " "), 
                                React.createElement("br", null), 
                                React.createElement("div", null, React.createElement("strong", null, "Cellphone No :"), " ", this.state.cellphoneNo, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Address :"), " ", this.state.address, " "), 
                                React.createElement("br", null), 

                                React.createElement("div", null, React.createElement("strong", null, "Activated Reason : "), " ",  self.isEmpty(this.state.activatedReason) ? "..." : this.state.activatedReason, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Activated At : "), " ",  self.isEmpty(this.state.activatedAt) ? "..." : this.state.activatedAt, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Activated By : "), " ",  self.isEmpty(this.state.activatedBy) ? "..." : this.state.activatedBy, " "), 
                                React.createElement("br", null), 

                                React.createElement("div", null, React.createElement("strong", null, "Block Reason : "), " ",  self.isEmpty(this.state.blockedReason) ? "..." : this.state.blockedReason, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Blocked At : "), " ",  self.isEmpty(this.state.blockedAt) ? "..." : this.state.blockedAt, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Blocked By : "), " ",  self.isEmpty(this.state.blockedBy) ? "..." : this.state.blockedBy, " "), 
                                React.createElement("br", null), 
                                
                                React.createElement("div", null, React.createElement("strong", null, "Deactivation Reason : "), " ",  self.isEmpty(this.state.deactivatedReason) ? "..." : this.state.deactivatedReason, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Deactivated At : "), " ",  self.isEmpty(this.state.deactivatedAt) ? "..." : this.state.deactivatedAt, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Deactivated By : "), " ",  self.isEmpty(this.state.deactivatedBy) ? "..." : this.state.deactivatedBy, " "), 
                                React.createElement("br", null), 

                                React.createElement("div", null, React.createElement("strong", null, "Status : "), " ",  this.state.status == 'I' ? "Inactive" : (this.state.status == 'B' ? "BLOCKED" : 'ACTIVE'), " ")
                            ), 

                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("div", null, React.createElement("strong", null, "ID No : "), " ", this.state.proIdCode == "" ? "- - - -" : this.state.proIdCode, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Position : "), " ", this.state.voterGroup == "" ? "- - - -" : this.state.voterGroup, " "), 
                                React.createElement("div", null, React.createElement("strong", null, "Remarks : "), " ", this.state.remarks == "" ? "- - - -" : this.state.remarks, " ")
                            )
                        )
                    ), 
                    React.createElement("div", {className: "row"}
                        /* <Tab.Container  id="voter-tabs"  activeKey={this.state.active} onSelect={this.setSelectedTab}>
                        <div className="portlet light">
                            <div className="portlet-title  text-right tabbable-line">
                                <Nav bsStyle="tabs">
                                    <NavItem eventKey="assistance">
                                        Assistance
                                    </NavItem>
                                    <NavItem eventKey="history">
                                        History
                                    </NavItem>
                                </Nav>
                            </div>
                            <div className="portlet-body overflow-auto">
                                <Tab.Content animation>
                                    <Tab.Pane eventKey="assistance">
                                        { this.state.active == "assistance" &&
                                            <VoterAssistanceDatatable 
                                                notify = {this.props.notify}
                                                voterId = {this.props.voterId}>
                                            </VoterAssistanceDatatable>
                                        }
                                    </Tab.Pane>
                                    <Tab.Pane eventKey="history">
                                        { this.state.active == "history" &&
                                            <VoterHistoryDatatable voterId={this.props.voterId}></VoterHistoryDatatable>
                                        }
                                    </Tab.Pane>
                                </Tab.Content>
                            </div>
                        </div>
                    </Tab.Container> */

                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.loadVoter(this.props.proId, this.props.voterId);
        this.initUploader();
        //this.initCropper();
    },

    // initCropper : function(){
    //     var self = this;
    //     var image = document.getElementById('sample_image');
    //     var croppable = false;

    //     var cropper = new Cropper(image, {
    //         aspectRatio: 1,
    //         viewMode: 1,
    //         ready: function () {
    //           croppable = true;
    //         },
    //       });

    //       setTimeout(function(){
    //         console.log("cropped canvas");
    //         var croppedCanvas = cropper.getCroppedCanvas();
    //         croppedCanvas.toBlob(function (blob) {
    //             console.log("blob data");
    //             console.log(blob);

    //             var formData = new FormData();
    //             formData.append('files[]', blob, 'avatar.jpg');

    //             $.ajax(Routing.generate('ajax_upload_project_voter_photo', { proId: self.props.proId, voterId: self.props.voterId }), {
    //             method: 'POST',
    //             data: formData,
    //             processData: false,
    //             contentType: false }).done(function(res){
    //                 console.log("submitted");
    //             }).fail(function(err){
    //                 console.log("something went wrong");
    //             });
    //         });
    //       },5000);
    // },

    initUploader: function () {
        var self = this;

        $('#voter-photo-upload').fileupload({
            dataType: 'json',
            done: function (e, data) {
                $.each(data.result.files, function (index, file) {
                    $('<p/>').text(file.name).appendTo(document.body);
                });

                // $('.progress-bar').css(
                //     'width', '0%'
                // );
                // $('.fileupload-progress').css(
                //     'display', 'none'
                // );

                // services.growl.notify('Profile photo has been updated.','success');
                // self.loadStudent(self.props.stdCode);
                self.loadVoter(self.props.proId, self.props.voterId);
            },
            progressall: function (e, data) {
                var progress = parseInt(data.loaded / data.total * 100, 10);
                // $('.fileupload-progress').css(
                //     'display', 'block'
                // );
                // $('.progress-bar').css(
                //     'width',
                //     progress + '%'
                // );
            }
        });
    },

    openCropModal : function(){
        console.log("opening crop modal");
    },

    generateIdNo: function () {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter_generate_id_no", {
                voterId: self.props.voterId,
                proId: self.props.proId
            }),
            type: "GET"
        }).done(function (res) {
            alert("ID NO has been created : " + res.proIdCode);
            self.loadVoter(self.props.proId, self.props.voterId);
        });
    },

    resetId: function () {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter_reset_id", {
                voterId: self.props.voterId,
                proId: self.props.proId
            }),
            type: "GET"
        }).done(function (res) {
            alert("You can now re-print this member ID");
            self.loadVoter(self.props.proId, self.props.voterId);
        });
    },

    isEmpty: function (value) {
        return value == null || value == "";
    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", {
                voterId: voterId,
                proId: proId
            }),
            type: "GET"
        }).done(function (res) {
            self.setState(res);
        });
    },

    setSelectedTab: function (key) {
        this.setState({ active: key });
    }
});

window.VoterViewModal = VoterViewModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterEditModal = React.createClass({displayName: "VoterEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    category: "",
                    cellphone: "",
                    organization: "",
                    voterGroup: ""
                },
                errors: []
            },
            voter: {
                status : 'I'
            },
            showCropModal : false
        };
    },

    componentDidMount: function () {
        console.log('pro id');
        console.log(this.props.proId);
        console.log('pro voter id');
        console.log(this.props.proVoterId);
        
        this.loadVoter(this.props.proId, this.props.proVoterId);
        this.initSelect2();
        this.initUploader();
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proVoterId: proVoterId, proId: proId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.cellphone = res.cellphoneNo;
            form.data.category = res.category;
            form.data.organization = res.organization;
            form.data.voterGroup = res.voterGroup;
            form.data.proIdCode = res.proIdCode;
            form.data.assignedPrecinct = res.assignedPrecinct;
            form.data.precinctNo = res.precinctNo;
            form.data.remarks = res.remarks;
            form.data.status = res.status;

            self.setState({ form: form, voter: res }, self.reinitSelect2);
        });
    },

    initSelect2: function () {

        $("#voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Group",
            width: '100%',
            allowClear: true,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term, // search term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        var self = this;

        $("#voter-group-select2").on("change", function () {
            self.setFieldValue("voterGroup", $(this).val());
        });
    },

    reinitSelect2: function () {
        var voterGroup = this.state.form.data.voterGroup;

        $("#voter-group-select2").empty()
            .append($("<option />")
                .val(voterGroup)
                .text(voterGroup))
            .trigger("change");
    },


    initUploader: function () {
        var self = this;

        $('#voter-photo-upload').fileupload({
            dataType: 'json',
            done: function (e, data) {
                $.each(data.result.files, function (index, file) {
                    $('<p/>').text(file.name).appendTo(document.body);
                });
            
                self.refresh();
                self.openCropModal();
            },
            progressall: function (e, data) {
                var progress = parseInt(data.loaded / data.total * 100, 10);
            }
        });
    },

    openCropModal : function(){
        this.setState({ showCropModal : true });
    },

    closeCropModal : function(){
        this.setState({ showCropModal : false });
    },

    generateIdNo: function () {
        var self = this;
        
        alert("generating id number");

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter_generate_id_no", {
                proVoterId: self.props.proVoterId,
                proId: self.props.proId
            }),
            type: "GET"
        }).done(function (res) {
            alert("ID NO has been created : " + res.proIdCode);
            self.refresh();
        });
    },

    resetId: function () {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter_reset_id", {
                proVoterId: self.props.proVoterId,
                proId: self.props.proId
            }),
            type: "GET"
        }).done(function (res) {
            alert("You can now re-print this member ID");
            self.refresh();
        });
    },

    refresh : function(){
        this.loadVoter(this.props.proId, this.props.proVoterId);
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = this.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate('ajax_patch_project_voter', {
                proVoterId: this.props.proVoterId,
                proId: this.props.proId
            }),
            type: "PATCH",
            data: (data)
        }).done(function (res) {
            self.props.notify("Record has been updated.", "ruby");
            self.props.onHide();
        }).fail(function (err) {
            if (err.status == '401') {
                self.props.notify("You dont have the permission to update this record.", "ruby");
            } else {
                self.props.notify("Form Validation Failed.", "ruby");
            }
            self.setErrors(err.responseJSON);
        });
    },

    render: function () {
        if (!this.isEmpty(this.state.voter)) {
            var photoUrl = window.imgUrl + this.props.proId + '_' + this.state.voter.generatedIdNo + "?" + new Date().getTime();
        }

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, bsSize: "lg", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Update Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-4"}, 
                            React.createElement("div", {onClick: this.openCropModal}, 
                                React.createElement("img", {src: photoUrl, className: "img-responsive", alt: ""})
                            ), 
                            
                                this.state.showCropModal && 
                                (
                                    React.createElement(VoterCropModal, {
                                        proId: this.props.proId, 
                                        proVoterId: this.props.proVoterId, 
                                        generatedIdNo: this.state.voter.generatedIdNo, 
                                        show: this.state.showCropModal, 
                                        onHide: this.closeCropModal, 
                                        onSuccess: this.refresh}
                                    )
                                ), 
                            
  
                            !this.isEmpty(this.state.voter) &&
                                (
                                    React.createElement("div", {style: { marginTop: "90px"}}, 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Name : "), " ", this.state.voter.voterName, " ")), 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Municipality :"), " ", this.state.voter.municipalityName)), 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Barangay :"), " ", this.state.voter.barangayName)), 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Precinct No :"), " ", this.state.voter.precinctNo)), 
                                        React.createElement("div", null, React.createElement("small", null, React.createElement("strong", null, "Assigned Precinct :"), " ", this.state.voter.assignedPrecinct))
                                    )
                                )
                            
                        ), 
                        React.createElement("div", {className: "col-md-8"}, 
                            React.createElement("form", {id: "voter-updated-form"}, 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                                React.createElement(ControlLabel, null, " Precinct No : "), 
                                                React.createElement(FormControl, {bsClass: "form-control input-sm", name: "precinctNo", value: this.state.form.data.precinctNo, disabled: true}), 
                                                React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                            )
                                        ), 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formAssignedPrecinct", validationState: this.getValidationState('assignedPrecinct')}, 
                                                React.createElement(ControlLabel, null, " Assigned Precinct No : "), 
                                                React.createElement(FormControl, {bsClass: "form-control input-sm", name: "assignedPrecinct", value: this.state.form.data.assignedPrecinct, onChange: this.setFormProp}), 
                                                React.createElement(HelpBlock, null, this.getError('assignedPrecinct'))
                                            )
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "clearfix"}), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formProIdCode", validationState: this.getValidationState('proIdCode')}, 
                                                React.createElement(ControlLabel, null, " ID No : "), 
                                                React.createElement(FormControl, {bsClass: "form-control input-sm", disabled: true, name: "proIdCode", value: this.state.form.data.proIdCode, onChange: this.setFormProp}), 
                                                React.createElement(HelpBlock, null, this.getError('proIdCode'))
                                            )
                                        ), 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formStatus", validationState: this.getValidationState('status')}, 
                                                React.createElement(ControlLabel, null, " Status : "), 
                                                React.createElement(FormControl, {componentClass: "select", bsClass: "form-control input-sm", name: "status", value: this.state.form.data.status, onChange: this.setFormProp}, 
                                                    React.createElement("option", {value: ""}, " -- Select Status --"), 
                                                    React.createElement("option", {value: "A"}, "Active"), 
                                                    React.createElement("option", {value: "I"}, "Inactive"), 
                                                    React.createElement("option", {value: "B"}, "Blocked")
                                                ), 
                                                React.createElement(HelpBlock, null, this.getError('status'))
                                            )
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "clearfix"}), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formVoterGroup", validationState: this.getValidationState('voterGroup')}, 
                                                React.createElement(ControlLabel, null, "Position : "), 
                                                React.createElement("select", {id: "voter-group-select2", className: "form-control input-sm"}, 
                                                    React.createElement("option", {value: ""}, " ")
                                                ), 
                                                React.createElement(HelpBlock, null, this.getError('voterGroup'))
                                            )
                                        ), 

                                        React.createElement("div", {className: "col-md-6"}, 
                                            React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                                React.createElement(ControlLabel, null, " Cellphone : "), 
                                                React.createElement(FormControl, {bsClass: "form-control input-sm", name: "cellphone", value: this.state.form.data.cellphone, onChange: this.setFormProp}), 
                                                React.createElement(HelpBlock, null, this.getError('cellphone'))
                                            )
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "clearfix"}), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement("div", {className: "col-md-12"}, 
                                            React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                                React.createElement(ControlLabel, null, " Remarks : "), 
                                                React.createElement(FormControl, {componentClass: "textarea", rows: "5", bsClass: "form-control input-sm", name: "remarks", value: this.state.form.data.remarks, onChange: this.setFormProp}), 
                                                React.createElement(HelpBlock, null, this.getError('remarks'))
                                            )
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "text-right col-md-12"}, 
                                    React.createElement("button", {type: "button", className: "btn btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close")
                                )

                            )
                        )
                    )

                )
            )
        );
    }

});

window.VoterEditModal = VoterEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterUploadBdayModal = React.createClass({displayName: "VoterUploadBdayModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    electId: null,
                    provinceCode: "",
                    municipalityNo: ""
                },
                errors: []
            },
            file: null,
            isLoading: false,
            uploadedRecord: 0,
            totalRows: 0,
            percentage: 0,
            loadingText: ""
        };
    },

    getDefaultProps: function () {
        return {
            create: true
        }
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#form-election-select2").select2({
            casesentitive: false,
            placeholder: "Enter election....",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#form-province-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-municipality-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: $('#form-province-select2').val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });


        $("#form-election-select2").on("change", function () {
            self.setFormPropValue("electId", $(this).val());
        });


        $("#form-province-select2").on("change", function () {
            $("#form-municipality-select2").empty().trigger('change');
            self.setFormPropValue("provinceCode", $(this).val());
        });

        $("#form-municipality-select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    numberWithCommas: function (x) {
        x = parseFloat(x).toFixed(2);
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        $("#voter-form #excel-file").val("");

        this.setState({ details: null, form: form });
    },

    setFile: function (e) {

        this.setState({ file: $(this)[0].files[0] });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        var formData = new FormData();

        formData.append('electId', data.electId);
        formData.append('excelFile', $('#voter-form #excel-file')[0].files[0]);
        formData.append('provinceCode', data.provinceCode);
        formData.append('municipalityNo', data.municipalityNo);

        self.setState({ isLoading: true, loadingText: "Loading " });
        var lastResponseLength = false;

        console.log(data);

        self.requestUpload = $.ajax({
            url: Routing.generate("ajax_upload_voters_birthdate"),
            data: formData,
            type: 'POST',
            contentType: false, // NEEDED, DON'T OMIT THIS (requires jQuery 1.6+)
            processData: false, // NEEDED, DON'T OMIT THIS
            xhrFields: {
                // Getting on progress streaming response
                onprogress: function (e) {
                    var progressResponse;
                    var response = e.currentTarget.response;
                    if (lastResponseLength === false) {
                        progressResponse = response;
                        lastResponseLength = response.length;
                    }
                    else {
                        progressResponse = response.substring(lastResponseLength);
                        lastResponseLength = response.length;
                    }
                    if (self.isJsonString(progressResponse)) {
                        progressResponse = JSON.parse(progressResponse);
                        self.setState({ uploadedRecord: progressResponse.currentRow, totalRows: progressResponse.totalRows, percentage: progressResponse.percentage });
                    }
                }
            }
            // ... Other options like success and etc
        }).done(function (res) {
            self.props.notify("Record has been uploaded.", "ruby");
            self.reset();

        }).fail(function (err) {
            if (err.status == '401') {
                self.props.notify("You dont have the permission to perform this action.", "ruby");
            } else if (err.status == '400') {
                self.props.notify("Form Validation Failed.", "ruby");
                self.setErrors(err.responseJSON);
            } else {
                self.props.notify("Record has been uploaded.", "ruby");
                self.reset();
            }


        }).always(function () {
            self.setState({ isLoading: false });
        });
    },

    isJsonString: function (str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    },

    render: function () {
        var self = this;
        console.log(self.state.form.data);
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Update Voter Birthday")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-form", enctype: "multipart/form-data"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formElectId", validationState: this.getValidationState('electId')}, 
                                    React.createElement(ControlLabel, null, " Election : "), 
                                    React.createElement("select", {id: "form-election-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('electId'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formProvinceCode", validationState: this.getValidationState('provinceCode')}, 
                                    React.createElement(ControlLabel, null, " Province : "), 
                                    React.createElement("select", {id: "form-province-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('provinceCode'))
                                )
                            ), 
                            
                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "form-municipality-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 
                            
                            React.createElement("div", {className: "clearfix"}), 
                            
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {style: { marginTop: "30px"}, controlId: "formExcelFile", validationState: this.getValidationState('excelFile')}, 
                                    React.createElement("div", null, 
                                        React.createElement("input", {id: "excel-file", onChange: this.setFile, type: "file", accept: ".xlxs, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel", name: "excel-file"}), 
                                        React.createElement(HelpBlock, null, this.getError('excel-file'))
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('excelFile'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "row", style: { marginTop: "20px"}}, 
                            React.createElement("div", {className: "col-md-8 text-center"}, 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("div", {className: "font-green-seagreen text-center bold", style: { fontSize: "50px"}}, this.state.totalRows), 
                                    React.createElement("div", {style: { textAlign: "center", fontWeight: "bold"}}, "Total")
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("div", {className: "font-red-sunglo text-center bold", style: { fontSize: "50px"}}, this.state.uploadedRecord), 
                                    React.createElement("div", {style: { textAlign: "center", fontWeight: "bold"}}, "Uploaded")
                                )
                            ), 
                            React.createElement("div", {className: "text-right col-md-4", style: { marginTop: "70px"}}, 
                                React.createElement("button", {type: "button", className: "btn  btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                                !this.state.isLoading && React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit"), 
                                this.state.isLoading && React.createElement("button", {type: "button", disabled: true, className: "btn red-sunglo"}, " ", this.state.loadingText, " ", this.state.percentage, " % ", React.createElement("i", {className: "fa fa-spinner fa-pulse fa-1x fa-fw"}))
                            )
                        )
                    )
                )
            )
        );
    }
});


window.VoterUploadBdayModal = VoterUploadBdayModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterUpload2016VotingStatusModal = React.createClass({displayName: "VoterUpload2016VotingStatusModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    provinceCode: "",
                    municipalityNo: "",
                    brgyNo: "",
                    electId: null
                },
                errors: []
            },
            file: null,
            isLoading: false,
            uploadedRecord: 0,
            targetName: "- - - -",
            totalRows: 0,
            percentage: 0,
            loadingText: ""
        };
    },

    getDefaultProps: function () {
        return {
            create: true
        }
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#form-election-select2").select2({
            casesentitive: false,
            placeholder: "Enter election....",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });


        $("#form-province-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-municipality-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: $('#form-province-select2').val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-barangay-select2").select2({
            casesentitive: false,
            placeholder: "Enter name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: $('#form-province-select2').val(),
                        municipalityNo: $("#form-municipality-select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-election-select2").on("change", function () {
            self.setFormPropValue("electId", $(this).val());
        });

        $("#form-province-select2").on("change", function () {
            $("#form-municipality-select2").empty().trigger('change');
            $("#form-barangay-select2").empty().trigger('change');
            self.setFormPropValue("provinceCode", $(this).val());
        });

        $("#form-municipality-select2").on("change", function () {
            $("#form-barangay-select2").empty().trigger('change');
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#form-barangay-select2").on("change", function () {
            var provinceCode = $("#form-province-select2").val();
            var municipalityNo = $("#form-municipality-select2").val();
            var brgyNo = $("#form-barangay-select2").val();

            self.setFormPropValue("brgyNo", $(this).val());
            self.loadTargetName(provinceCode, municipalityNo, brgyNo);
        });
    },

    loadTargetName: function (provinceCode, municipalityNo, brgyNo) {
        var self = this;

        self.requestBarangay = $.ajax({
            url: Routing.generate("ajax_get_barangay", {
                provinceCode: provinceCode,
                municipalityNo: municipalityNo,
                brgyNo: brgyNo
            }),
            type: "GET"
        }).done(function (res) {
            self.setState({ targetName: res.name });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    numberWithCommas: function (x) {
        x = parseFloat(x).toFixed(2);
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.data.brgyNo = "";
        form.errors = [];

        $("#form-barangay-select2").empty().trigger("change");
        $("#voter-form #excel-file").val("");

        this.setState({ details: null, form: form });
    },

    setFile: function (e) {

        this.setState({ file: $(this)[0].files[0] });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        var formData = new FormData();

        formData.append('electId', data.electId);
        formData.append('excelFile', $('#voter-form #excel-file')[0].files[0]);
        formData.append('provinceCode', data.provinceCode);
        formData.append('municipalityNo', data.municipalityNo);
        formData.append('brgyNo', data.brgyNo);

        self.setState({ isLoading: true, loadingText: "Loading " });
        var lastResponseLength = false;

        self.requestUpload = $.ajax({
            url: Routing.generate("ajax_upload_voters_voting_status"),
            data: formData,
            type: 'POST',
            contentType: false, // NEEDED, DON'T OMIT THIS (requires jQuery 1.6+)
            processData: false, // NEEDED, DON'T OMIT THIS
            xhrFields: {
                // Getting on progress streaming response
                onprogress: function (e) {
                    var progressResponse;
                    var response = e.currentTarget.response;
                    if (lastResponseLength === false) {
                        progressResponse = response;
                        lastResponseLength = response.length;
                    }
                    else {
                        progressResponse = response.substring(lastResponseLength);
                        lastResponseLength = response.length;
                    }
                    if (self.isJsonString(progressResponse)) {
                        progressResponse = JSON.parse(progressResponse);
                        self.setState({ uploadedRecord: progressResponse.currentRow, totalRows: progressResponse.totalRows, percentage: progressResponse.percentage });
                    }
                }
            }
            // ... Other options like success and etc
        }).done(function (res) {
            self.setState({ loadingText: "Re-computing " });
            $.ajax({
                url: Routing.generate('ajax_update_voter_summary', {
                    provinceCode: data.provinceCode,
                    municipalityNo: data.municipalityNo,
                    brgyNo: data.brgyNo
                }),
                type: "GET"
            }).done(function (res) {
                self.props.notify("Record has been uploaded.", "ruby");
                self.reset();
            }).always(function () {
                self.setState({ isLoading: false });
            });
        }).fail(function (err) {
            if (err.status == '401') {
                self.props.notify("You dont have the permission to perform this action.", "ruby");
            } else if (err.status == '400') {
                self.props.notify("Form Validation Failed.", "ruby");
                self.setErrors(err.responseJSON);
            } else {
                self.props.notify("Record has been uploaded.", "ruby");
                self.reset();
            }

            self.setState({ isLoading: false });
        });
    },

    isJsonString: function (str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    },

    render: function () {
        var self = this;
        
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Update Voter Record")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-form", enctype: "multipart/form-data"}, 
                        React.createElement("div", {class: "row"}, 

                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formElectId", validationState: this.getValidationState('electId')}, 
                                    React.createElement(ControlLabel, null, " Election : "), 
                                    React.createElement("select", {id: "form-election-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('electId'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formProvinceCode", validationState: this.getValidationState('provinceCode')}, 
                                    React.createElement(ControlLabel, null, " Province : "), 
                                    React.createElement("select", {id: "form-province-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('provinceCode'))
                                )
                            ), 

                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "form-municipality-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formBarangayNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "form-barangay-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 

                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {style: { marginTop: "30px"}, controlId: "formExcelFile", validationState: this.getValidationState('excelFile')}, 
                                    React.createElement("div", null, 
                                        React.createElement("input", {id: "excel-file", onChange: this.setFile, type: "file", accept: ".xlxs, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel", name: "excel-file"}), 
                                        React.createElement(HelpBlock, null, this.getError('excel-file'))
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('excelFile'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {class: "row", style: { marginTop: "20px"}}, 
                            React.createElement("div", {className: "col-md-6 text-center"}, 
                                React.createElement("div", {className: "bold"}, this.state.targetName), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("div", {className: "font-green-seagreen text-center bold", style: { fontSize: "50px"}}, this.state.totalRows), 
                                    React.createElement("div", {style: { textAlign: "center", fontWeight: "bold"}}, "Total")
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("div", {className: "font-red-sunglo text-center bold", style: { fontSize: "50px"}}, this.state.uploadedRecord), 
                                    React.createElement("div", {style: { textAlign: "center", fontWeight: "bold"}}, "Uploaded")
                                )
                            ), 
                            React.createElement("div", {className: "text-right col-md-6", style: { marginTop: "70px"}}, 
                                React.createElement("button", {type: "button", className: "btn  btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                                !this.state.isLoading && React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit"), 
                                this.state.isLoading && React.createElement("button", {type: "button", disabled: true, className: "btn red-sunglo"}, " ", this.state.loadingText, " ", this.state.percentage, " % ", React.createElement("i", {className: "fa fa-spinner fa-pulse fa-1x fa-fw"}))
                            )
                        )
                    )
                )
            )
        );
    }
});


window.VoterUpload2016VotingStatusModal = VoterUpload2016VotingStatusModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterUploadModal = React.createClass({displayName: "VoterUploadModal",

    getInitialState : function(){
        return {
            form : {
                data : {
                  provinceCode : "",
                  municipalityNo : "",
                  brgyNo : "",
                  electId : null
                },
                errors : []
            },
            file : null,
            isLoading : false,
            uploadedRecord : 0,
            targetName : "- - - -",
            totalRows : 0,
            percentage : 0,
            loadingText : ""
        };
    },

    getDefaultProps : function(){
        return {
            create : true
        }
    },

    componentDidMount : function(){
        this.initSelect2();
    },

    initSelect2 : function(){
        var self = this;

        
        $("#form-election-select2").select2({
            casesentitive : false,
            placeholder : "Enter election....",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('ajax_select2_elections'),
                data :  function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.elect_id , text: item.elect_name};
                        })
                    };
                },
            }
        });


        $("#form-province-select2").select2({
            casesentitive : false,
            placeholder : "Enter Name...",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('ajax_select2_province'),
                data :  function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.province_code , text: item.name};
                        })
                    };
                },
            }
        });

        $("#form-municipality-select2").select2({
            casesentitive : false,
            placeholder : "Enter Name...",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('ajax_select2_municipality'),
                data :  function (params) {
                    return {
                        searchText : params.term,
                        provinceCode : $('#form-province-select2').val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.municipality_no , text: item.name};
                        })
                    };
                },
            }
        });

        $("#form-barangay-select2").select2({
            casesentitive : false,
            placeholder : "Enter name...",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('ajax_select2_barangay'),
                data :  function (params) {
                    return {
                        searchText: params.term,
                        provinceCode : $('#form-province-select2').val(),
                        municipalityNo : $("#form-municipality-select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.brgy_no , text: item.name};
                        })
                    };
                },
            }
        });


        $("#form-election-select2").on("change", function() {
            self.setFormPropValue("electId",$(this).val());
        });

        $("#form-province-select2").on("change", function() {
            $("#form-municipality-select2").empty().trigger('change');
            $("#form-barangay-select2").empty().trigger('change');
            self.setFormPropValue("provinceCode",$(this).val());
        });

        $("#form-municipality-select2").on("change", function() {
            $("#form-barangay-select2").empty().trigger('change');
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#form-barangay-select2").on("change", function() {
            var provinceCode =  $("#form-province-select2").val();
            var municipalityNo =  $("#form-municipality-select2").val();
            var brgyNo =  $("#form-barangay-select2").val();

            self.setFormPropValue("brgyNo", $(this).val());
            self.loadTargetName(provinceCode,municipalityNo,brgyNo);
        });
    },

    loadTargetName : function(provinceCode,municipalityNo,brgyNo){
        var self = this;

        self.requestBarangay = $.ajax({
            url : Routing.generate("ajax_get_barangay",{
                provinceCode : provinceCode,
                municipalityNo : municipalityNo,
                brgyNo : brgyNo
            }),
            type : "GET"
        }).done(function(res){
            self.setState({targetName : res.name});
        });
    },
    
    setFormPropValue : function(field,value){
        var form = this.state.form;
        form.data[field] = value;
        this.setState({form : form});
    },

    setFormProp : function(e){
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({form : form});
    },

    setErrors : function(errors){
        var form = this.state.form;
        form.errors = errors;

        this.setState({form : form});
    },

    getError : function(field){
        var errors = this.state.form.errors;
        for(var errorField in errors){
            if(errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState : function(field){
        return this.getError(field) != null ? 'error' : '';
    },

    numberWithCommas : function(x) {
        x = parseFloat(x).toFixed(2);
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    isEmpty : function(value){
        return value == null || value == '';
    },

    reset : function(){
      var form = this.state.form;
      form.data.brgyNo = "";
      form.errors = [];

      $("#form-barangay-select2").empty().trigger("change");
      $("#voter-form #excel-file").val("");

      this.setState({details : null , form : form});
    },

    setFile : function(e){
    
        this.setState({file : $(this)[0].files[0]});
    },

    submit : function(e){
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        var formData = new FormData();
        
        formData.append('electId', data.electId);
        formData.append('excelFile', $('#voter-form #excel-file')[0].files[0]);
        formData.append('provinceCode', data.provinceCode);
        formData.append('municipalityNo', data.municipalityNo);
        formData.append('brgyNo', data.brgyNo);

        self.setState({isLoading : true, loadingText : "Uploading "});
        var lastResponseLength  = false;

        self.requestUpload = $.ajax({
            url: Routing.generate("ajax_upload_voters"),
            data: formData,
            type: 'POST',
            contentType: false, // NEEDED, DON'T OMIT THIS (requires jQuery 1.6+)
            processData: false, // NEEDED, DON'T OMIT THIS
            xhrFields: {
                // Getting on progress streaming response
                onprogress: function(e)
                {
                    var progressResponse;
                    var response = e.currentTarget.response;
                    if(lastResponseLength === false)
                    {
                        progressResponse = response;
                        lastResponseLength = response.length;
                    }
                    else
                    {
                        progressResponse = response.substring(lastResponseLength);
                        lastResponseLength = response.length;
                    }
                    if(self.isJsonString(progressResponse)){
                        progressResponse = JSON.parse(progressResponse);
                        self.setState({uploadedRecord : progressResponse.currentRow, totalRows: progressResponse.totalRows, percentage : progressResponse.percentage});
                    }
                }
            }
            // ... Other options like success and etc
        }).done(function(res){
            self.reset();
        }).fail(function(err){
            if(err.status == '401'){
                self.props.notify("You dont have the permission to perform this action.","ruby");
            }else if(err.status == '400'){
                self.props.notify("Form Validation Failed.","ruby");
                self.setErrors(err.responseJSON);
            }else{
                self.props.notify("Record has been uploaded.","ruby");
                self.reset();
            }

            self.setState({isLoading : false});
        });
    },

    isJsonString : function (str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    },

    render : function(){
        var self = this;
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-form", enctype: "multipart/form-data"}, 
                        React.createElement("div", {class: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formElectId", validationState: this.getValidationState('electId')}, 
                                    React.createElement(ControlLabel, null, " Election : "), 
                                    React.createElement("select", {id: "form-election-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('electId'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formProvinceCode", validationState: this.getValidationState('provinceCode')}, 
                                    React.createElement(ControlLabel, null, " Province : "), 
                                    React.createElement("select", {id: "form-province-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('provinceCode'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "form-municipality-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formBarangayNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "form-barangay-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {style: {marginTop:"30px"}, controlId: "formExcelFile", validationState: this.getValidationState('excelFile')}, 
                                    React.createElement("div", null, 
                                        React.createElement("input", {id: "excel-file", onChange: this.setFile, type: "file", accept: ".xlxs, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel", name: "excel-file"}), 
                                        React.createElement(HelpBlock, null, this.getError('excel-file'))
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('excelFile'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {class: "row", style: {marginTop:"20px"}}, 
                            React.createElement("div", {className: "col-md-6 text-center"}, 
                                React.createElement("div", {className: "bold"}, this.state.targetName), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("div", {className: "font-green-seagreen text-center bold", style: { fontSize : "50px"}}, this.state.totalRows), 
                                    React.createElement("div", {style: {textAlign: "center", fontWeight : "bold"}}, "Total")
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("div", {className: "font-red-sunglo text-center bold", style: { fontSize : "50px"}}, this.state.uploadedRecord), 
                                    React.createElement("div", {style: {textAlign: "center", fontWeight : "bold"}}, "Uploaded")
                                )
                            ), 
                            React.createElement("div", {className: "text-right col-md-6", style: {marginTop:"70px"}}, 
                                React.createElement("button", {type: "button", className: "btn  btn-default", style: {marginRight : "5px"}, onClick: this.props.onHide}, "Close"), 
                                !this.state.isLoading && React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit"), 
                                this.state.isLoading &&  React.createElement("button", {type: "button", disabled: true, className: "btn red-sunglo"}, " ", this.state.loadingText, " ", this.state.percentage, " % ", React.createElement("i", {className: "fa fa-spinner fa-pulse fa-1x fa-fw"}))
                            )
                        )
                    )
                )
            )
        );
    }
});


window.VoterUploadModal = VoterUploadModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterCreateModal = React.createClass({displayName: "VoterCreateModal",

    getInitialState : function(){
        return {
            showDetailViewModal : false,
            form : {
                data : {
                    fyCode : 2017,
                    idxDate : moment(new Date()).format('YYYY-MM-DDThh:mm'),
                    recvCode : '',
                    paxCount : 1,
                    dvNo : '',
                    idxNo : "",
                    remarks : ""
                },
                errors : []
            },
            accIdxFiscalYears : [],
            details : null,
            showIdxNoModal : false
        };
    },

    getDefaultProps : function(){
        return {
            create : true
        }
    },

    componentDidMount : function(){
        // this.initSelect2();
    },

    initSelect2 : function(){
        var self = this;

        $("#idx-user-select2").select2({
            casesentitive : false,
            placeholder : "Enter Code or Name",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('indexing_ajax_select2_user'),
                data :  function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.user_code , text: item.user_name};
                        })
                    };
                },
            }
        });


        $("#idx-user-select2").on("change", function() {
            
        });
    },

    setFormProp : function(e){
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({form : form});
    },

    setErrors : function(errors){
        var form = this.state.form;
        form.errors = errors;

        this.setState({form : form});
    },

    getError : function(field){
        var errors = this.state.form.errors;
        for(var errorField in errors){
            if(errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState : function(field){
        return this.getError(field) != null ? 'error' : '';
    },

    numberWithCommas : function(x) {
        x = parseFloat(x).toFixed(2);
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    isEmpty : function(value){
        return value == null || value == '';
    },

    reset : function(){
      var form = this.state.form;
      form.data.idxDate = moment(new Date()).format('YYYY-MM-DDThh:mm');
      form.data.remarks = "";
      form.data.paxCount =  1;
      form.errors = [];

      $("#idx-obr-select2").empty().trigger("change");

      this.setState({details : null , form : form});
    },

    submit : function(e){
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        // self.requestPost = $.ajax({
        //     url : Routing.generate('indexing_ajax_post_idx_hdr'),
        //     type : "POST",
        //     data : (data)
        // }).done(function(res){
        //     var form  = self.state.form;
        //     form.data.idxNo = res.idxNo;
        //     self.setState({form : form});
        //     self.props.notify("Transaction has been completed.","teal");
        //     self.openIdxNoModal();
        // }).fail(function(err){
        //     self.props.notify("Form Validation Failed.","ruby");
        //     self.setErrors(err.responseJSON);
        // });
    },

    render : function(){
        var self = this;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-custom-85", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "carding-entry-form"}, 
                        React.createElement("div", {class: "row", style: {padding:0}}, 
                        
                            React.createElement("div", {className: "col-md-5"}, 
                                React.createElement(FormGroup, {controlId: "formIdxDate", validationState: this.getValidationState('idxDate')}, 
                                    React.createElement(ControlLabel, null, " Name : "), 
                                    React.createElement(FormControl, {type: "datetime-local", bsClass: "form-control input-sm", name: "idxDate", value: this.state.form.data.idxDate, onChange: this.setFormProp}), 
                                    React.createElement(HelpBlock, null, this.getError('idxDate'))
                                )
                            ), 
                                
                            React.createElement("div", {className: "col-md-2", style: {paddingRight:0}}, 
                                React.createElement(FormGroup, {controlId: "formFyCode", validationState: this.getValidationState('fyCode')}, 
                                    React.createElement(ControlLabel, null, "FY : "), 
                                    React.createElement("select", {name: "fyCode", className: "form-control input-sm", value: this.state.form.data.fyCode, onChange: this.setFormProp}, 
                                        React.createElement("option", {value: ""}, " -- Select Year --"), 
                                        this.state.accIdxFiscalYears.map(function(item){
                                            return (React.createElement("option", {key: "acc" + item.fy_code, value: item.fy_code}, item.fy_code));
                                        })
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('fyCode'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-5"}, 
                                React.createElement(FormGroup, {controlId: "formIdxDate", validationState: this.getValidationState('idxDate')}, 
                                    React.createElement(ControlLabel, null, " Date Indexed : "), 
                                    React.createElement(FormControl, {type: "datetime-local", bsClass: "form-control input-sm", name: "idxDate", value: this.state.form.data.idxDate, onChange: this.setFormProp}), 
                                    React.createElement(HelpBlock, null, this.getError('idxDate'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-5"}, 
                                React.createElement(FormGroup, {controlId: "formUserCode", validationState: this.getValidationState('userCode')}, 
                                    React.createElement(ControlLabel, null, "Indexed By : "), 
                                    React.createElement("select", {id: "idx-user-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('userCode'))
                                )
                            ), 

                            React.createElement("div", {className: "clearfix"}), 

                            React.createElement("div", {className: "col-md-9"}, 
                                React.createElement(FormGroup, {controlId: "formRecvCode", validationState: this.getValidationState('recvCode')}, 
                                    React.createElement(ControlLabel, null, "OBR : "), 
                                    React.createElement("select", {id: "idx-obr-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('recvCode'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formPaxCount", validationState: this.getValidationState('paxCount')}, 
                                    React.createElement(ControlLabel, null, " Pax Count : "), 
                                    React.createElement(FormControl, {type: "number", bsClass: "form-control input-sm", name: "paxCount", value: this.state.form.data.paxCount, onChange: this.setFormProp}), 
                                    React.createElement(HelpBlock, null, this.getError('paxCount'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                    React.createElement(ControlLabel, null, " Remarks : "), 
                                    React.createElement(FormControl, {componentClass: "textarea", rows: "9", value: this.state.form.data.remarks, bsClass: "form-control input-sm", name: "remarks", onChange: this.setFormProp}), 
                                    React.createElement(HelpBlock, null, this.getError('remarks'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right col-md-12"}, 
                            React.createElement("button", {type: "button", className: "btn  btn-default", style: {marginRight : "5px"}, onClick: this.props.onHide}, "Close"), 
                            React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit")
                        )
                    )
                )
            )
        );
    }
});


window.VoterCreateModal = VoterCreateModal;
var VoterDatatable = React.createClass({displayName: "VoterDatatable",

    getInitialState: function () {
        return {
            showEntryModal: false,
            showEditModal: false,
            showViewModal: false,
            showUploadModal: false,
            showUploadVotingStatusModal: false,
            showNewVoterCreateModal: false,
            showUploadBdayModal: false,
            showSmsModal: false,
            showDswdSmsModal: false,
            showCapitolSmsModal: false,
            showJpmModal: false,
            target: null,
            typingTimer: null,
            user: null,
            doneTypingInterval: 1500,
            fiscalYears: [],
            summary: {
                recordsFiltered: 0,
                obrTotal: 0
            },
            filters: {
                proId: null,
                electId: null
            },
            user: null
        }
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadUser(window.userId);
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#voter_component #election_select2").select2({
            casesentitive: false,
            placeholder: "Select Election...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#voter_component #project_select2").select2({
            casesentitive: false,
            placeholder: "Select Project...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_projects'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.pro_id, text: item.pro_name };
                        })
                    };
                },
            }
        });

        $("#voter_component #province_select2").select2({
            casesentitive: false,
            placeholder: "Enter Province...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });

        $("#voter_table #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: $('#voter_component #province_select2').val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#voter_table #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Enter name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: $('#voter_component #province_select2').val(),
                        municipalityNo: $("#voter_table #municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });


        $("#voter_table #precinct_select2").select2({
            casesentitive: false,
            placeholder: "Enter Precinct...",
            allowClear: true,
            delay: 1500,
            width: '60',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_precinct_no'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.precinct_no, text: item.precinct_no };
                        })
                    };
                },
            }
        });

        $("#voter_table #organization_select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_voter_organization'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.organization, text: item.organization };
                        })
                    };
                },
            }
        });

        $("#voter_table #position_select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#voter_component #election_select2").on("change", function () {
            var filters = self.state.filters;
            filters.electId = $(this).val();
            self.setState({ filters: filters });

            self.handleFilterChange();
        });

        $("#voter_component #project_select2").on("change", function () {
            var filters = self.state.filters;
            filters.proId = $(this).val();
            self.setState({ filters: filters });
        });

        $("#voter_table #province_select2").on("change", function () {
            self.handleFilterChange();
        });

        $("#voter_table #municipality_select2").on("change", function () {
            self.handleFilterChange();
        });

        $("#voter_table #barangay_select2").on("change", function () {
            self.handleFilterChange();
        });

        $("#voter_table #precinct_select2").on("change", function () {
            self.handleFilterChange();
        });

        $("#voter_table #organization_select2").on("change", function () {
            self.handleFilterChange();
        });

        $("#voter_table #category_select2").on("change", function () {
            self.handleFilterChange();
        });
    },

    reinitSelect2: function () {
        var self = this;

        if (!self.isEmpty(self.state.user.project)) {
            var provinceCode = self.state.user.project.provinceCode;

            self.requestProvince = $.ajax({
                url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
                type: "GET"
            }).done(function (res) {
                $("#voter_component #province_select2").empty()
                    .append($("<option/>")
                        .val(res.province_code)
                        .text(res.name))
                    .trigger("change");
            });

            self.requestProject = $.ajax({
                url: Routing.generate("ajax_get_project", { proId: self.state.user.project.proId }),
                type: "GET"
            }).done(function (res) {

                $("#voter_component #project_select2").empty()
                    .append($("<option/>")
                        .val(res.proId)
                        .text(res.proName))
                    .trigger("change");
            });
        }

        self.requestActiveElection = $.ajax({
            url: Routing.generate("ajax_get_active_election"),
            type: "GET"
        }).done(function (res) {
            $("#voter_component #election_select2").empty()
                .append($("<option/>")
                    .val(res.electId)
                    .text(res.electName))
                .trigger("change");
        });

        if (!self.state.user.isAdmin) {
            $("#voter_component #election_select2").attr('disabled', 'disabled');
            $("#voter_component #province_select2").attr('disabled', 'disabled');
            $("#voter_component #project_select2").attr('disabled', 'disabled');
            $("#voter_table #municipality_select2").attr('disabled', 'disabled');
        }

        
        console.log("user");
        console.log(self.state.user);

        self.requestMunicipality = $.ajax({
            url: Routing.generate("ajax_get_municipality_alt", { name : self.state.user.description }),
            type: "GET"
        }).done(function (res) {
            $("#voter_table #municipality_select2").empty()
                .append($("<option/>")
                    .val(res.municipality_no)
                    .text(res.name))
                .trigger("change");
        });

        self.gridTable();
    },

    gridTable: function () {
        var self = this;
        var grid = new Datatable();

        var voter_table = $("#voter_table");

        grid.init({
            src: voter_table,
            onSuccess: function (grid, response) {
                var summary = self.state.summary;
                summary.recordsFiltered = response.recordsFiltered;
                summary.obrTotal = response.obrTotal;
                self.setState({ summary: summary });
            },
            dataTable: {
                "bState": true,
                "autoWidth": true,
                "serverSide": true,
                "processing": true,
                "deferRender": true,
                "deferLoading": 0,
                "ajax": {
                    "url": Routing.generate('ajax_datatable_voter'),
                    "type": "GET",
                    "data": function (d) {
                        d.provinceCode = $('#voter_component #province_select2').val();
                        d.municipalityNo = $('#voter_table #municipality_select2').val();
                        d.brgyNo = $('#voter_table #barangay_select2').val();
                        d.precinctNo = $('#voter_table #precinct_select2').val();
                        d.voterName = $('#voter_table input[name="voter_name"]').val();
                        d.birthdate = $('#voter_table input[name="birthdate"]').val();
                        d.cellphone = $('#voter_table input[name="cellphone"]').val();
                        d.voterGroup = $('#voter_table input[name="voter_group"]').val();
                        d.brgyCluster = $('#voter_table input[name="brgy_cluster"]').val();
                        d.electId = $('#voter_component #election_select2').val();
                        d.proId = $('#voter_component #project_select2').val();
                    }
                },
                columnDefs: [
                    {
                        'className': 'text-center valign-middle',
                        'orderable': false,
                        'targets': [0, 4, 5, 6, 7, 8, 9]
                    }
                ],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "render": function (data, type, row) {
                            return (row.voted_2017 == 1 ? "*" : "") + data;
                        }
                    },
                    {
                        "data": "birthdate",
                        "className": "text-center",
                        "width": "80px",
                        "render": function (data, type, row) {
                            return self.isEmpty(data) ? "" : data.split(" ")[0];
                        }
                    },
                    {
                        "data": "municipality_name",
                        "width": "150px"
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": "100px"
                    },
                    {
                        "data": "brgy_cluster",
                        "className": "text-center",
                        "width": 20
                    },
                    {
                        "data": "precinct_no",
                        "className": "text-center",
                        "width": "30px"
                    },
                    {
                        "data": "cellphone_no",
                        "className": "text-center",
                        "width": 100
                    },
                    {
                        "data": "voter_group",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "width": 130,
                        "render": function (data, type, row) {
                            //var btnGroup = '<button class="btn btn-xs blue-madison  edit-btn"><i class="fa fa-edit"></i></button>';

                            var viewBtn = '<button class="btn btn-xs default edit2-btn"><i class="fa fa-eye"></i></button>';
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var assignBtn = '<button class="btn btn-xs blue assign-btn"><i class="fa fa-edit"></i>Assign</button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';

                            // if (self.state.user.isAdmin == 1) {
                            //     if (row.status == 'A' || row.status == '' || row.status == null) {
                            //         btnGroup += '<button class="btn btn-xs red-sunglo block-btn">Block</button>';
                            //         btnGroup += '<button class="btn btn-xs grey-gallery deactivate-btn">Detactivate</button>';
                            //     } else if (row.status == 'B') {
                            //         btnGroup += '<button class="btn btn-xs green-jungle unblock-btn">Unblock</button>';
                            //     } else if (row.status == 'I') {
                            //         btnGroup += '<button class="btn btn-xs red-sunglo block-btn">Block</button>';
                            //         btnGroup += '<button class="btn btn-xs green-jungle activate-btn">Activate</button>';
                            //     }

                            //     if (row.has_photo == 1) {
                            //         btnGroup += '<button class="btn btn-xs purple-sharp reset-image-btn">Reset Image</button>';
                            //     }
                            // }

                            var btnGroup = '';
                            btnGroup += viewBtn;
                            //btnGroup += editBtn;
                      
                            return btnGroup;
                        },
                        "className": "text-center"
                    }
                ]
            }

        });


        voter_table.on('click', '.edit2-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.edit2(data.pro_voter_id);
        9});

        voter_table.on('click', '.edit-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.edit(data.pro_voter_id);
        });

        voter_table.on('click', '.assign-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.assign(data.pro_id_code);
        });

        voter_table.on('click', '.delete-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.pro_voter_id);
        });


        voter_table.on('keypress', '.form-filter', function (e) {
            if (e.charCode == 13)
                self.reload();
        });

        // voter_table.on('click', '.block-btn', function () {
        //     var data = grid.getDataTable().row($(this).parents('tr')).data();
        //     self.block(data.voter_id);
        // });

        // voter_table.on('click', '.unblock-btn', function () {
        //     var data = grid.getDataTable().row($(this).parents('tr')).data();
        //     self.unblock(data.voter_id);
        // });

        // voter_table.on('click', '.activate-btn', function () {
        //     var data = grid.getDataTable().row($(this).parents('tr')).data();
        //     self.activate(data.voter_id);
        // });

        // voter_table.on('click', '.deactivate-btn', function () {
        //     var data = grid.getDataTable().row($(this).parents('tr')).data();
        //     self.deactivate(data.voter_id);
        // });

        // voter_table.on('click', '.view-btn', function () {
        //     var data = grid.getDataTable().row($(this).parents('tr')).data();
        //     self.view(data.voter_id);
        // });

        // voter_table.on('click', '.reset-image-btn', function () {
        //     var data = grid.getDataTable().row($(this).parents('tr')).data();
        //     self.resetImage(data.voter_id);
        // });

        // voter_table.on('keydown', 'input', function (e) {
        //     if (e.keyCode == 13)
        //         self.reload();
        // });

        self.grid = grid;
    },

    openEntryModal: function () {
        this.setState({ showEntryModal: true });
    },

    openNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: true });
    },

    openUploadModal: function () {
        this.setState({ showUploadModal: true });
    },

    openUploadBdayModal: function () {
        this.setState({ showUploadBdayModal: true });
    },

    openUploadVotingStatusModal: function () {
        this.setState({ showUploadVotingStatusModal: true });
    },

    openSmsModal: function () {
        this.setState({ showSmsModal: true });
    },

    openDswdSmsModal: function () {
        console.log("show dswd");
        this.setState({ showDswdSmsModal: true });
    },

    openCapitolSmsModal: function () {
        console.log("show dswd");
        this.setState({ showCapitolSmsModal: true });
    },

    openJpmModal: function () {
        this.setState({ showJpmModal: true });
    },

    edit: function (target) {
        this.setState({ showNewVoterEditModal: true, target: target });
    },

    edit2: function (target) {

        console.log("pro voter id");
        console.log(target);

        this.setState({ showEditModal: true, target: target });
    },

    assign: function (target) {
        console.log("assign location");
        this.setState({ showLocationAssignmentModal: true, target: target });
    },

    delete: function (target) {
        var self = this;

        if (confirm("Are you sure you want to delete this record?")) {
            self.requestDeleteVoter = $.ajax({
                url: Routing.generate("ajax_delete_temporary_voter", { proVoterId: target }),
                type: "DELETE"
            }).done(function (res) {
                console.log('Record has been deleted.');
                self.reload();
            }).fail(function (res) {
                console.log("opps something went wrong");
            });
        }
    },

    closeNewVoterEditModal() {
        this.setState({ showNewVoterEditModal: false, target: null });
    },

    block: function (target) {
        var self = this;
        var reason = prompt("Please indicate the reason for blocking : ", "");

        if (self.isEmpty(reason)) {
            alert("Reason cannot be empty... Please try again.");
        } else {
            console.log("block voter");
            self.requestBlockUser = $.ajax({
                url: Routing.generate("ajax_project_voter_block", { voterId: target, reason: reason }),
                type: "GET"
            }).done(function (res) {
                console.log('voter has been blocked');
                self.reload();
            }).fail(function (res) {
                console.log("opps something went wrong");
            });
        }
    },

    unblock: function (target) {
        var self = this;
        var reason = prompt("Please indicate the reason for unblocking : ", "");

        if (self.isEmpty(reason)) {
            alert("Reason cannot be empty... Please try again.");
        } else {
            self.requestBlockUser = $.ajax({
                url: Routing.generate("ajax_project_voter_unblock", { voterId: target, reason: reason }),
                type: "GET"
            }).done(function (res) {
                console.log("voter has been unblocked");
                self.reload();
            }).fail(function (res) {
                console.log("opps something went wrong");
            });
        }
    },

    activate: function (target) {
        var self = this;
        var reason = prompt("Please indicate the reason for activation : ", "");

        if (self.isEmpty(reason)) {
            alert("Reason cannot be empty... Please try again.");
        } else {
            self.requestBlockUser = $.ajax({
                url: Routing.generate("ajax_project_voter_activate", { voterId: target, reason: reason }),
                type: "GET"
            }).done(function (res) {
                console.log('block user');
                self.reload();
            }).fail(function (res) {
                console.log("opps something went wrong");
            });
        }
    },

    deactivate: function (target) {
        var self = this;
        var reason = prompt("Please indicate the reason for deactivation : ", "");

        if (self.isEmpty(reason)) {
            alert("Reason cannot be empty... Please try again.");
        } else {
            self.requestBlockUser = $.ajax({
                url: Routing.generate("ajax_project_voter_deactivate", { voterId: target, reason: reason }),
                type: "GET"
            }).done(function (res) {
                console.log('block user');
                self.reload();
            }).fail(function (res) {
                console.log("opps something went wrong");
            });
        }
    },


    resetImage: function (target) {
        var self = this;

        if (confirm("Are you sure you want to reset this voter's picture?")) {
            self.requestBlockUser = $.ajax({
                url: Routing.generate("ajax_project_voter_reset_image", { voterId: target }),
                type: "GET"
            }).done(function (res) {
                console.log('voter image has been reset');
                self.reload();
            }).fail(function (res) {
                console.log("opps something went wrong");
            });
        }
    },

    closeEntryModal: function () {
        this.setState({ showEntryModal: false });
        this.reload();
    },

    closeViewModal: function () {
        this.setState({ showViewModal: false, target: null });
    },

    closeUploadModal: function () {
        this.setState({ showUploadModal: false });
        this.reload();
    },

    closeUploadVotingStatusModal: function () {
        this.setState({ showUploadVotingStatusModal: false });
        this.reload();
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
        this.reload();
    },

    closeSmsModal: function () {
        this.setState({ showSmsModal: false });
    },

    closeDswdSmsModal: function () {
        this.setState({ showDswdSmsModal: false });
    },

    closeUploadBdayModal: function () {
        this.setState({ showUploadBdayModal: false });
    },

    closeJpmModal: function () {
        this.setState({ showJpmModal: false });
    },

    closeCloseCapitolSmsModal: function () {
        this.setState({ showCapitolSmsModal: false });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    closeLocationAssignmentModal: function () {
        this.setState({ showLocationAssignmentModal: false });
    },

    closeViewModal: function () {
        this.setState({ showViewModal: false, target: null });
        this.reload();
    },

    handleFilterChange: function () {
        // var self = this;
        // clearTimeout(this.state.typingTimer);
        // this.state.typingTimer = setTimeout(function(){
        //     self.reload();
        // },this.state.doneTypingInterval);
    },


    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    render: function () {
        return (
            React.createElement("div", null, 

                
                    this.state.showNewVoterCreateModal &&
                    React.createElement(VoterTemporaryCreateModal, {
                        show: this.state.showNewVoterCreateModal, 
                        onHide: this.closeNewVoterCreateModal, 
                        notify: this.props.notify, 
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId}
                    ), 
                

                
                    this.state.showNewVoterEditModal &&
                    React.createElement(VoterTemporaryEditModal, {
                        show: this.state.showNewVoterEditModal, 
                        onHide: this.closeNewVoterEditModal, 
                        proVoterId: this.state.target, 
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId}
                    ), 
                

                
                    this.state.showEntryModal &&
                    React.createElement(VoterCreateModal, {
                        show: this.state.showEntryModal, 
                        onHide: this.closeEntryModal, 
                        notify: this.props.notify}
                    ), 
                
                
                    this.state.showUploadModal &&
                    React.createElement(VoterUploadModal, {
                        show: this.state.showUploadModal, 
                        onHide: this.closeUploadModal, 
                        notify: this.props.notify}
                    ), 
                

                
                    this.state.showUploadVotingStatusModal &&
                    React.createElement(VoterUpload2016VotingStatusModal, {
                        show: this.state.showUploadVotingStatusModal, 
                        onHide: this.closeUploadVotingStatusModal, 
                        notify: this.props.notify}
                    ), 
                

                this.state.showUploadBdayModal &&
                    React.createElement(VoterUploadBdayModal, {
                        show: this.state.showUploadBdayModal, 
                        onHide: this.closeUploadBdayModal, 
                        notify: this.props.notify}
                    ), 
                

                this.state.showEditModal &&
                    React.createElement(VoterEditModal, {
                        show: this.state.showEditModal, 
                        onHide: this.closeEditModal, 
                        notify: this.props.notify, 
                        proVoterId: this.state.target, 
                        user: this.state.user, 
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId}
                    ), 
                

                this.state.showViewModal &&
                    React.createElement(VoterViewModal, {
                        show: this.state.showViewModal, 
                        onHide: this.closeViewModal, 
                        notify: this.props.notify, 
                        voterId: this.state.target, 
                        proId: this.state.filters.proId, 
                        electId: this.state.filters.electId}
                    ), 
                

                this.state.showSmsModal &&
                    React.createElement(SmsModal, {
                        show: this.state.showSmsModal, 
                        onHide: this.closeSmsModal, 
                        notify: this.props.notify}
                    ), 
                

                this.state.showDswdSmsModal &&
                    React.createElement(DswdSmsModal, {
                        show: this.state.showDswdSmsModal, 
                        onHide: this.closeDswdSmsModal, 
                        notify: this.props.notify}
                    ), 
                



                this.state.showCapitolSmsModal &&
                    React.createElement(CapitolSmsModal, {
                        show: this.state.showCapitolSmsModal, 
                        onHide: this.closeCapitolSmsModal, 
                        notify: this.props.notify}
                    ), 
                

                this.state.showJpmModal &&
                    React.createElement(VoterJpmModal, {
                        show: this.state.showJpmModal, 
                        onHide: this.closeJpmModal, 
                        notify: this.props.notify}
                    ), 
                


                
                    this.state.showLocationAssignmentModal &&
                    React.createElement(LocationAssignmentModal, {
                        show: this.state.showLocationAssignmentModal, 
                        onHide: this.closeLocationAssignmentModal, 
                        proIdCode: this.state.target, 
                        notify: this.props.notify}
                    ), 
                


                React.createElement("div", {className: "row", id: "voter_component"}, 
                    React.createElement("div", {className: "col-md-7"}, 
                        React.createElement("form", {onSubmit: this.onApplyCode}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("select", {id: "election_select2", className: "form-control form-filter input-sm"}
                                )
                            ), 
                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("select", {id: "province_select2", className: "form-control form-filter input-sm"}
                                )
                            ), 
                            React.createElement("div", {className: "col-md-4"}, 
                                React.createElement("select", {id: "project_select2", className: "form-control form-filter input-sm"}
                                )
                            )
                        )
                    )
                ), 

                React.createElement("div", {className: "table-container"}, 
                    React.createElement("div", {className: "table-actions-wrapper"}
                    ), 
                    React.createElement("table", {id: "voter_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", {className: "text-center"}, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", {className: "text-center"}, "Birthdate"), 
                                React.createElement("th", {className: "text-center"}, "Municipality"), 
                                React.createElement("th", {className: "text-center"}, "Brgy"), 
                                React.createElement("th", {className: "text-center"}, "CL"), 
                                React.createElement("th", {className: "text-center"}, "Prec No."), 
                                React.createElement("th", {className: "text-center"}, "CP No."), 
                                React.createElement("th", {className: "text-center"}, "POS"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "birthdate", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "brgy_cluster", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px", "width": "10px"}}, 
                                    React.createElement("select", {id: "precinct_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "cellphone", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_group", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {className: "text-center"}, 
                                    React.createElement("button", {style: { marginTop: "5px", marginBottom: "5px"}, className: "btn btn-xs green btn-outline filter-submit"}, 
                                        React.createElement("i", {className: "fa fa-search"}), "Search"
                                    )
                                )
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    },

    setAccessCode: function (e) {
        this.setState({ "accessCode": e.target.value });
    },

    onApplyCode: function (e) {
        e.preventDefault();

        var self = this;

        self.requestApplyCode = $.ajax({
            url: Routing.generate("ajax_apply_access_code", { accessCode: this.state.accessCode }),
            type: "GET"
        }).done(function (res) {
            self.reload();
            alert("Code has been applied.Granting data access...");
        }).fail(function () {
            alert("Opps! Invalid Code");
        });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    onKeyDown: function (e) {
        console.log("test");
    }
});

window.VoterDatatable = VoterDatatable;
var VoterComponent = React.createClass({displayName: "VoterComponent",

    notify : function(message,color){
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    render : function(){
        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body"}, 
                    React.createElement(VoterDatatable, {notify: this.notify})
                )
            )
        )
    }
});

setTimeout(function(){
    ReactDOM.render(
    React.createElement(VoterComponent, null),
        document.getElementById('voter-content')
    );
},500);
