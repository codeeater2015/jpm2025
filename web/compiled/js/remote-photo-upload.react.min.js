var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryEditModal = React.createClass({displayName: "VoterTemporaryEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterName: "test",
                    lgcName: "test"
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        console.log("form data");
        console.log(data);

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Voter Information : ", data.voterName, " | LGC : ", data.lgcName)
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-edit-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M", selected: this.state.form.data.gender == 'M'}, "Male"), 
                                        React.createElement("option", {value: "F", selected: this.state.form.data.gender == 'F'}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isCatholic", checked: data.hasPhoto == 1, disabled: "true"}), 
                                        "With Photo", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("br", null), 
                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isInc", checked: data.hasId == 1, disabled: "true"}), 
                                        "With ID", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("br", null), 

                                React.createElement("label", {className: "mt-checkbox"}, 
                                    React.createElement("input", {type: "checkbox", name: "isNonVoter", checked: data.isNonVoter != 1, disabled: "true"}), 
                                        "Is Voter",       
                                    React.createElement("span", null)
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadVoter(3, this.props.proVoterId);
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-edit-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-edit-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-edit-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-edit-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });
        
        $("#new-voter-edit-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#new-voter-edit-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-edit-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-edit-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-edit-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-edit-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-edit-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-edit-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-edit-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });

        $("#new-voter-edit-form #other_position_select2").on("change", function () {
            self.setFormPropValue("position", $(this).val());
        });
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;
            form.data = res;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = res.cellphoneNo;
            form.data.birthdate = moment(res.birthdate).format('YYYY-MM-DD');
            form.data.gender = res.gender;
            form.data.firstname = res.firstname;
            form.data.middlename = res.middlename;
            form.data.lastname = res.lastname;
            form.data.extName = res.extname;
            form.data.civilStatus = res.civilStatus;
            form.data.bloodtype = res.bloodtype;
            form.data.occupation = res.occupation;
            form.data.religion = res.religion;
            form.data.dialect = res.dialect;
            form.data.ipGroup = res.ipGroup;
            form.data.position = res.position;

            $("#new-voter-edit-form #civil_status_select2").empty()
                .append($("<option/>")
                    .val(res.civilStatus)
                    .text(res.civilStatus))
                .trigger("change");


            $("#new-voter-edit-form #bloodtype_select2").empty()
                .append($("<option/>")
                    .val(res.bloodtype)
                    .text(res.bloodtype))
                .trigger("change");


            $("#new-voter-edit-form #occupation_select2").empty()
                .append($("<option/>")
                    .val(res.occupation)
                    .text(res.occupation))
                .trigger("change");

            $("#new-voter-edit-form #religion_select2").empty()
                .append($("<option/>")
                    .val(res.religion)
                    .text(res.religion))
                .trigger("change");

            $("#new-voter-edit-form #dialect_select2").empty()
                .append($("<option/>")
                    .val(res.dialect)
                    .text(res.dialect))
                .trigger("change");

            $("#new-voter-edit-form #ip_group_select2").empty()
                .append($("<option/>")
                    .val(res.ipGroup)
                    .text(res.ipGroup))
                .trigger("change");

            $("#new-voter-edit-form #voter_group_select2").empty()
                .append($("<option/>")
                    .val(res.voterGroup)
                    .text(res.voterGroup))
                .trigger("change");


            $("#new-voter-edit-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(res.municipalityNo)
                    .text(res.municipalityName))
                .trigger("change");

            $("#new-voter-edit-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(res.brgyNo)
                    .text(res.barangayName))
                .trigger("change");


            $("#new-voter-edit-form #other_position_select2").empty()
            .append($("<option/>")
                .val(res.position)
                .text(res.position))
            .trigger("change");

            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-edit-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-edit-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-edit-form #occupation_select2').val();
        data.religion = $('#new-voter-edit-form #religion_select2').val();
        data.dialect = $('#new-voter-edit-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-edit-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-edit-form #voter_group_select2').val();
        data.position = $('#new-voter-edit-form #other_position_select2').val();
        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_patch_project_temporary_voter", { proVoterId: this.props.proVoterId }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.props.onHide();
            self.notify("Record has been updated.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});

window.VoterTemporaryEditModal = VoterTemporaryEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryCreateModal = React.createClass({displayName: "VoterTemporaryCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                    React.createElement(ControlLabel, null, " Precinct No : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.precinctNo, className: "input-sm form-control", onChange: this.setFormProp, name: "precinctNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 
                        
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });


        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#new-voter-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#new-voter-create-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }

        if (!self.props.user.isAdmin) {
            $("#new-voter-create-form #municipality_select2").attr('disabled', 'disabled');
        }
    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, voterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.nodeLabel = res.voterName;
            form.data.nodeOrder = 10;
            form.data.municipalityNo = res.municipalityNo;
            form.data.brgyNo = res.brgyNo;
            form.data.voterId = res.voterId;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? "" : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? "KFC" : res.voterGroup;
            form.data.remarks = self.isEmpty(res.remarks) ? "" : res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");


            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-create-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-create-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-create-form #occupation_select2').val();
        data.religion = $('#new-voter-create-form #religion_select2').val();
        data.dialect = $('#new-voter-create-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-create-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-create-form #voter_group_select2').val();
        data.position = $('#new-voter-create-form #other_position_select2').val();

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_project_temporary_voter"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.VoterTemporaryCreateModal = VoterTemporaryCreateModal;
var Modal = ReactBootstrap.Modal;
var Tab = ReactBootstrap.Tab;
var Tabs = ReactBootstrap.Tabs;
var Nav = ReactBootstrap.Nav;
var NavItem = ReactBootstrap.NavItem;

var VoterCropModal = React.createClass({displayName: "VoterCropModal",

    getInitialState: function () {
        return {
            imageCropper : null
        };
    },

    render: function () {
        let imgUrl = Routing.generate("ajax_get_field_upload_photo", { id: this.props.itemId });

        var photoUrl = imgUrl + "?" + new Date().getTime();
        
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Crop Photo")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                
                React.createElement("div", null, 
                    React.createElement("img", {id: "original_image", style: {maxWidth: "100%"}, src: photoUrl})
                ), 
                React.createElement("div", {className: "col-md-12 text-right", style: { marginTop: "15px"}}, 
                    React.createElement("button", {className: "btn btn-sm btn-primary", onClick: this.saveImage, style: { marginRight : "10px"}}, "Crop Selected Area"), 
                React.createElement("button", {className: "btn btn-sm btn-default", onClick: this.props.onHide}, "Close ")

                )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initCropper();
    },

    initCropper : function(){
        var self = this;
        var image = document.getElementById('original_image');
        var croppable = false;

        var cropper = new Cropper(image, {
            aspectRatio: 4 / 5,
            autoCropArea: 0.65,
            viewMode: 1,
            ready: function () {
              croppable = true;
            },
        });

        this.imageCropper = cropper;
    },

    saveImage : function(){
        
        console.log("saving image");
        var self = this;

        var croppedCanvas = this.imageCropper.getCroppedCanvas();

        croppedCanvas.toBlob(function (blob) {
            console.log("blob data");
            console.log(blob);

            var formData = new FormData();
            formData.append('files[]', blob, 'profile_photo.jpg');

            $.ajax(Routing.generate('ajax_upload_project_voter_photo', { proId: self.props.proId, proVoterId: self.props.proVoterId }), {
            method: 'POST',
            data: formData,
            processData: false,
            contentType: false }).done(function(res){
                self.props.onSuccess();
                self.props.onHide();
            }).fail(function(err){
                console.log("something went wrong");
            });
        });
    }

});

window.VoterCropModal = VoterCropModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterJpmModal = React.createClass({displayName: "VoterJpmModal",

    getInitialState : function(){
        return {
            form : {
                data : {
                  municipality_name : "",
                  barangay_name : ""
                },
                errors : []
            },
            loadingText : ""
        };
    },

    getDefaultProps : function(){
        return {
            create : true
        }
    },

    componentDidMount : function(){
        this.initSelect2();
    },

    initSelect2 : function(){
        var self = this;

        $("#form-municipality-select2").select2({
            casesentitive : false,
            placeholder : "Enter Name...",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('ajax_select2_jpm_municipality'),
                data :  function (params) {
                    return {
                        searchText : params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.municipality_name , text: item.municipality_name};
                        })
                    };
                },
            }
        });

        $("#form-barangay-select2").select2({
            casesentitive : false,
            placeholder : "Enter name...",
            allowClear : true,
            delay : 1500,
            width : '100%',
            containerCssClass: ':all:',
            ajax : {
                url : Routing.generate('ajax_select2_jpm_barangay'),
                data :  function (params) {
                    return {
                        searchText: params.term,
                        municipalityName : $("#form-municipality-select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function(item){
                            return { id:item.barangay_name , text: item.barangay_name};
                        })
                    };
                },
            }
        });

        $("#form-municipality-select2").on("change", function() {
            $("#form-barangay-select2").empty().trigger('change');
            self.setFormPropValue("municipality_name", $(this).val());
        });

        $("#form-barangay-select2").on("change", function() {
            self.setFormPropValue("barangay_name", $(this).val());
        });
    },
    
    setFormPropValue : function(field,value){
        var form = this.state.form;
        form.data[field] = value;
        this.setState({form : form});
    },

    setFormProp : function(e){
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({form : form});
    },

    setErrors : function(errors){
        var form = this.state.form;
        form.errors = errors;

        this.setState({form : form});
    },

    getError : function(field){
        var errors = this.state.form.errors;
        for(var errorField in errors){
            if(errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState : function(field){
        return this.getError(field) != null ? 'error' : '';
    },

    numberWithCommas : function(x) {
        x = parseFloat(x).toFixed(2);
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    },

    isEmpty : function(value){
        return value == null || value == '';
    },

    reset : function(){
      var form = this.state.form;
      form.data.brgyNo = "";
      form.errors = [];

      $("#form-barangay-select2").empty().trigger("change");
      this.setState({details : null , form : form});
    },

    submit : function(e){
        e.preventDefault();
        var data = this.state.form.data;
        var url = 'http://' + window.hostIp + ':8100/voter-report/web/voter/jpm/index.php?municipality_name='+ data.municipality_name + '&barangay_name=' + data.barangay_name;

        this.popupCenter(url, 'JPM LIST', 900, 600);
    },

    popupCenter: function (url, title, w, h) {
        // Fixes dual-screen position                         Most browsers      Firefox  
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;
        var width = 0;
        var height = 0;

        width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

        // Puts focus on the newWindow  
        if (window.focus) {
            newWindow.focus();
        }
    },
    
    render : function(){
        var self = this;
        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "voter-form", enctype: "multipart/form-data"}, 
                        React.createElement("div", {class: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "form-municipality-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formBarangayNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "form-barangay-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {class: "row", style: {marginTop:"20px"}}, 
                            React.createElement("div", {className: "text-right col-md-12"}, 
                                React.createElement("button", {type: "button", className: "btn  btn-default", style: {marginRight : "5px"}, onClick: this.props.onHide}, "Close"), 
                                React.createElement("button", {type: "button", className: "btn blue-madison", onClick: this.submit}, "Submit")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.VoterJpmModal = VoterJpmModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var RemotePhotoUploadItemEditModal = React.createClass({displayName: "RemotePhotoUploadItemEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    filename: "",
                    voterGroup: "",
                    proVoterId: null,
                    proIdCode: null,
                    generatedIdNo: null,
                    remarks: ""
                },
                errors: []
            },
            voter: {
                status: 'I'
            },

            showNewVoterCreateModal: false
        };
    },

    componentDidMount: function () {
        this.loadData(this.props.itemId);
    },


    loadData: function (id) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_field_upload_item_detail", { id: id }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data = res;

            self.setState({ form: form }, self.initSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.item.name, text: item.name };
                        })
                    };
                },
            }
        });

        $("#barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay_alt'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityName: $("#municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters_alt'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: 3,
                        electId: 3,
                        provinceCode: 53,
                        municipalityName: $("#municipality_select2").val(),
                        brgyNo: $("#barangay_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var photo = parseInt(item.has_photo) == 1 ? "Y" : "N";
                            var id = parseInt(item.has_id) == 1 ? 'Y' : "N";
                            console.log(item);

                            var text = item.voter_name + ' - PHOTO(' + photo + ') ID(' + id + ") " + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#reason_select2").select2({
            casesentitive: false,
            placeholder: "Select Reason",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_upload_reason'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.remarks, text: item.remarks };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").on("change", function () {
            console.log("voter id");
            console.log($(this).val());

            if (!self.isEmpty($(this).val())) {
                self.loadVoter(self.props.proId, $(this).val());
            }
        });

        $("#municipality_select2").on("change", function () {
            self.setFieldValue("municipalityName", $(this).val());
        });

        $("#barangay_select2").on("change", function () {
            self.setFieldValue("barangayNo", $(this).val());
        });

        $("#reason_select2").on("change", function () {
            self.setFieldValue("remarks", $(this).val());
        });

        $("#municipality_select2").empty()
            .append($("<option/>")
                .val(this.props.municipalityName)
                .text(this.props.municipalityName))
            .trigger("change");


        var data = self.state.form.data;

        $("#form-voter-select2").empty()
            .append($("<option/>")
                .val(data.proVoterId)
                .text(data.displayName))
            .trigger("change");

        console.log("remarks");
        console.log(data.remarks);

        $("#reason_select2").empty()
            .append($("<option/>")
                .val(data.remarks)
                .text(data.remarks))
            .trigger("change");
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: 3, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.proIdCode = res.proIdCode;
            form.data.voterName = res.voterName;
            form.data.generatedIdNo = res.generatedIdNo;
            form.data.cellphone = res.cellphone;

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';
        form.data.position = '';

        self.setState({ form: form })
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    openNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: true });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false })
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;


        self.requestPost = $.ajax({
            url: Routing.generate('ajax_patch_photo_upload_item', {
                id: this.props.itemId
            }),
            type: "PATCH",
            data: (data)
        }).done(function (res) {
            self.props.onHide();
            if(!self.isEmpty(res.generatedIdNo)){
                self.props.onSuccess(res);
            }
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    render: function () {
        var data = this.state.form.data;

        // if (!this.isEmpty(this.props.proVoterId)) {
        //     var generatedIdNo = this.state.form.data.generatedIdNo;
        //     var photoUrl = window.imgUrl + 3 + '_' + generatedIdNo + "?" + new Date().getTime();
        // }

        let imgUrl = Routing.generate("ajax_get_field_upload_photo", { id: this.props.itemId });

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, dialogClassName: "modal-custom-85", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Edit File")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: "3", 
                            electId: "3", 
                            provinceCode: "3", 
                            show: this.state.showNewVoterCreateModal, 
                            notify: this.props.notify, 
                            onHide: this.closeNewVoterCreateModal}
                        ), 
                    
                    React.createElement("form", {id: "voter-updated-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-5"}, 
                                React.createElement("a", {className: "thumbnail"}, 
                                    React.createElement("img", {src: imgUrl})
                                )
                            ), 
                            React.createElement("div", {className: "col-md-7"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-4"}, 
                                        React.createElement(FormGroup, {controlId: "formMunicipalityNo"}, 
                                            React.createElement(ControlLabel, null, " Municipality : "), 
                                            React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                            )
                                        )
                                    ), 

                                    React.createElement("div", {className: "col-md-4"}, 
                                        React.createElement(FormGroup, {controlId: "formBrgyNo"}, 
                                            React.createElement(ControlLabel, null, " Barangay : "), 
                                            React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                            )
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-8"}, 
                                        React.createElement(FormGroup, {controlId: "formFileDisplayName", validationState: this.getValidationState('fileDisplayName')}, 
                                            React.createElement(ControlLabel, null, " Photo Name : "), 
                                            React.createElement(FormControl, {type: "text", bsClass: "form-control input-sm", name: "fileDisplayName", value: this.state.form.data.fileDisplayName, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('fileDisplayName'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                            React.createElement(ControlLabel, null, " Cellphone : "), 
                                            React.createElement(FormControl, {type: "text", bsClass: "form-control input-sm", name: "cellphone", value: this.state.form.data.cellphone, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('cellphone'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-8"}, 
                                        React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('proVoterId')}, 
                                            React.createElement(ControlLabel, null, " Voter Name : "), 
                                            React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                        )
                                    )

                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-4"}, 
                                        React.createElement("label", {className: "mt-checkbox"}, 
                                            React.createElement("input", {type: "checkbox", name: "isNotFound", checked: data.isNotFound == 1, onChange: this.setFormCheckProp}), 
                                            "Not Found", 
                                            React.createElement("span", null)
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-4"}, 
                                        React.createElement(FormGroup, {controlId: "formRemarks"}, 
                                            React.createElement(ControlLabel, null, " Reason : "), 
                                            React.createElement("select", {id: "reason_select2", className: "form-control form-filter input-sm", name: "reason"}
                                            )
                                        )
                                    )
                                )


                                
                                    //     <div className="row">
                                    //     <div className="col-md-8">
                                    //         <FormGroup controlId="formFilename" validationState={this.getValidationState('filename')}>
                                    //             <ControlLabel > Position : </ControlLabel>
                                    //             <FormControl type="text" bsClass="form-control input-sm" name="filename" value={this.state.form.data.filename} onChange={this.setFormProp} />
                                    //             <HelpBlock>{this.getError('filename')}</HelpBlock>
                                    //         </FormGroup>
                                    //     </div>
                                    // </div>
                                
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement("div", {className: "text-right"}, 
                                    React.createElement("button", {type: "button", className: "btn blue-madison", style: { marginRight: "5px"}, onClick: this.submit}, "Submit"), 
                                    React.createElement("button", {type: "button", className: "btn btn-default", onClick: this.props.onHide}, "Close")
                                )
                            )
                        )

                    )

                )
            )
        );
    }

});

window.RemotePhotoUploadItemEditModal = RemotePhotoUploadItemEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var RemotePhotoUploadItemsModal = React.createClass({displayName: "RemotePhotoUploadItemsModal",
    getInitialState: function () {
        return {
            proIdCode: null,
            member: null,
            showAttendeeModal: false,
            showAttendeeBatchModal: false,
            events: [],
            selectedEvent: null,
            showItemEditModal: false,
            targetId: null,
            municipalityName: null,
            baragayName: null,
            brgyNo: null,
            showItemEditModal: false,
            uploadFilter: "UNLINKED"
        }
    },

    render: function () {
        var self = this;

        if (this.state.member != null) {
            var generatedIdNo = this.state.member.generated_id_no;
            var photoUrl = window.imgUrl + this.props.proId + '_' + generatedIdNo + "?" + new Date().getTime();
        }

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, dialogClassName: "modal-full", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Uploaded Items")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("div", {className: "row"}, 
                        
                            this.state.showItemEditModal && this.state.targetId != null &&
                            (
                                React.createElement(RemotePhotoUploadItemEditModal, {
                                    show: this.state.showItemEditModal, 
                                    onHide: this.closeItemEditModal, 
                                    itemId: this.state.targetId, 
                                    municipalityName: this.state.municipalityName, 
                                    barangayName: this.state.barangayName, 
                                    brgyNo: this.state.brgyNo, 
                                    onSuccess: this.openCropModal}
                                )
                            ), 
                        

                        
                            this.state.showCropModal &&
                            (
                                React.createElement(VoterCropModal, {
                                    proId: "3", 
                                    proVoterId: this.state.data.proVoterId, 
                                    itemId: this.state.data.id, 
                                    generatedIdNo: this.state.data.generatedIdNo, 
                                    show: this.state.showCropModal, 
                                    onHide: this.closeCropModal, 
                                    onSuccess: this.reloadDatatable}
                                )
                            ), 
                        

                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement("div", {className: "mt-radio-inline"}, 
                                React.createElement("label", {className: "mt-radio"}, 
                                    React.createElement("input", {type: "radio", name: "uploadFilter", onChange: this.setUploadFilter, value: "LINKED", checked: this.state.uploadFilter == "LINKED"}), " Linked", 
                                    React.createElement("span", null)
                                ), 
                                React.createElement("label", {className: "mt-radio"}, 
                                    React.createElement("input", {type: "radio", name: "uploadFilter", onChange: this.setUploadFilter, value: "UNLINKED", checked: this.state.uploadFilter == "UNLINKED"}), " Unlinked", 
                                    React.createElement("span", null)
                                ), 
                               
                                React.createElement("label", {className: "mt-radio"}, 
                                    React.createElement("input", {type: "radio", name: "uploadFilter", onChange: this.setUploadFilter, value: "NOT_FOUND", checked: this.state.uploadFilter == "NOT_FOUND"}), "Not FOUND", 
                                    React.createElement("span", null)
                                ), 

                                React.createElement("label", {className: "mt-radio"}, 
                                    React.createElement("input", {type: "radio", name: "uploadFilter", onChange: this.setUploadFilter, value: "ALL", checked: this.state.uploadFilter == "ALL"}), " All", 
                                    React.createElement("span", null)
                                )
                            )
                        ), 
                        
                        React.createElement("div", {className: "col-md-12"}, 

                            React.createElement("div", {className: "table-container"}, 
                                React.createElement("div", {className: "table-actions-wrapper"}
                                ), 
                                React.createElement("table", {id: "photo_upload_items_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                                    React.createElement("thead", null, 
                                        React.createElement("tr", null, 
                                            React.createElement("th", null, "No"), 
                                            React.createElement("th", null, "Uploaded"), 
                                            React.createElement("th", null, "Cropped"), 
                                            React.createElement("th", null, "filename"), 
                                            React.createElement("th", null, "Municipality"), 
                                            React.createElement("th", null, "Barangay"), 
                                            React.createElement("th", null, "Position"), 
                                            React.createElement("th", null, "Actions")
                                        ), 
                                        React.createElement("tr", null, 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null, 
                                                React.createElement("select", {className: "form-control form-filter input-sm", name: "is_linked"}, 
                                                    React.createElement("option", {value: "-1"}, "---"), 
                                                    React.createElement("option", {value: "0"}, "NO"), 
                                                    React.createElement("option", {value: "1"}, "YES")
                                                )
                                            ), 
                                            React.createElement("td", {style: { padding: "10px 5px"}}, 
                                                React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "filename", onChange: this.handleFilterChange})
                                            ), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", null), 
                                            React.createElement("td", {className: "text-center"}, 
                                                React.createElement("button", {style: { marginTop: "5px", marginBottom: "5px"}, className: "btn btn-xs green btn-outline filter-submit"}, 
                                                    React.createElement("i", {className: "fa fa-search"}), "Search"
                                                )
                                            )
                                        )
                                    ), 
                                    React.createElement("tbody", null
                                    )
                                )
                            )

                        )

                    )
                )
            )
        );
    },


    componentDidMount: function () {
        this.initDatatable();
    },


    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        console.log("init datatable");

        var photo_upload_items_datatable = $("#photo_upload_items_datatable");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_datatable_field_upload_items", { id: this.props.id }, true);

        grid_project_event.init({
            src: photo_upload_items_datatable,
            dataTable: {
                "bState": true,
                "autoWidth": true,
                "serverSide": true,
                "processing": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.hdrId = '53';
                        d.filename = $('#photo_upload_items_datatable input[name="filename"]').val();
                        d.hasGeneratedIdNo = $('#photo_upload_items_datatable select[name="is_linked"]').val();
                        d.uploadFilter = self.state.uploadFilter;
                    }
                },
                pageLength: 10,
                columnDefs: [
                    {
                        'className': 'text-center valign-middle',
                        'orderable': false,
                        'targets': [0, 2, 3, 4, 5, 6, 7]
                    }
                ],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 20,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "id",
                        "className": "text-center",
                        "render": function (data, type, row) {
                            let imgUrl = Routing.generate("ajax_get_field_upload_photo", { id: data });
                            return '<img src="' + imgUrl + '" style="width:150px;height:auto;"/><strong style="margin-top:10px;">';
                        }
                    },
                    {
                        "data": "id",
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var photoUrl = window.imgUrl + 3 + '_' + row.generated_id_no + "?" + new Date().getTime();
                            return '<img src="' + photoUrl + '" style="width:150px;height:auto;"/><strong style="margin-top:10px;">';
                        }
                    },
                    {
                        "data": "filename",
                        "className": "text-center",
                        "width": 250
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "data": "voter_group",
                        "className": "text-center",
                        "width": 50,
                    },
                    {
                        "width": 100,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var cropBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-green crop-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-crop' ></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs btn-danger delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";

                            return editBtn + cropBtn + deleteBtn;
                        }
                    }
                ],
            }

        });


        photo_upload_items_datatable.on('click', '.edit-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.edit(data.id, data.municipality_name, data.barangay_name, data.brgy_no);
        });

        photo_upload_items_datatable.on('click', '.crop-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({
                data: {
                    id: data.id,
                    proVoterId: data.pro_voter_id,
                    generatedIdNo: data.generated_id_no
                },
                showCropModal: true
            })
        });

        photo_upload_items_datatable.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    edit: function (id, municipalityName, barangayName, brgyNo) {
        this.setState({
            showItemEditModal: true,
            targetId: id,
            municipalityName: municipalityName,
            barangayName: barangayName,
            brgyNo: brgyNo
        });
    },

    delete: function (id) {
        var self = this;

        if (confirm("continue delete?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_field_upload_item", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reloadDatatable();
            });
        }
    },

    closeItemEditModal: function () {
        this.setState({
            showItemEditModal: false,
            targetId: null,
            municipalityName: null,
            barangayName: null,
            brgyNo: null
        },this.reloadDatatable());
    },

    setFormProp: function (e) {
        this.setState({ proIdCode: e.target.value }, this.search);
    },

    reloadDatatable: function () {
        this.grid.getDataTable().ajax.reload(null, false);
    },

    openAttendeeBatchModal: function () {
        this.setState({ showAttendeeBatchModal: true });
    },

    openCropModal: function (data) {
        this.setState({ showCropModal: true, data: data })
    },

    closeCropModal: function () {
        this.setState({ showCropModal: false, data: null });
    },

    closeAttendeeBatchModal: function () {
        this.setState({ showAttendeeBatchModal: false });
    },

    setUploadFilter: function (e) {
        console.log('change upload filter');

        if (e.target.checked) {
            this.setState({ 'uploadFilter': e.target.value }, this.reloadDatatable);
        }
    },
});


window.RemotePhotoUploadItemsModal = RemotePhotoUploadItemsModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var RemotePhotoUploadModal = React.createClass({displayName: "RemotePhotoUploadModal",

    getInitialState: function () {
        return {
            images: []
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, bsSize: "lg", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Uploaded Images")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("div", {id: "gallery"}, 
                        this.state.images.map(function (item) {
                            let imgUrl = Routing.generate("ajax_get_field_upload_photo", { id: item.id });
                            console.log(imgUrl);

                            return (
                                React.createElement("img", {
                                    src: imgUrl, 
                                    dataImage: imgUrl}
                                )
                            );
                        })
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.loadImages(this.props.id);
    },

    loadImages: function (id) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_field_upload_images", { hdrId: id }),
            type: "GET"
        }).done(function (res) {
            self.setState({ images: res }, self.initGallery);
        });
    },

    initGallery() {
        var gallery = $("#gallery").unitegallery();
        gallery.enterFullscreen();
    }
});


window.RemotePhotoUploadModal = RemotePhotoUploadModal;
var RemotePhotoUploadDatatable = React.createClass({displayName: "RemotePhotoUploadDatatable",

    getInitialState: function () {
        return {
            showPhotoModal: false,
            showItemsModal : false,
            targetId: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            gPhotos : 0,
            gLinked : 0,
            gId : 0,
            gUploads : 0,
            gTarget : 0,
            gUnlinked : 0
        }
    },

    componentDidMount: function () {
        this.loadUser(window.userId);
        
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.initDatatable);
        });
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();
        var field_photo_table = $("#field_photo_table");

        grid.init({
            src: field_photo_table,
            dataTable: {
                "bState": true,
                "autoWidth": true,
                "serverSide": true,
                "processing": true,
                "deferLoading" : true,
                "ajax": {
                    "url": Routing.generate('ajax_datatable_remote_upload'),
                    "type": "GET",
                    "data": function (d) {
                        d.barangayName = $('#field_photo_table input[name="barangay_name"]').val();
                        d.voterGroup = self.props.voterGroup;
                        d.uploadDate = $('#field_photo_table input[name="upload_date"]').val();
                        d.municipalityName = self.props.municipalityName;

                        self.setState({
                            gPhotos : 0,
                            gLinked : 0,
                            gUnlinked : 0,
                            gId : 0,
                            gUploads : 0,
                            gTarget : 0
                        }); 
                    }
                },
                pageLength: 100,
                columnDefs: [
                    {
                        'className': 'text-center valign-middle',
                        'orderable': false,
                        'targets': [0, 2, 3, 4, 5]
                    }
                ],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "barangay_name",
                        "className" : "text-center",
                        "render" : function(data,type,row){
                            return '<strong class="font-blue">' +  data +'</strong>' ;
                        }
                    },
                    {
                        "data": "total_photos",
                        "className": "text-center",
                        "width": 40,
                        "render" : function(data,type,row){

                            var totalMember = 0;
                            var totalPrecints = parseInt(row.total_precincts);

                            switch(self.props.voterGroup){
                                case 'LPPP' : 
                                    totalMember = totalPrecints;
                                    break;
                                case 'LPPP1' :
                                    totalMember = totalPrecints * 6;
                                    break;
                                case 'LPPP2' : 
                                    totalMember = totalPrecints * 6 * 4;
                                    break;
                                case 'LPPP3' :
                                    totalMember = totalPrecints * 6 * 4 * 4;
                                    break;
                            }

                            var fontClass = "";
                            if(parseInt(data) > totalMember)
                                fontClass = 'font-red';
                            else if(parseInt(data) < totalMember)
                                fontClass = 'font-blue';
                            else
                                fontClass = '';

                            return parseInt(data) == 0 ? "" : '<strong class="' + fontClass + '">' +  data +'</strong>' ;
                        }
                    },
                    {
                        "data": "total_cleared",
                        "className": "text-center",
                        "width": 40
                    },
                    {
                        "data": "total_photos",
                        "className": "text-center",
                        "width": 40,
                        "render" : function(data, type, row){
                            return parseInt(data) - parseInt(row.total_cleared);
                        }
                    },
                   
                    {
                        "width": 100,
                        "render": function (data, type, row) {
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';
                            var itemsBtn = '<button class="btn btn-xs blue items-btn"><i class="fa fa-file"></i></button>';
                            var downloadBtn = '<button class="btn btn-xs green download-btn"><i class="fa fa-download"></i></button>';

                            var btnGroup = '';
                            btnGroup += editBtn;
                            //btnGroup += itemsBtn;
                            
                            if(self.state.user != null && self.state.user.isAdmin){
                                btnGroup += downloadBtn;
                                btnGroup += deleteBtn;
                            }

                            return row.id != null && row.voter_group == self.props.voterGroup ? btnGroup : "";
                        },
                        "className": "text-center"
                    }
                ]
            }

        });


        field_photo_table.on('click', '.edit-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showPhotoModal: true, targetId: data.id });
        });

        
        field_photo_table.on('click', '.items-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showItemsModal: true, targetId: data.id });
        });

        field_photo_table.on('click', '.delete-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        field_photo_table.on('click', '.download-btn', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            var url = Routing.generate("ajax_get_download_photo_album", { id: data.id });

            window.location.assign(url);
        });

        self.grid = grid;
    },

    delete: function (id) {
        var self = this;

        if (confirm("are you sure you want to clear image files?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_remote_photo_upload", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },
    
    closeItemsModal:function(){
        this.setState({ showItemsModal : false, targetId : null});
    },

    reload: function () {
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    closePhotoModal: function () {
        this.setState({ showPhotoModal: false, targetId: null })
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                    this.state.showPhotoModal &&
                    React.createElement(RemotePhotoUploadModal, {
                        show: this.state.showPhotoModal, 
                        onHide: this.closePhotoModal, 
                        id: this.state.targetId}
                    ), 
                

                
                    this.state.showItemsModal &&
                    React.createElement(RemotePhotoUploadItemsModal, {
                        show: this.state.showItemsModal, 
                        onHide: this.closeItemsModal, 
                        id: this.state.targetId}
                    ), 
                

                React.createElement("div", {className: "table-container"}, 
                    React.createElement("div", {className: "table-actions-wrapper"}
                    ), 
                    React.createElement("table", {id: "field_photo_table", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", {className: "text-center"}, "No"), 
                                React.createElement("th", {className: "text-center"}, "Barangay"), 
                                React.createElement("th", {className: "text-center"}, "Uploads"), 
                                React.createElement("th", {className: "text-center"}, "Downloaded"), 
                                React.createElement("th", {className: "text-center"}, "Pending Downloads"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}, className: "text-right"}, "Totals"), 
                                React.createElement("td", {className: "text-center"}, " ", this.state.gUploads), 
                                React.createElement("td", {className: "text-center"}, this.state.gLinked), 
                                React.createElement("td", {className: "text-center"}, this.state.gLinked), 
                                React.createElement("td", {className: "text-center"}
                                )
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangay_name", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", {className: "text-center"}, 
                                    React.createElement("button", {style: { marginTop: "5px", marginBottom: "5px"}, className: "btn btn-xs green btn-outline filter-submit"}, 
                                        React.createElement("i", {className: "fa fa-search"}), "Search"
                                    )
                                )
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.RemotePhotoUploadDatatable = RemotePhotoUploadDatatable;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var RemotePhotoUpload = React.createClass({displayName: "RemotePhotoUpload",

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    componentDidMount: function () {
        var myDropzone = new Dropzone("#photo-uploader", { url: Routing.generate("ajax_remote_photo_upload", {}) });

        this.dropzone = myDropzone;
        this.loadUser(window.userId);
        this.initSelect2();
    },

    getInitialState: function () {
        return {
            voterGroup: null,
            municipalityName: null,
            brgyNo: null,
            showDatatable: false
        };
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.initSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#form-municipality-select2").select2({
            casesentitive: false,
            placeholder: "Enter municipality...",
            width: '100%',
            allowClear: true,
            disabled: !self.state.user.isAdmin,
            tags: true,
            containerCssClass: ":all:",
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.name, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-barangay-select2").select2({
            casesentitive: false,
            placeholder: "Enter name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay_alt'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53,
                        municipalityName: $("#form-municipality-select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-voter-group-select2").select2({
            casesentitive: false,
            placeholder: "Enter Category",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#form-municipality-select2").on("change", function () {
            $("#form-barangay-select2").empty()
                .trigger("change");

            self.setState({ "municipalityName": $(this).val() });
            self.reloadDatatable();
        });

        $("#form-barangay-select2").on("change", function () {
            self.dropzone.destroy();
            var myDropzone = new Dropzone("#photo-uploader", {
                url: Routing.generate("ajax_remote_photo_upload", {
                    municipalityName: $("#form-municipality-select2").val(),
                    brgyNo: $(this).val(),
                    voterGroup: $("#form-voter-group-select2").val(),
                })
            });

            self.dropzone = myDropzone;
            self.setState({ "brgyNo": $(this).val() });
        });

        $("#form-voter-group-select2").on("change", function () {
            self.dropzone.destroy();
            var myDropzone = new Dropzone("#photo-uploader", {
                url: Routing.generate("ajax_remote_photo_upload", {
                    municipalityName: $("#form-municipality-select2").val(),
                    brgyNo: $("#form-barangay-select2").val(),
                    voterGroup: $(this).val()
                })
            });

            self.dropzone = myDropzone;
            self.setState({ "voterGroup": $(this).val() });
        });

        $("#form-voter-group-select2").empty()
            .append($("<option/>")
                .val('LPPP1')
                .text('LPPP1'))
            .trigger("change");

        if (self.state.user != null) {
            $("#form-municipality-select2").empty()
                .append($("<option/>")
                    .val(self.state.user.description)
                    .text(self.state.user.description))
                .trigger("change");

            self.setState({ showDatatable: true });
        }
    },

    reloadDatatable: function () {
        console.log("reloading datatable");
        if (this.state.showDatatable)
            this.refs.fieldDatatable.reload();
    },

    render: function () {
        return (
            React.createElement("div", null, 
                React.createElement("div", {className: "row"}, 
                    React.createElement("div", {className: "col-md-8"}, 
                        React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                            React.createElement("div", {className: "portlet-body"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-8"}, 
                                        React.createElement("h4", null, React.createElement("strong", null, "Remote Photo Uploads"))
                                    ), 
                                    React.createElement("div", {className: "col-md-4"}, 
                                        React.createElement(FormGroup, {controlId: "formVoterGroup"}, 
                                            React.createElement(ControlLabel, null, " Position : "), 
                                            React.createElement("select", {id: "form-voter-group-select2", className: "form-control input-sm"}
                                            )
                                        )
                                    )
                                ), 
                                this.state.showDatatable &&
                                    React.createElement(RemotePhotoUploadDatatable, {ref: "fieldDatatable", voterGroup: this.state.voterGroup, municipalityName: this.state.municipalityName})
                                
                            )
                        )
                    ), 
                    React.createElement("div", {className: "col-md-4"}, 
                        React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                            React.createElement("div", {className: "portlet-body"}, 
                                React.createElement("h4", null, React.createElement("strong", null, "Upload Images Here")), 

                                React.createElement(FormGroup, {controlId: "formBarangayNo"}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "form-municipality-select2", className: "form-control input-sm"}
                                    )
                                ), 

                                React.createElement(FormGroup, {controlId: "formBarangayNo"}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "form-barangay-select2", className: "form-control input-sm"}
                                    )
                                ), 

                                React.createElement("form", {action: "/file-upload", 
                                    className: "dropzone", 
                                    id: "photo-uploader"}
                                )
                            )
                        )

                    )
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(RemotePhotoUpload, null),
        document.getElementById('page-container')
    );
}, 500);
