
var HouseholdDetailDatatable = React.createClass({displayName: "HouseholdDetailDatatable",

    getInitialState: function () {
        return {
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            showEditModal: false
        }
    },

    componentDidMount: function () {
        this.initDatatable(this.props.householdId);
    },

    initDatatable: function (householdId) {
        var self = this;
        var grid = new Datatable();

        var project_recruitment_detail_datatable = $("#project_recruitment_detail_datatable");
        var grid_project_event = new Datatable();

        var url = Routing.generate("ajax_get_datatable_household_detail", { householdId: householdId }, true);

        grid_project_event.init({
            src: project_recruitment_detail_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.provinceCode = '53';
                        d.voterName = $('#project_recruitment_detail_datatable input[name="voterName"]').val();
                        d.barangayName = $('#project_recruitment_detail_datatable input[name="barangayName"]').val();
                        d.householdId = self.props.householdId;
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 20,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "className": "text-left"
                    },
                    {
                        "data": "birthdate",
                        "className": "text-center",
                        "width": 100
                    },
                    {
                        "data": "relationship",
                        "className": "text-center",
                        "width": 50
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 150
                    },
                    {
                        "data": "cellphone",
                        "className": "text-center",
                        "width": 100,
                    },

                    {
                        "width": 60,
                        "className" : "text-center",
                        "render": function (data, type, row) {
                            var deleteBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-red-sunglo delete-button' data-toggle='tooltip' data-title='Delete'><i class='fa fa-trash' ></i></a>";
                            var editBtn = "<a href='javascript:void(0);' class='btn btn-xs font-white bg-primary edit-button' data-toggle='tooltip' data-title='Edit'><i class='fa fa-edit' ></i></a>";

                            return deleteBtn;
                        }
                    }
                ],
            }
        });


        project_recruitment_detail_datatable.on('click', '.delete-button', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        // project_recruitment_detail_datatable.on('click', '.edit-button', function () {
        //     var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
        //     self.edit(data.voter_id);
        // });

        self.grid = grid_project_event;
    },

    edit: function (voterId) {
        this.setState({ showEditModal: true, target: voterId })
    },

    closeEditModal: function () {
        this.reload();
        this.setState({ showEditModal: false, target: null });
    },

    delete: function (householdDetailId) {
        var self = this;

        if (confirm("Are you sure you want to remove this member ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_household_detail", { householdDetailId: householdDetailId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    reloadFiltered: function (precinctNo) {
        var self = this;
        $('#project_recruitment_detail_datatable input[name="assignedPrecinct"]').val(precinctNo);

        setTimeout(function () {
            self.grid.getDataTable().ajax.reload();
        });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },


    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    render: function () {
        return (
            React.createElement("div", null, 

                this.state.showEditModal &&
                    React.createElement(VoterEditModal, {
                        show: this.state.showEditModal, 
                        onHide: this.closeEditModal, 
                        notify: this.props.notify, 
                        voterId: this.state.target, 
                        proId: this.props.proId}
                    ), 
                

                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "project_recruitment_detail_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Birthdate"), 
                                React.createElement("th", null, "Relationship"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Cellphone #"), 
                                React.createElement("th", null, "Actions")
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "birthdate", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "relationship", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangayName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null), 
                                React.createElement("td", null)
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.HouseholdDetailDatatable = HouseholdDetailDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdMemberCreateModal = React.createClass({displayName: "HouseholdMemberCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null,
                    voterId: null,
                    cellphone: "",
                    voterGroup: "",
                    assignedPrecinct: "",
                    precinctNo: "",
                    remarks: "",
                    inputVoterGroup: "KFC"
                },
                errors: []
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#municipality_select2").val(),
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1000,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: "custom-option",
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: self.props.proId,
                        electId: self.props.electId,
                        provinceCode: 53,
                        municipalityNo: $("#municipality_select2").val(),
                        brgyNo: $("#barangay_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#relationship_select2").select2({
            casesentitive: false,
            placeholder: "Select relation",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_relationship'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.relationship, text: item.relationship };
                        })
                    };
                },
            }
        });

        
        $("#other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });

        $("#form-voter-select2").on("change", function () {
            self.loadVoter(self.props.proId, $(this).val());
        });

        $("#municipality_select2").on("change", function () {
            self.setFieldValue("municipalityNo", $(this).val());
        });

        $("#barangay_select2").on("change", function () {
            self.setFieldValue("barangayNo", $(this).val());
        });

        $("#relationship_select2").on("change", function () {
            self.setFieldValue("relationship", $(this).val());
        });

        $("#other_position_select2").on("change", function(){
            self.setFieldValue("position", $(this).val());
        });

        $("#municipality_select2").empty()
            .append($("<option/>")
                .val(this.props.municipalityNo)
                .text(this.props.municipalityName))
            .trigger("change");

        $("#barangay_select2").empty()
            .append($("<option/>")
                .val(this.props.barangayNo)
                .text(this.props.barangayName))
            .trigger("change");

    },

    loadVoter: function (proId, proVoterId) {
        var self = this;
        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {

            var chunks = res.voterName.split(",");
            var firstname = '';
            var middlename = '';
            var lastname = '';

            if (chunks.length > 1) {
                chunks = chunks[1].trim().split(" ");
                lastname = res.voterName.split(",")[0];
                middlename = chunks.length > 1 ? chunks[chunks.length - 1] : '';
                firstname = res.voterName.split(",")[1].replace(middlename, '');;
            } else {
                chunks = res.voterName.trim().split(" ");
                lastname = chunks[0];
                firstname = chunks[1];
                middlename = chunks.length > 2 ? chunks[2] : '';
            }

            var form = self.state.form;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphone = self.isEmpty(res.cellphoneNo) ? '' : res.cellphoneNo;
            form.data.birthdate = !self.isEmpty(res.birthdate) ? moment(res.birthdate).format('YYYY-MM-DD') : '';
            form.data.gender = res.gender;
            form.data.firstname = self.isEmpty(res.firstname) ? firstname.trim() : res.firstname;
            form.data.middlename = self.isEmpty(res.middlename) ? middlename.trim() : res.middlename;
            form.data.lastname = self.isEmpty(res.lastname) ? lastname.trim() : res.lastname;
            form.data.extName = res.extname;
            form.data.position = res.position;

            $("#other_position_select2").empty()
            .append($("<option/>")
                .val(res.position)
                .text(res.position))
            .trigger("change");

            self.setState({ form: form });
        });

        var form = self.state.form;

        form.data.proVoterId = null;
        form.data.voterId = null;
        form.data.cellphone = '';
        form.data.gender = '';
        form.data.remarks = '';
        form.data.position = '';

        self.setState({ form: form })
    },

    reset: function () {
        var form = this.state.form;
        form.data.proVoterId = "";
        form.data.cellphoneNo = "";
        form.data.firstname = "";
        form.data.lastname = "";
        form.data.middlename = "";
        form.data.extName = "";
        form.data.gender = "";
        form.data.birthdate = "";
        form.data.relationship = "";
        form.data.position = "";
        form.data.remarks = "";

        form.errors = [];

        $("#form-voter-select2").empty().trigger("change");
        $("#relationship_select2").empty().trigger("change");

        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFieldValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setNewProfile: function(data){
        var self = this;
        
        $("#form-voter-select2").empty()
        .append($("<option/>")
            .val(data.proVoterId)
            .text(data.voterName))
        .trigger("change")
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;

        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },


    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.householdId = self.props.householdId;
        data.proId = self.props.proId;
        data.electId = self.props.electId;
        data.position = $("#other_position_select2").val();

        self.requestAddAttendee = $.ajax({
            url: Routing.generate("ajax_post_household_detail"),
            type: "POST",
            data: data
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
            self.notify("Member has been added.", "teal");
        }).fail(function (err) {
            self.notify("Form Validation Failed.", "ruby");
            self.setErrors(err.responseJSON);
        });
    },

    closeNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: false });
    },

    openNewVoterCreateModal: function () {
        this.setState({ showNewVoterCreateModal: true })
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;

        return (
            React.createElement(Modal, {keyboard: false, enforceFocus: false, bsSize: "lg", backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Member Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewVoterCreateModal &&
                        React.createElement(VoterTemporaryCreateModal, {
                            proId: 3, 
                            electId: 3, 
                            provinceCode: 53, 
                            show: this.state.showNewVoterCreateModal, 
                            onHide: this.closeNewVoterCreateModal, 
                            onSuccess: this.setNewProfile, 

                            municipalityNo: this.props.municipalityNo, 
                            municipalityName: this.props.municipalityName, 
                            barangayNo: this.props.barangayNo, 
                            barangayName: this.props.barangayName}
                        ), 
                    

                    React.createElement("form", {id: "voter-node-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo"}, 
                                    React.createElement(ControlLabel, null, " Municipality : "), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo"}, 
                                    React.createElement(ControlLabel, null, " Barangay : "), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-7"}, 
                                React.createElement(FormGroup, {controlId: "formProVoterId", validationState: this.getValidationState('voterName')}, 
                                    React.createElement(ControlLabel, null, " Voter Name : "), 
                                    React.createElement("select", {id: "form-voter-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('voterName'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("button", {style: { marginTop: "25px"}, onClick: this.openNewVoterCreateModal, className: "btn btn-primary btn-sm", type: "button"}, " New Voter ")
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Apelyido : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Pangalan : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Gitnang Pangalan : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, value: data.gender, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            )
                        ), 
                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphone", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphone, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphone"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "position"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formRelationship", validationState: this.getValidationState('relationship')}, 
                                    React.createElement(ControlLabel, null, " Relationship : "), 
                                    React.createElement("select", {id: "relationship_select2", className: "form-control form-filter input-sm", name: "relationship"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('relationship'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                    React.createElement(ControlLabel, null, " Remarks : "), 
                                    React.createElement("textarea", {rows: "5", value: this.state.form.data.remarks, className: "input-sm form-control", onChange: this.setFormProp, name: "remarks"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('remarks'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", disabled: this.isEmpty(this.state.form.data.proVoterId), type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.HouseholdMemberCreateModal = HouseholdMemberCreateModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var HouseholdMemberModal = React.createClass({displayName: "HouseholdMemberModal",
    getInitialState: function () {
        return {
            member: null,
            showAddMemberModal: false,
            header : {
                householdCode : "",
                voterName : "",
                barangayName : "",
                municipalityName : "",
                cellphone : "",
                lgc : {
                    voter_name : ""
                }
            }
        }
    },

    render: function () {
        var self = this;
        var data = self.state.header;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, dialogClassName: "modal-custom-85", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Household Information : ", data.voterName, " | LGC : ", data.lgc.voter_name, " | ",  data.lgc.cellphone == "" ? "NO CP" : data.lgc.cellphone, " ")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showAddMemberModal &&
                        React.createElement(HouseholdMemberCreateModal, {
                            proId: self.props.proId, 
                            provinceCode: 53, 
                            municipalityNo: this.state.header.municipalityNo, 
                            municipalityName: this.state.header.municipalityName, 
                            barangayNo: this.state.header.barangayNo, 
                            barangayName: this.state.header.barangayName, 

                            electId: self.props.electId, 
                            householdId: this.props.id, 
                            show: this.state.showAddMemberModal, 
                            notify: this.props.notify, 
                            onSuccess: this.reloadDatatable, 
                            onHide: this.closeAddMemberModal}
                        ), 
                    
                    React.createElement("div", {style: { marginBottom : "25px"}}, 
                        React.createElement("strong", null, "Household # : "), " ",  this.state.header.householdCode, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Household Leader : "), " ",  this.state.header.voterName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Municipality : "), " ", this.state.header.municipalityName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Barangay : "), "  ", this.state.header.barangayName, " ", React.createElement("br", null), 
                        React.createElement("strong", null, "Cellphone : "), "  ", this.state.header.cellphone
                    ), 

                    React.createElement("div", {className: "col-md-7", style: { paddingLeft: "0px", marginBottom: "10px"}}, 
                        React.createElement("button", {onClick: this.openAddMemberModal, type: "button", className: "btn btn-sm btn-primary"}, "Add Member")
                    ), 

                    React.createElement(HouseholdDetailDatatable, {ref: "DetailDatatable", 
                        municipalityNo: this.state.header.municipalityNo, 
                        municipalityName: this.state.header.municipalityName, 
                        barangayNo: this.state.header.barangayNo, 
                        barangayName: this.state.header.barangayName, 
                        notify: this.props.notify, 
                        householdId: this.props.id, 
                        electId: self.props.electId, 
                        proId: self.props.proId
                    }
                    )
                
                    )
            )
        );
    },

    componentDidMount: function () {
        this.loadHeader(this.props.id);
    },

    loadHeader : function(id){
        var self = this;

        self.requestRecruiter = $.ajax({
            url : Routing.generate("ajax_get_household_header",{ id : id }),
            type : "GET"
        }).done(function(res){
            self.setState({ header : res });
        });
    },

    setFormProp: function (e) {
        this.setState({ proIdCode: e.target.value }, this.search);
    },

    reloadDatatable: function () {
        this.refs.DetailDatatable.reload();
    },

    openAddMemberModal : function(){
        console.log("showing add member modal");
        this.setState({ showAddMemberModal : true })
    },

    closeAddMemberModal : function(){
        this.setState({ showAddMemberModal : false});
    }

});


window.HouseholdMemberModal = HouseholdMemberModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var VoterTemporaryCreateModal = React.createClass({displayName: "VoterTemporaryCreateModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Voter Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('brgyNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "brgyNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('brgyNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPrecinctNo", validationState: this.getValidationState('precinctNo')}, 
                                    React.createElement(ControlLabel, null, " Precinct No : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.precinctNo, className: "input-sm form-control", onChange: this.setFormProp, name: "precinctNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('precinctNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Blood Type"), 
                                    React.createElement("select", {id: "bloodtype_select2", className: "form-control form-filter input-sm", name: "bloodtype"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Occupation"), 
                                    React.createElement("select", {id: "occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 


                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Religion"), 
                                    React.createElement("select", {id: "religion_select2", className: "form-control form-filter input-sm", name: "religion"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Dialect"), 
                                    React.createElement("select", {id: "dialect_select2", className: "form-control form-filter input-sm", name: "dialect"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Ip Group"), 
                                    React.createElement("select", {id: "ip_group_select2", className: "form-control form-filter input-sm", name: "ipGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "JPM Position"), 
                                    React.createElement("select", {id: "voter_group_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay Position"), 
                                    React.createElement("select", {id: "other_position_select2", className: "form-control form-filter input-sm", name: "voterGroup"}
                                    )
                                )
                            )

                        ), 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-3"}, 
                                React.createElement(FormGroup, {controlId: "formCellphoneNo", validationState: this.getValidationState('cellphone')}, 
                                    React.createElement(ControlLabel, null, " Cellphone No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.cellphoneNo, className: "input-sm form-control", onChange: this.setFormProp, name: "cellphoneNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('cellphone'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            )
                        ), 
                        
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #voter-recruit-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: self.props.electId,
                        proId: self.props.proId,
                        provinceCode: self.props.provinceCode,
                        municipalityNo: self.props.municipalityNo,
                        brgyNo: self.props.brgyNo
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.voter_id, text: text };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_civil_status'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #bloodtype_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_bloodtype'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.bloodtype, text: item.bloodtype };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #religion_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_religion'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.religion, text: item.religion };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #dialect_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_dialect'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dialect, text: item.dialect };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #ip_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_ip_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.ip_group, text: item.ip_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #voter_group_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_group'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.voter_group, text: item.voter_group };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #other_position_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_voter_position'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.position, text: item.position };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #bloodtype_select2").on("change", function () {
            self.setFormPropValue("bloodtype", $(this).val());
        });

        $("#new-voter-create-form #occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #religion_select2").on("change", function () {
            self.setFormPropValue("religion", $(this).val());
        });

        $("#new-voter-create-form #dialect_select2").on("change", function () {
            self.setFormPropValue("dialect", $(this).val());
        });

        $("#new-voter-create-form #ip_group_select2").on("change", function () {
            self.setFormPropValue("ipGroup", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });


        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#new-voter-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#new-voter-create-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }
    },

    loadVoter: function (proId, voterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, voterId: voterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.nodeLabel = res.voterName;
            form.data.nodeOrder = 10;
            form.data.municipalityNo = res.municipalityNo;
            form.data.brgyNo = res.brgyNo;
            form.data.voterId = res.voterId;
            form.data.proVoterId = res.proVoterId;
            form.data.cellphoneNo = self.isEmpty(res.cellphoneNo) ? "" : res.cellphoneNo;
            form.data.voterGroup = self.isEmpty(res.voterGroup) ? "KFC" : res.voterGroup;
            form.data.remarks = self.isEmpty(res.remarks) ? "" : res.remarks;

            $("#voter-group-select2").empty()
                .append($("<option/>")
                    .val(form.data.voterGroup)
                    .text(form.data.voterGroup))
                .trigger("change");


            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.civilStatus = $('#new-voter-create-form #civil_status_select2').val();
        data.bloodtype = $('#new-voter-create-form #bloodtype_select2').val();
        data.occupation = $('#new-voter-create-form #occupation_select2').val();
        data.religion = $('#new-voter-create-form #religion_select2').val();
        data.dialect = $('#new-voter-create-form #dialect_select2').val();
        data.ipGroup = $('#new-voter-create-form #ip_group_select2').val();
        data.voterGroup = $('#new-voter-create-form #voter_group_select2').val();
        data.position = $('#new-voter-create-form #other_position_select2').val();

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_project_temporary_voter"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.VoterTemporaryCreateModal = VoterTemporaryCreateModal;
var Recruitment2Datatable = React.createClass({displayName: "Recruitment2Datatable",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showEditModal: false,
            showRecruitsModal: false,
            showHouseholdMemberModal : false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,

            header: {
                voterName: "",
                voterGroup: "",
                barangayName: "",
                position: "",
                municipalityName: "",
                cellphone: "",
                lgc: {
                    voter_name: "",
                    cellphone: ""
                }
            },
            otherInfoLoaded: false,
            loadingInfo: false,
            otherInfo: {
                householdInfo: {
                    totalMembers: 0,
                    totalVoter: 0,
                    totalNonVoter: 0,
                    totalWithCp: 0
                },
                recInfo: {
                    totalMembers: 0,
                    totalVoter: 0,
                    totalNonVoter: 0,
                    totalWithCp: 0
                }
            }
        }
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var recruitment_table = $("#recruitment_table");
        var grid_project_recruitment = new Datatable();
        var url = Routing.generate("ajax_get_datatable_recruitment_header", {}, true);

        grid_project_recruitment.init({
            src: recruitment_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "dom": "pit",
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.voterName = $('#recruitment_table input[name="voter_name"]').val();
                        d.municipalityName = $('#recruitment_table input[name="municipality_name"]').val();
                        d.barangayName = $('#recruitment_table input[name="barangay_name"]').val();
                        d.voterGroup = $('#recruitment_table input[name="voter_group"]').val();
                        d.electId = self.props.electId;
                        d.provinceCode = self.props.provinceCode;
                        d.municipalityNo = self.props.municipalityNo;
                        d.brgyNo = self.props.brgyNo;

                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2]
                }, {
                    'className': 'align-center',
                    'targets': [2]
                }],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "render": function (data, type, row) {
                            return "<a class='hover-button' href='javascript:void(0)'>" + data + "</a>";
                        }
                    },
                    {
                        "data": "voter_group",
                        "className": "text-center",
                        "width": 30
                    }
                ],
            }
        });


        recruitment_table.on('click', '.recruits-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showRecruitsModal: true, target: data.id });
        });

        recruitment_table.on('click', '.delete-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        recruitment_table.on('click', '.hover-button', function () {
            var data = grid_project_recruitment.getDataTable().row($(this).parents('tr')).data();
            console.log("mouse entering");
            self.displayPreview(data.id);
        });

        self.grid = grid_project_recruitment;
    },

    initHouseholdDatatable: function () {
        var self = this;
        var grid2 = new Datatable();

        var household_table = $("#household_table");
        var grid_project_household = new Datatable();
        var url = Routing.generate("ajax_get_datatable_household_header_no_recruitment", {}, true);

        grid_project_household.init({
            src: household_table,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "autoWidth": true,
                "deferRender": true,
                "dom": "pit",
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.voterName = $('#household_table input[name="voter_name"]').val();
                        d.municipalityName = $('#household_table input[name="municipality_name"]').val();
                        d.barangayName = $('#household_table input[name="barangay_name"]').val();
                        d.voterGroup = $('#household_table input[name="voter_group"]').val();
                        d.electId = self.props.electId;
                        d.provinceCode = self.props.provinceCode;
                        d.municipalityNo = self.props.municipalityNo;
                        d.brgyNo = self.props.brgyNo;

                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0]
                }],
                "order": [
                    [1, "asc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "voter_name",
                        "render": function (data, type, row) {
                            return "<a class='hover-button' href='javascript:void(0)'>" + data + "</a>";
                        }
                    }
                ],
            }
        });

        
        household_table.on('click', '.hover-button', function () {
            var data = grid_project_household.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showHouseholdMemberModal: true, householdTarget: data.id });
        });

        self.grid2 = grid_project_household;
    },

    displayPreview: function (id) {
        console.log("displaying preview");
        console.log(id);

        this.setState({ showPreview: true, target: id });
        this.loadHeader(id);
    },

    loadHeader: function (id) {
        var self = this;

        self.requestRecruiter = $.ajax({
            url: Routing.generate("ajax_get_recruitment_header_full", { recId: id }),
            type: "GET"
        }).done(function (res) {
            self.setState({ header: res, otherInfoLoaded: false, loadingInfo: false });
        });
    },

    loadOtherInfo: function () {
        var self = this;

        self.requestRecruitOtherInfo = $.ajax({
            url: Routing.generate("ajax_get_recruitment_other_info", { proIdCode: self.state.header.proIdCode }),
            type: "GET"
        }).done(function (res) {
            self.setState({ otherInfo: res, otherInfoLoaded: true, loadingInfo: false });
        });

        this.setState({ loadingInfo: true });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false, target: null });
    },

    openCreateKCL1Modal: function () {
        this.setState({ showCreateKCL1Modal: true });
    },

    closeCreateKCL1Modal: function () {
        this.setState({ showCreateKCL1Modal: false, target: null });
    },

    closeRecruitsModal: function () {
        this.setState({ showRecruitsModal: false, target: null });
    },

    closeHouseholdMemberModal: function () {
        this.setState({ showHouseholdMemberModal: false, householdTarget: null });
    },

    delete: function (recId) {
        var self = this;

        if (confirm("Are you sure you want to delete this record ?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_recruitment_header", { recId: recId }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;

        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },


    handleFilter2Change: function () {
        var self = this;

        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reloadHousehold();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        if (this.grid != null) {
            console.log("i am reloading");
            this.grid.getDataTable().ajax.reload();
        }
    },

    reloadHousehold: function () {
        if (this.grid2 != null) {
            console.log("i am reloading");
            this.grid2.getDataTable().ajax.reload();
        }
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        var header = this.state.header;
        var otherInfo = this.state.otherInfo;

        var self = this;

        if (this.state.target != null) {
            var generatedIdNo = this.state.header.generatedIdNo;
            var photoUrl = window.imgUrl + 3 + '_' + generatedIdNo + "?" + new Date().getTime();
        }

        return (
            React.createElement("div", null, 

                React.createElement("div", {className: "row"}, 
                    React.createElement("div", {className: "col-md-4"}, 
                        React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                            React.createElement("div", {className: "table-container"}, 
                                React.createElement("table", {id: "recruitment_table", className: "table table-striped table-bordered", width: "100%"}, 
                                    React.createElement("thead", null, 
                                        React.createElement("tr", null, 
                                            React.createElement("th", null, "No"), 
                                            React.createElement("th", null, "Recruiter Name"), 
                                            React.createElement("th", null, "Pos")
                                        ), 
                                        React.createElement("tr", null, 
                                            React.createElement("td", null), 
                                            React.createElement("td", {style: { padding: "10px 5px"}}, 
                                                React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilterChange})
                                            ), 
                                            React.createElement("td", {style: { padding: "10px 5px"}}, 
                                                React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_group", onChange: this.handleFilterChange})
                                            )
                                        )
                                    ), 
                                    React.createElement("tbody", null
                                    )
                                )
                            )
                        )
                    ), 

                    React.createElement("div", {className: "col-md-4"}, 
                        React.createElement("div", {className: "portlet light profile-sidebar-portlet "}, 
                            React.createElement("div", {className: "profile-userpic"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6 col-md-offset-3"}, 
                                        React.createElement("img", {src: photoUrl, className: "img-responsive", alt: ""})
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "profile-usertitle"}, 
                                React.createElement("div", {className: "profile-usertitle-name text-center"}, "  ", React.createElement("strong", null, header.voterName)), 
                                React.createElement("div", {className: "profile-usertitle-job  text-center"}, " ", React.createElement("em", null, header.voterGroup), " ")
                            ), 

                            React.createElement("div", {className: "profile-usermenu"}, 
                                React.createElement("br", null), 
                                React.createElement("div", null, React.createElement("strong", null, "Cellphone : "), self.isEmpty(header.cellphone) ? "No contact #" : header.cellphone), 
                                React.createElement("div", null, React.createElement("strong", null, "Barangay Position : "), self.isEmpty(header.position) ? "N/A" : header.position)
                            ), 

                            React.createElement("div", null, 
                                React.createElement("div", {className: "portlet-body"}, 
                                    React.createElement("div", null, React.createElement("strong", null, "Municipality : "), header.municipalityName), 
                                    React.createElement("div", null, React.createElement("strong", null, "Barangay : "), header.barangayName), 
                                    React.createElement("div", null, React.createElement("strong", null, "Precinct # : "), header.precinctNo), 
                                    React.createElement("div", null, React.createElement("strong", null, "Is Voter : "), header.isNonVoter == 1 ? "NO" : "YES"), 

                                    React.createElement("br", null), 

                                    React.createElement("div", null, React.createElement("strong", null, "LGC : "), header.lgc.voter_name), 
                                    React.createElement("div", null, React.createElement("strong", null, "LGC CP # : "), header.lgc.cellphone), 

                                    React.createElement("br", null), 

                                    React.createElement("div", null, React.createElement("strong", null, "Gender : "), header.gender, " "), 
                                    React.createElement("div", null, React.createElement("strong", null, "Birthdate : "), header.birthdate), 
                                    React.createElement("div", null, React.createElement("strong", null, "Dialect : "), header.dialect), 
                                    React.createElement("div", null, React.createElement("strong", null, "Religion : "), header.religion), 

                                    React.createElement("br", null), 
                                    !this.state.otherInfoLoaded && React.createElement("button", {disabled: this.state.loadingInfo, onClick: this.loadOtherInfo, className: "btn btn-sm btn-primary "}, "Load Household & Recruitment"), 
                                    this.state.otherInfoLoaded &&
                                        (
                                            React.createElement("div", null, 
                                                React.createElement("div", null, React.createElement("strong", null, "Household Members : "), 
                                                    otherInfo.householdInfo.totalMembers, 
                                                        "(Voter :", otherInfo.householdInfo.totalVoter, "," + ' ' +
                                                        "With CP : ", otherInfo.householdInfo.totalWithCp, " )"
                                                    ), 
                                                React.createElement("div", null, 
                                                    React.createElement("strong", null, "Recruits : "), 
                                                    otherInfo.recInfo.totalMembers, 
                                                        "(Voter :", otherInfo.recInfo.totalVoter, "," + ' ' +
                                                            "With CP : ", otherInfo.recInfo.totalWithCp, " )"
                                                    )
                                            )
                                        )
                                    
                                )
                            )
                        )


                    ), 

                    React.createElement("div", {className: "col-md-4"}, 

                    
                        this.state.showHouseholdMemberModal &&
                        React.createElement(HouseholdMemberModal, {
                            id: this.state.householdTarget, 
                            show: this.state.showHouseholdMemberModal, 
                            reload: this.reloadHousehold, 
                            onHide: this.closeHouseholdMemberModal, 
                            proId: this.props.proId, 
                            electId: this.props.electId}
                        ), 
                    
    

                        React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                            React.createElement("table", {id: "household_table", className: "table table-striped table-bordered", width: "100%"}, 
                                React.createElement("thead", null, 
                                    React.createElement("tr", null, 
                                        React.createElement("th", null, "No"), 
                                        React.createElement("th", null, "Household Leader")
                                    ), 
                                    React.createElement("tr", null, 
                                        React.createElement("td", null), 
                                        React.createElement("td", {style: { padding: "10px 5px"}}, 
                                            React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voter_name", onChange: this.handleFilter2Change})
                                        )
                                    )
                                ), 
                                React.createElement("tbody", null
                                )
                            )
                        )

                    )
                )
            )
        )
    }
});

window.Recruitment2Datatable = Recruitment2Datatable;
var Recruitment2Component = React.createClass({displayName: "Recruitment2Component",
    getInitialState: function () {
        return {
            user: null,
            filters: {
                electId: 3,
                provinceCode: 53,
                proId: 3,
                municipalityNo : null,
                brgyNo : null
            }
        };
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadUser(window.userId);
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },


    initSelect2: function () {
        var self = this;

        $("#handler_component #election_select2").select2({
            casesentitive: false,
            placeholder: "Select Election...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#handler_component #project_select2").select2({
            casesentitive: false,
            placeholder: "Select Project...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_projects'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.pro_id, text: item.pro_name };
                        })
                    };
                },
            }
        });

        $("#handler_component #province_select2").select2({
            casesentitive: false,
            placeholder: "Enter Province...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province_strict'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });

        
        $("#handler_component #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Enter Municipality...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: $('#handler_component #province_select2').val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });
        
        $("#handler_component #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Enter barangay...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $('#handler_component #municipality_select2').val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });


        $("#handler_component #election_select2").on("change", function () {
            var filters = self.state.filters;
            filters.electId = $(this).val();

            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #project_select2").on("change", function () {
            var filters = self.state.filters;
            filters.proId = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #province_select2").on("change", function () {
            var filters = self.state.filters;
            filters.provinceCode = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });

        $("#handler_component #municipality_select2").on("change", function () {
            var filters = self.state.filters;
            filters.municipalityNo = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });
        
        $("#handler_component #barangay_select2").on("change", function () {
            var filters = self.state.filters;
            filters.brgyNo = $(this).val();
            self.setState({ filters: filters }, self.reload);
        });
    },

    reload : function(){
        console.log("reloading datatable");
        this.refs.RecruitDatatable.reload();
        this.refs.RecruitDatatable.reloadHousehold();
    },


    reinitSelect2: function () {
        var self = this;

        if (!self.isEmpty(self.state.user.project)) {
            var provinceCode = self.state.user.project.provinceCode;

            self.requestProvince = $.ajax({
                url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
                type: "GET"
            }).done(function (res) {
                $("#handler_component #province_select2").empty()
                    .append($("<option/>")
                        .val(res.province_code)
                        .text(res.name))
                    .trigger("change");
            });

            self.requestProject = $.ajax({
                url: Routing.generate("ajax_get_project", { proId: self.state.user.project.proId }),
                type: "GET"
            }).done(function (res) {
                $("#handler_component #project_select2").empty()
                    .append($("<option/>")
                        .val(res.proId)
                        .text(res.proName))
                    .trigger("change");

                self.refs.RecruitDatatable.initDatatable();
                self.refs.RecruitDatatable.initHouseholdDatatable();
            });
        }

        self.requestActiveElection = $.ajax({
            url: Routing.generate("ajax_get_active_election"),
            type: "GET"
        }).done(function (res) {
            $("#handler_component #election_select2").empty()
                .append($("<option/>")
                    .val(res.electId)
                    .text(res.electName))
                .trigger("change");
        });

        if (!self.state.user.isAdmin) {
            $("#handler_component #election_select2").attr('disabled', 'disabled');
            $("#handler_component #province_select2").attr('disabled', 'disabled');
            $("#handler_component #project_select2").attr('disabled', 'disabled');
        }
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },


    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                React.createElement("div", {className: "portlet light portlet-fit bordered", style: { marginTop: "10px"}}, 
                    React.createElement("div", {className: "portlet-body"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement("h4", {className: "bold"}, "Recruitement Page")
                            )
                        ), 

                        React.createElement("div", {className: "row", id: "handler_component"}, 
                            React.createElement("form", {onSubmit: this.onApplyCode}, 
                                React.createElement("div", {className: "col-md-2"}, 
                                    React.createElement("select", {id: "project_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-2"}, 
                                    React.createElement("select", {id: "election_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-2"}, 
                                    React.createElement("select", {id: "province_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-2"}, 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-2"}, 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm"}
                                    )
                                )
                            )
                        )

                    )
                ), 

                React.createElement(Recruitment2Datatable, {
                    electId: this.state.filters.electId, 
                    proId: this.state.filters.proId, 
                    provinceCode: this.state.filters.provinceCode, 
                    municipalityNo: this.state.filters.municipalityNo, 
                    brgyNo: this.state.filters.brgyNo, 
                    ref: "RecruitDatatable"})

            )
        )
    },

    numberWithCommas: function (x) {
        var parts = x.toString().split(".");
        parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        return parts.join(".");
    }

});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(Recruitment2Component, null),
        document.getElementById('page-container')
    );
}, 500);
