var ProfileAssistanceDatatable = React.createClass({displayName: "ProfileAssistanceDatatable",

    getInitialState: function () {
        return {
            showEditModal: false,
            showReleaseModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        this.initDatatable();
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var jpm_assistance_datatable = $("#jpm_profile_assistance_datatable");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get_datatable_profile_assistance", {}, true);

        grid_project_event.init({
            src: jpm_assistance_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "deferRender": true,
                "pageLength": 100,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.clientName = self.props.fullname;
                        d.dependentName = self.props.fullname;
                        d.controlNo = $('#jpm_profile_assistance_datatable input[name="controlNo"]').val();
                        d.hospital = $('#jpm_profile_assistance_datatable input[name="hospital"]').val();
                        d.transDate = $('#jpm_profile_assistance_datatable input[name="transDate"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6, 7, 8]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "trans_date",
                        "className": "text-center",
                        "width": 80,
                    },
                       {
                        "data": "control_no",
                        "className": "text-center",
                        "width": 80,
                    },
                    {
                        "data": "client_name",
                        "className": "text-left",
                    },
                    {
                        "data": "dependent_name",
                        "className": "text-left",
                    },
                    {
                        "data": "hospital",
                        "className": "text-center",
                        "width": 100,
                    },
                    {
                        "data": "final_bill",
                        "className": "text-center",
                        "width": 50,
                    },
                    {
                        "data": "amount",
                        "className": "text-center",
                        "width": 50,
                    },
                    {
                        "width": 80,
                        "render": function (data, type, row) {

                            var viewBtn = '<button class="btn btn-xs default edit2-btn"><i class="fa fa-eye"></i></button>';
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var assignBtn = '<button class="btn btn-xs blue assign-btn"><i class="fa fa-edit"></i>Assign</button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';
                            var btnGroup = '';

                            btnGroup += editBtn + deleteBtn;

                            return btnGroup;
                        },

                        "className": "text-center"
                    }
                ],
            }
        });

        jpm_assistance_datatable.on('click', '.edit-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        });

        jpm_assistance_datatable.on('click', '.delete-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
        this.reload();
    },

    closeReleaseModal: function () {
        this.setState({ showReleaseModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    openClosingModal: function () {
        this.setState({ showClosingModal: true });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this transaction?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_assistance_hdr", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {

        console.log("relaod databable");
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    openProfile: function (id) {
        this.setState({ showEditModal: true, target: id });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                    this.state.showEditModal &&
                    React.createElement(AssistanceEditModal, {
                        show: this.state.showEditModal, 
                        reload: this.reload, 
                        onHide: this.closeEditModal, 
                        id: this.state.target}
                    ), 
                
                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "jpm_profile_assistance_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Date"), 
                                React.createElement("th", null, "Ctrl #"), 
                                React.createElement("th", null, "Client Name"), 
                                React.createElement("th", null, "Patient Name"), 
                                React.createElement("th", null, "Hospital"), 
                                React.createElement("th", null, "Bill"), 
                                React.createElement("th", null, "Granted"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "transDate", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                     React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "controlNo", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "clientName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "dependentName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                     React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "hospital", onChange: this.handleFilterChange})
                                ), 
                                
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}
                                )
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.ProfileAssistanceDatatable = ProfileAssistanceDatatable;
var ProfilesDatatable = React.createClass({displayName: "ProfilesDatatable",

    getInitialState: function () {
        return {
            showEditModal: false,
            showDetailModal: false,
            showReleaseModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        this.initDatatable();
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var profiles_datatable = $("#profiles_datatable");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get_datatable_assistance_profile", {}, true);

        grid_project_event.init({
            src: profiles_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "deferRender": true,
                "pageLength": 100,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.municipalityName = $('#profiles_datatable input[name="municipalityName"]').val();
                        d.barangayName = $('#profiles_datatable input[name="barangayName"]').val();
                        d.fullname = $('#profiles_datatable input[name="fullname"]').val();
                        d.voterName = $('#profiles_datatable input[name="voterName"]').val();
                        d.purok = $('#profiles_datatable input[name="purok"]').val();
                        d.birthdate = $('#profiles_datatable input[name="birthdate"]').val();
                        d.contactNo = $('#profiles_datatable input[name="contactNo"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6, 7, 8]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "fullname",
                        "className": "text-left",
                         "width": 150,
                    },
                       {
                        "data": "voter_name",
                        "className": "text-left",
                        "width": 150,
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "width": 80,

                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 80,
                    },
                    {
                        "data": "purok",
                        "className": "text-center",
                        "width": 100,
                    },
                    {
                        "data": "contact_no",
                        "className": "text-center",
                        "width": 70,
                    },
                    {
                        "data": "birthdate",
                        "className": "text-center",
                        "width": 80,
                    },
                    {
                        "width": 80,
                        "render": function (data, type, row) {

                            var viewBtn = '<button class="btn btn-xs default profile-view-btn"><i class="fa fa-eye"></i></button>';
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var assignBtn = '<button class="btn btn-xs blue assign-btn"><i class="fa fa-edit"></i>Assign</button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';
                            var btnGroup = '';

                            btnGroup +=  viewBtn + editBtn + deleteBtn;

                            return btnGroup;
                        },

                        "className": "text-center"
                    }
                ],
            }
        });

        profiles_datatable.on('click', '.profile-view-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            console.log('view item');
            console.log(data);
            self.setState({ showDetailModal: true, target: data.id });
        });

        profiles_datatable.on('click', '.edit-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        });

        profiles_datatable.on('click', '.delete-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
        this.reload();
    },

    closeReleaseModal: function () {
        this.setState({ showReleaseModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    closeDetailModal: function () {
        this.setState({ showDetailModal: false, target : null });
    },

    openClosingModal: function () {
        this.setState({ showClosingModal: true });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this profile?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_assistance_profile", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {

        console.log("relaod databable");
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    openProfile: function (id) {
        this.setState({ showEditModal: true, target: id });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                    this.state.showEditModal &&
                    React.createElement(AssistanceProfileEditModal, {
                        show: this.state.showEditModal, 
                        reload: this.reload, 
                        onHide: this.closeEditModal, 
                        id: this.state.target}
                    ), 
                

                
                    this.state.showDetailModal &&
                    React.createElement(AssistanceProfileDetailModal, {
                        show: this.state.showDetailModal, 
                        onHide: this.closeDetailModal, 
                        id: this.state.target}
                    ), 
                

                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "profiles_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Name"), 
                                React.createElement("th", null, "Voter Name"), 
                                React.createElement("th", null, "Municipality"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Purok"), 
                                React.createElement("th", null, "Contact No"), 
                                React.createElement("th", null, "Birthdate"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "fullname", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                     React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "voterName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "municipalityName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangayName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "purok", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "contactNo", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                     React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "birthdate", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}
                                )
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.ProfilesDatatable = ProfilesDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var AssistanceProfileDetailModal = React.createClass({displayName: "AssistanceProfileDetailModal",

    getInitialState: function () {
        return {
            showCreateModal: false,
            showDatatable : false,
            form: {
                data: {
                    fullname: "loading..."
                }
            }
        };
    },

    componentDidMount: function () {
        this.loadData(this.props.id);
    },

    loadData: function (id) {
        var self = this;

        self.requestProfile = $.ajax({
            url: Routing.generate("ajax_get_assistance_profile", { id: id }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data = res;
            self.setState({ form: form, showDatatable : true });
        });
    },

    reloadDatatable: function () {
        this.refs.detailDatatable.reload();
    },

    render: function () {
        var self = this;
        var data = self.state.form.data;
        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, dialogClassName: "modal-custom-85", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, self.state.form.data.fullname)
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-8"}, 
                            React.createElement("div", null, React.createElement("strong", null, "Profile Name : "), " ", data.fullname, " "), 
                            React.createElement("div", null, React.createElement("strong", null, "Voter Name : "), " ", data.voterName, " "), 
                            React.createElement("br", null), 
                            React.createElement("div", null, React.createElement("strong", null, "Birthdate : "), " ", data.birthdate, " "), 
                            React.createElement("div", null, React.createElement("strong", null, "Gender : "), " ", data.gender, " "), 
                            React.createElement("div", null, React.createElement("strong", null, "Civil Status: "), " ", data.civilStatus, " "), 
                            React.createElement("br", null), 
                            React.createElement("div", null, React.createElement("strong", null, "Trabaho: "), " ", data.occupation, " "), 
                            React.createElement("div", null, React.createElement("strong", null, "Monthly Income : "), " ", data.monthlyIncome, " ")
                        ), 
                        React.createElement("div", {className: "col-md-4"}, 
                            React.createElement("div", null, React.createElement("strong", null, "District : "), " ", data.district, " "), 
                            React.createElement("div", null, React.createElement("strong", null, "Municipality : "), " ", data.municipalityName, " "), 
                            React.createElement("div", null, React.createElement("strong", null, "Barangay : "), " ", data.barangayName, " "), 
                            React.createElement("div", null, React.createElement("strong", null, "Purok : "), " ", data.purok, " ")
                        )
                    ), 
                    React.createElement("div", {className: "clearfix"}), 
                    React.createElement("br", null), 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            
                                self.state.showDatatable &&
                                React.createElement(ProfileAssistanceDatatable, {fullname: self.state.form.data.fullname, ref: "ProfileDetailDatatable"})
                            
                        )
                    )
                )
            )
        );
    }
});


window.AssistanceProfileDetailModal = AssistanceProfileDetailModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var AssistanceEditModal = React.createClass({displayName: "AssistanceEditModal",

    getInitialState: function () {
        return {
            showNewProfileModal: false,
            form: {
                data: {
                    finalBill: 0,
                    amount: 0,
                    hospital: "",
                    dependentDiagnosis: "",
                    transDate: "",
                    transType: "",
                    remarks: "",
                    clientProfileId: null,
                    dependentProfileId: null
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, bsSize: "lg", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Edit Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewProfileModal &&
                        React.createElement(AssistanceNewProfileModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            show: this.state.showNewProfileModal, 
                            onHide: this.closeNewProfileModal}
                        ), 
                    

                    React.createElement("form", {id: "assist-edit-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formTransDate", validationState: this.getValidationState('transDate')}, 
                                            React.createElement(ControlLabel, null, " Date : "), 
                                            React.createElement("input", {type: "date", value: this.state.form.data.transDate, className: "input-sm form-control", onChange: this.setFormProp, name: "transDate"}), 
                                            React.createElement(HelpBlock, null, this.getError('transDate'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formTransDate", validationState: this.getValidationState('controlNo')}, 
                                            React.createElement(ControlLabel, null, " Control No : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.controlNo, className: "input-sm form-control", onChange: this.setFormProp, name: "controlNo"}), 
                                            React.createElement(HelpBlock, null, this.getError('controlNo'))
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-10"}, 
                                        React.createElement(FormGroup, {controlId: "formClientProfileId", validationState: this.getValidationState('clientProfileId')}, 
                                            React.createElement(ControlLabel, null, " Client Name : "), 
                                            React.createElement("select", {id: "voter-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('clientProfileId'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-2"}, 
                                        React.createElement("button", {style: { marginTop: "25px"}, onClick: self.openNewProfileModal, type: "button", className: "btn btn-sm btn-primary"}, "New Profile")
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-10"}, 
                                        React.createElement(FormGroup, {controlId: "formDependentProfileId", validationState: this.getValidationState('dependentProfileId')}, 
                                            React.createElement(ControlLabel, null, " Patient Name : "), 
                                            React.createElement("select", {id: "beneficiary-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('dependentProfileId'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-2"}, 
                                        React.createElement("button", {style: { marginTop: "25px"}, onClick: self.openNewProfileModal, type: "button", className: "btn btn-sm btn-primary"}, "New Profile")
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formHospitalName", validationState: this.getValidationState('hospital')}, 
                                            React.createElement(ControlLabel, null, " Hospital : "), 
                                            React.createElement("select", {id: "hospital_select2", className: "form-control form-filter input-sm", name: "hospital"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('hospital'))
                                        )
                                    ), 

                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formTransType", validationState: this.getValidationState('transType')}, 
                                            React.createElement(ControlLabel, null, " Type of Assistance : "), 
                                            React.createElement("select", {id: "type_of_assistance_select2", className: "form-control form-filter input-sm", name: "transType"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('transType'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formDependentDiagnosis", validationState: this.getValidationState('dependentDiagnosis')}, 
                                            React.createElement(ControlLabel, null, " Diagnosis : "), 
                                            React.createElement("select", {id: "diagnosis_select2", className: "form-control form-filter input-sm", name: "dependentDiagnosis"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('dependentDiagnosis'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formFinalBill", validationState: this.getValidationState('finalBill')}, 
                                            React.createElement(ControlLabel, null, " Final Bill : "), 
                                            React.createElement(FormControl, {bsClass: "form-control input-sm", type: "number", step: "any", name: "finalBill", value: this.state.form.data.finalBill, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('finalBill'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formAmount", validationState: this.getValidationState('amount')}, 
                                            React.createElement(ControlLabel, null, " Granted Amount : "), 
                                            React.createElement(FormControl, {bsClass: "form-control input-sm", type: "number", step: "any", name: "amount", value: this.state.form.data.amount, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('amount'))
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                            React.createElement(ControlLabel, null, " Remarks : "), 
                                            React.createElement(FormControl, {componentClass: "textarea", rows: "6", bsClass: "form-control input-sm", name: "remarks", value: this.state.form.data.remarks, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('remarks'))
                                        )
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right"}, 
                            React.createElement("button", {type: "button", className: "btn btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                            React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.submit}, "Submit")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadData(this.props.id);
    },

    loadData: function (id) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_assistance_header", { id: id }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.controlNo = res.controlNo;
            form.data.transDate = res.transDate;
            form.data.transType = res.transType;
            form.data.hospital = res.hospital;
            form.data.finalBill = res.finalBill;
            form.data.amount = res.amount;
            form.data.remarks = res.remarks;

            $("#assist-edit-form #type_of_assistance_select2").empty()
            .append($("<option/>")
                .val(res.transType)
                .text(res.transType))
            .trigger("change");

            $("#assist-edit-form #hospital_select2").empty()
            .append($("<option/>")
                .val(res.hospital)
                .text(res.hospital))
            .trigger("change");

            $("#assist-edit-form #diagnosis_select2").empty()
            .append($("<option/>")
                .val(res.dependentDiagnosis)
                .text(res.dependentDiagnosis))
            .trigger("change");


            var clientText = res.clientName + " | " +  res.purok + " " + res.barangayName + ", " + res.municipalityName;

            $("#assist-edit-form #voter-select2").empty()
            .append($("<option/>")
                .val(res.clientProfileId)
                .text(clientText))
            .trigger("change");

            var dependentText = res.dependentName + " | " +  res.dependentAddress;
            
            $("#assist-edit-form #beneficiary-select2").empty()
            .append($("<option/>")
                .val(res.dependentProfileId)
                .text(dependentText))
            .trigger("change");

            self.setState({ form: form });
        });
    },


    initSelect2: function () {
        var self = this;


        $("#assist-edit-form #voter-select2").select2({
            casesentitive: false,
            placeholder: "Select Applicant Name",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            disabled : true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assistance_profiles'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.fullname + ' ( ' + item.municipality_name + ',' + item.barangay_name + ' | ' + item.purok + ' | ' + item.contact_no;

                            return { id: item.id, text: text };
                        })
                    };
                },
            }
        });

        $("#assist-edit-form #beneficiary-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            disabled : true, 
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_assistance_profiles'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 4,
                        proId: 3,
                        provinceCode: 53,
                        municipalityNo: $("#assist-edit-form #municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.fullname + ' ( ' + item.municipality_name + ',' + item.barangay_name + ' | ' + item.purok + ' | ' + item.contact_no;

                            return { id: item.id, text: text };
                        })
                    };
                },
            }
        });

        $("#assist-edit-form #type_of_assistance_select2").select2({
            casesentitive: false,
            placeholder: "Select Type Of Assistance",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_type'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.trans_type, text: item.trans_type };
                        })
                    };
                },
            }
        });

        $("#assist-edit-form #hospital_select2").select2({
            casesentitive: false,
            placeholder: "Select Hospital",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },

            ajax: {
                url: Routing.generate('ajax_select2_assist_hospital'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.hospital, text: item.hospital };
                        })
                    };
                },
            }
        });

        $("#assist-edit-form #diagnosis_select2").select2({
            casesentitive: false,
            placeholder: "Select Diagnosis",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },

            ajax: {
                url: Routing.generate('ajax_select2_assist_diagnosis'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dependent_diagnosis, text: item.dependent_diagnosis };
                        })
                    };
                },
            }
        });

        $("#assist-edit-form #voter-select2").on("change", function () {
            console.log('setting profile id');
            console.log($(this).val());

            self.setFormPropValue('clientProfileId', $(this).val());
        });

        $("#assist-edit-form #beneficiary-select2").on("change", function () {
            console.log('setting dependent id');
            console.log($(this).val());

            self.setFormPropValue('dependentProfileId', $(this).val());
        });

        $("#assist-edit-form #type_of_assistance_select2").on("change", function () {
            self.setFormPropValue('transType', $(this).val());
        });

        $("#assist-edit-form #hospital_select2").on("change", function () {
            self.setFormPropValue('hospital', $(this).val());
        });

        $("#assist-edit-form #diagnosis_select2").on("change", function () {
            self.setFormPropValue('dependentDiagnosis', $(this).val());
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    openNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: true });
    },

    closeNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: false });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_patch_jpm_assistance", {id : self.props.id }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.reset();
            self.props.reload();
            self.props.onHide();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.AssistanceEditModal = AssistanceEditModal;
var AssistanceDatatable = React.createClass({displayName: "AssistanceDatatable",

    getInitialState: function () {
        return {
            showEditModal: false,
            showReleaseModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500,
            user: null,
            filters: {
                electId: null,
                provinceCode: null,
                proId: null
            }
        }
    },

    componentDidMount: function () {
        this.initDatatable();
    },

    initDatatable: function () {
        var self = this;
        var grid = new Datatable();

        var jpm_assistance_datatable = $("#jpm_assistance_datatable");
        var grid_project_event = new Datatable();
        var url = Routing.generate("ajax_get_datatable_jpm_assistance", {}, true);

        grid_project_event.init({
            src: jpm_assistance_datatable,
            loadingMessage: 'Loading...',
            "dataTable": {
                "bState": true,
                "deferRender": true,
                "pageLength": 100,
                "ajax": {
                    "url": url,
                    "type": 'GET',
                    "data": function (d) {
                        d.municipalityName = $('#jpm_assistance_datatable input[name="municipalityName"]').val();
                        d.barangayName = $('#jpm_assistance_datatable input[name="barangayName"]').val();
                        d.clientName = $('#jpm_assistance_datatable input[name="clientName"]').val();
                        d.patientName = $('#jpm_assistance_datatable input[name="patientName"]').val();
                        d.controlNo = $('#jpm_assistance_datatable input[name="controlNo"]').val();
                        d.hospital = $('#jpm_assistance_datatable input[name="hospital"]').val();
                        d.transDate = $('#jpm_assistance_datatable input[name="transDate"]').val();
                    }
                },
                "columnDefs": [{
                    'orderable': false,
                    'targets': [0, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                }, {
                    'className': 'align-center',
                    'targets': [0, 3]
                }],
                "order": [
                    [1, "desc"]
                ],
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": "trans_date",
                        "className": "text-center",
                        "width": 80,
                    },
                       {
                        "data": "control_no",
                        "className": "text-center",
                        "width": 80,
                    },
                    {
                        "data": "client_name",
                        "className": "text-left",
                    },
                    {
                        "data": "dependent_name",
                        "className": "text-left",
                    },
                    {
                        "data": "municipality_name",
                        "className": "text-center",
                        "width": 150,
                    },
                    {
                        "data": "barangay_name",
                        "className": "text-center",
                        "width": 100,
                    },
                    {
                        "data": "hospital",
                        "className": "text-center",
                        "width": 100,
                    },
                    {
                        "data": "final_bill",
                        "className": "text-center",
                        "width": 50,
                    },
                    {
                        "data": "amount",
                        "className": "text-center",
                        "width": 50,
                    },
                    {
                        "width": 80,
                        "render": function (data, type, row) {

                            var viewBtn = '<button class="btn btn-xs default edit2-btn"><i class="fa fa-eye"></i></button>';
                            var editBtn = '<button class="btn btn-xs green edit-btn"><i class="fa fa-edit"></i></button>';
                            var assignBtn = '<button class="btn btn-xs blue assign-btn"><i class="fa fa-edit"></i>Assign</button>';
                            var deleteBtn = '<button class="btn btn-xs red-sunglo delete-btn"><i class="fa fa-trash"></i></button>';
                            var btnGroup = '';

                            btnGroup += editBtn + deleteBtn;

                            return btnGroup;
                        },

                        "className": "text-center"
                    }
                ],
            }
        });

        jpm_assistance_datatable.on('click', '.edit-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.setState({ showEditModal: true, target: data.id });
        });

        jpm_assistance_datatable.on('click', '.delete-btn', function () {
            var data = grid_project_event.getDataTable().row($(this).parents('tr')).data();
            self.delete(data.id);
        });

        self.grid = grid_project_event;
    },

    closeEditModal: function () {
        this.setState({ showEditModal: false, target: null });
        this.reload();
    },

    closeReleaseModal: function () {
        this.setState({ showReleaseModal: false, target: null });
    },

    openCreateModal: function () {
        this.setState({ showCreateModal: true });
    },

    openClosingModal: function () {
        this.setState({ showClosingModal: true });
    },

    delete: function (id) {
        var self = this;

        if (confirm("Are you sure you want to delete this transaction?")) {
            self.requestDelete = $.ajax({
                url: Routing.generate("ajax_delete_assistance_hdr", { id: id }),
                type: "DELETE"
            }).done(function (res) {
                self.reload();
            });
        }
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {

        console.log("relaod databable");
        if (this.grid != null) {
            this.grid.getDataTable().ajax.reload();
        }
    },

    openProfile: function (id) {
        this.setState({ showEditModal: true, target: id });
    },

    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    render: function () {
        return (
            React.createElement("div", null, 
                
                    this.state.showEditModal &&
                    React.createElement(AssistanceEditModal, {
                        show: this.state.showEditModal, 
                        reload: this.reload, 
                        onHide: this.closeEditModal, 
                        id: this.state.target}
                    ), 
                
                React.createElement("div", {className: "table-container", style: { marginTop: "20px"}}, 
                    React.createElement("table", {id: "jpm_assistance_datatable", className: "table table-striped table-bordered", width: "100%"}, 
                        React.createElement("thead", null, 
                            React.createElement("tr", null, 
                                React.createElement("th", null, "No"), 
                                React.createElement("th", null, "Date"), 
                                React.createElement("th", null, "Ctrl #"), 
                                React.createElement("th", null, "Client Name"), 
                                React.createElement("th", null, "Patient Name"), 
                                React.createElement("th", null, "Municipality"), 
                                React.createElement("th", null, "Barangay"), 
                                React.createElement("th", null, "Hospital"), 
                                React.createElement("th", null, "Bill"), 
                                React.createElement("th", null, "Granted"), 
                                React.createElement("th", null)
                            ), 
                            React.createElement("tr", null, 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "transDate", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                     React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "controlNo", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "clientName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", {style: { padding: "10px 5px"}}, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "dependentName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "municipalityName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                    React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "barangayName", onChange: this.handleFilterChange})
                                ), 
                                React.createElement("td", null, 
                                     React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "hospital", onChange: this.handleFilterChange})
                                ), 
                                
                                React.createElement("td", null), 
                                React.createElement("td", null), 
                                React.createElement("td", {style: { padding: "10px 5px"}}
                                )
                            )
                        ), 
                        React.createElement("tbody", null
                        )
                    )
                )
            )
        )
    }
});

window.AssistanceDatatable = AssistanceDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var AssistanceNewProfileModal = React.createClass({displayName: "AssistanceNewProfileModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "60px"}, keyboard: false, dialogClassName: "modal-custom-85", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Create New Profile")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "new-voter-create-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('barangayNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "barangayNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formDistrict", validationState: this.getValidationState('district')}, 
                                    React.createElement("label", {className: "control-label"}, "District"), 
                                    React.createElement("select", {id: "assist_district_select2", className: "form-control form-filter input-sm", name: "district"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('district'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPurok", validationState: this.getValidationState('purok')}, 
                                    React.createElement("label", {className: "control-label"}, "Purok/Sitio"), 
                                    React.createElement("select", {id: "assist_purok_select2", className: "form-control form-filter input-sm", name: "purok"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('purok'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname')), 
                                    React.createElement(HelpBlock, null, this.getError('fullname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname')), 
                                    React.createElement(HelpBlock, null, this.getError('fullname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename')), 
                                    React.createElement(HelpBlock, null, this.getError('fullname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formVoterName", validationState: this.getValidationState('proVoterId')}, 
                                    React.createElement(ControlLabel, null, " Comelec Name : "), 
                                    React.createElement("select", {id: "comelec-voter-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formCivil", validationState: this.getValidationState('civilStatus')}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "assist_civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('civilStatus'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formContactNo", validationState: this.getValidationState('contactNo')}, 
                                    React.createElement(ControlLabel, null, " Contact No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.contactNo, className: "input-sm form-control", onChange: this.setFormProp, name: "contactNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('contactNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Trabaho"), 
                                    React.createElement("select", {id: "assist_occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMonthlyIncome", validationState: this.getValidationState('monthlyIncome')}, 
                                    React.createElement(ControlLabel, null, " Buwanang Kita : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.monthlyIncome, className: "input-sm form-control", onChange: this.setFormProp, name: "monthlyIncome"}), 
                                    React.createElement(HelpBlock, null, this.getError('monthlyIncome'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    initSelect2: function () {
        var self = this;

        $("#new-voter-create-form #comelec-voter-select2").select2({
            casesentitive: false,
            placeholder: "Select Applicant Name",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: 3,
                        electId: 423,
                        provinceCode : 53,
                        municipalityNo :  $("#new-voter-create-form #municipality_select2").val(),
                        brgyNo : $("#new-voter-create-form #barangay_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#new-voter-create-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #assist_district_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_district'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.district, text: item.district };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #assist_purok_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_purok'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.purok, text: item.purok };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #assist_civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_civil'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#new-voter-create-form #assist_occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });


        $("#new-voter-create-form #assist_district_select2").on("change", function () {
            self.setFormPropValue("district", $(this).val());
        });

        $("#new-voter-create-form #assist_purok_select2").on("change", function () {
            self.setFormPropValue("purok", $(this).val());
        });

        $("#new-voter-create-form #assist_civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#new-voter-create-form #assist_occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#new-voter-create-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#new-voter-create-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });

        $("#new-voter-create-form #comelec-voter-select2").on("change", function () {
            self.setFormPropValue("proVoterId", $(this).val());
            self.loadVoter(3, $(this).val());
        });

        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#new-voter-create-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#new-voter-create-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.vMunicipalityNo = res.municipalityNo;
            form.data.vMunicipalityName = res.municipalityName;
            form.data.vBarangayName = res.barangayName;
            form.data.vBrgyNo = res.brgyNo;
            form.data.proVoterId = res.proVoterId;
            form.data.voterName = res.voterName;
            form.data.isNonVoter = res.isNonVoter;
            form.data.generatedIdNo = res.generatedIdNo;
            form.data.proIdCode = res.proIdCode;

            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_assistance_profile"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.props.onHide();
            self.props.onSuccess(res);
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.AssistanceNewProfileModal = AssistanceNewProfileModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var AssistanceProfileEditModal = React.createClass({displayName: "AssistanceProfileEditModal",

    getInitialState: function () {
        return {
            form: {
                data: {
                    proVoterId: null
                },
                errors: []
            },
            provinceCode: 53
        };
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "60px"}, keyboard: false, dialogClassName: "modal-custom-85", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Edit Profile")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("form", {id: "profile-edit-form", onSubmit: this.submit}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMunicipalityNo", validationState: this.getValidationState('municipalityNo')}, 
                                    React.createElement("label", {className: "control-label"}, "City/Municipality"), 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm", name: "municipalityNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('municipalityNo'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBrgyNo", validationState: this.getValidationState('barangayNo')}, 
                                    React.createElement("label", {className: "control-label"}, "Barangay"), 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm", name: "barangayNo"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('barangayNo'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formDistrict", validationState: this.getValidationState('district')}, 
                                    React.createElement("label", {className: "control-label"}, "District"), 
                                    React.createElement("select", {id: "assist_district_select2", className: "form-control form-filter input-sm", name: "district"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('district'))
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formPurok", validationState: this.getValidationState('purok')}, 
                                    React.createElement("label", {className: "control-label"}, "Purok/Sitio"), 
                                    React.createElement("select", {id: "assist_purok_select2", className: "form-control form-filter input-sm", name: "purok"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('purok'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formLastname", validationState: this.getValidationState('lastname')}, 
                                    React.createElement(ControlLabel, null, " Lastname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.lastname, className: "input-sm form-control", onChange: this.setFormProp, name: "lastname"}), 
                                    React.createElement(HelpBlock, null, this.getError('lastname')), 
                                    React.createElement(HelpBlock, null, this.getError('fullname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formFirstname", validationState: this.getValidationState('firstname')}, 
                                    React.createElement(ControlLabel, null, " Firstname : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.firstname, className: "input-sm form-control", onChange: this.setFormProp, name: "firstname"}), 
                                    React.createElement(HelpBlock, null, this.getError('firstname')), 
                                    React.createElement(HelpBlock, null, this.getError('fullname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMiddlename", validationState: this.getValidationState('middlename')}, 
                                    React.createElement(ControlLabel, null, " Middlename : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.middlename, className: "input-sm form-control", onChange: this.setFormProp, name: "middlename"}), 
                                    React.createElement(HelpBlock, null, this.getError('middlename')), 
                                    React.createElement(HelpBlock, null, this.getError('fullname'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-1"}, 
                                React.createElement(FormGroup, {controlId: "formExtName", validationState: this.getValidationState('extName')}, 
                                    React.createElement(ControlLabel, null, " Ext : "), 
                                    React.createElement("input", {type: "text", value: this.state.form.data.extName, className: "input-sm form-control", onChange: this.setFormProp, name: "extName"}), 
                                    React.createElement(HelpBlock, null, this.getError('extName'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-6"}, 
                                React.createElement(FormGroup, {controlId: "formVoterName", validationState: this.getValidationState('proVoterId')}, 
                                    React.createElement(ControlLabel, null, " Comelec Name : "), 
                                    React.createElement("select", {id: "comelec-voter-select2", className: "form-control input-sm"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('proVoterId'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formBirthdate", validationState: this.getValidationState('birthdate')}, 
                                    React.createElement(ControlLabel, null, " Birthdate : "), 
                                    React.createElement("input", {type: "date", value: this.state.form.data.birthdate, className: "input-sm form-control", onChange: this.setFormProp, name: "birthdate"}), 
                                    React.createElement(HelpBlock, null, this.getError('birthdate'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formGender", validationState: this.getValidationState('gender')}, 
                                    React.createElement(ControlLabel, null, " Gender : "), 
                                    React.createElement("select", {className: "input-sm form-control", value: this.state.form.data.gender, onChange: this.setFormProp, name: "gender"}, 
                                        React.createElement("option", {value: ""}, "- Select -"), 
                                        React.createElement("option", {value: "M"}, "Male"), 
                                        React.createElement("option", {value: "F"}, "Female")
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('gender'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formCivil", validationState: this.getValidationState('civilStatus')}, 
                                    React.createElement("label", {className: "control-label"}, "Civil Status"), 
                                    React.createElement("select", {id: "assist_civil_status_select2", className: "form-control form-filter input-sm", name: "civilStatus"}
                                    ), 
                                    React.createElement(HelpBlock, null, this.getError('civilStatus'))
                                )
                            ), 

                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formContactNo", validationState: this.getValidationState('contactNo')}, 
                                    React.createElement(ControlLabel, null, " Contact No : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.contactNo, className: "input-sm form-control", onChange: this.setFormProp, name: "contactNo"}), 
                                    React.createElement(HelpBlock, null, this.getError('contactNo'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement("div", {className: "form-group"}, 
                                    React.createElement("label", {className: "control-label"}, "Trabaho"), 
                                    React.createElement("select", {id: "assist_occupation_select2", className: "form-control form-filter input-sm", name: "occupation"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "col-md-2"}, 
                                React.createElement(FormGroup, {controlId: "formMonthlyIncome", validationState: this.getValidationState('monthlyIncome')}, 
                                    React.createElement(ControlLabel, null, " Buwanang Kita : "), 
                                    React.createElement("input", {type: "text", placeholder: "Example : 09283182013", value: this.state.form.data.monthlyIncome, className: "input-sm form-control", onChange: this.setFormProp, name: "monthlyIncome"}), 
                                    React.createElement(HelpBlock, null, this.getError('monthlyIncome'))
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 text-right"}, 
                                React.createElement("button", {className: "btn btn-primary btn-sm", style: { marginRight: "10px"}, type: "submit"}, " Submit "), 
                                React.createElement("button", {className: "btn btn-default btn-sm", type: "button", onClick: this.props.onHide}, " Close ")
                            )
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
        this.loadData(this.props.id);
    },


     loadData: function (id) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_assistance_profile", { id: id }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.lastname = res.lastname;
            form.data.middlename = res.middlename;
            form.data.firstname = res.firstname;
            form.data.extname = res.extname;
            form.data.birthdate = res.birthdate;
            form.data.gender = res.gender;
            form.data.civilStatus = res.civilStatus;
            form.data.contactNo = res.contactNo;
            form.data.monthlyIncome = res.monthlyIncome;
            form.data.municipalityName = res.municipalityName;
            form.data.municipalityNo = res.municipalityNo;
            form.data.barangayName = res.barangayName;
            form.data.barangayNo = res.barangayNo;
            form.data.district = res.district;
            form.data.purok = res.purok;

            form.data.vMunicipalityNo = res.municipalityNo;
            form.data.vMunicipalityName = res.municipalityName;
            form.data.vBarangayName = res.barangayName;
            form.data.vBrgyNo = res.brgyNo;
            form.data.proVoterId = res.proVoterId;
            form.data.voterName = res.voterName;
            form.data.isNonVoter = res.isNonVoter;
            form.data.generatedIdNo = res.generatedIdNo;
            form.data.proIdCode = res.proIdCode;
            

            $("#profile-edit-form #municipality_select2").empty()
            .append($("<option/>")
                .val(res.municipalityNo)
                .text(res.municipalityName))
            .trigger("change");

            $("#profile-edit-form #barangay_select2").empty()
            .append($("<option/>")
                .val(res.barangayNo)
                .text(res.barangayName))
            .trigger("change");

            $("#profile-edit-form #assist_district_select2").empty()
            .append($("<option/>")
                .val(res.district)
                .text(res.district))
            .trigger("change");

             $("#profile-edit-form #assist_purok_select2").empty()
            .append($("<option/>")
                .val(res.purok)
                .text(res.purok))
            .trigger("change");

             $("#profile-edit-form #comelec-voter-select2").empty()
            .append($("<option/>")
                .val(res.proVoterId)
                .text(res.voterName))
            .trigger("change");

            $("#profile-edit-form #assist_civil_status_select2").empty()
            .append($("<option/>")
                .val(res.civilStatus)
                .text(res.civilStatus))
            .trigger("change");

            $("#profile-edit-form #assist_occupation_select2").empty()
            .append($("<option/>")
                .val(res.occupation)
                .text(res.occupation))
            .trigger("change");


            self.setState({ form: form });
        });
    },

    initSelect2: function () {
        var self = this;

        $("#profile-edit-form #comelec-voter-select2").select2({
            casesentitive: false,
            placeholder: "Select Applicant Name",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_project_voters'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        proId: 3,
                        electId: 423,
                        provinceCode : 53,
                        municipalityNo :  $("#profile-edit-form #municipality_select2").val(),
                        brgyNo : $("#profile-edit-form #barangay_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.voter_name + ' - ' + item.precinct_no + ' ( ' + item.municipality_name + ', ' + item.barangay_name + ' )';
                            return { id: item.pro_voter_id, text: text };
                        })
                    };
                },
            }
        });

        $("#profile-edit-form #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#profile-edit-form #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Select Barangay",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        municipalityNo: $("#profile-edit-form #municipality_select2").val(),
                        provinceCode: self.state.provinceCode
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

        $("#profile-edit-form #assist_district_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_district'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.district, text: item.district };
                        })
                    };
                },
            }
        });

        $("#profile-edit-form #assist_purok_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_purok'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.purok, text: item.purok };
                        })
                    };
                },
            }
        });


        $("#profile-edit-form #assist_civil_status_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_civil'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.civil_status, text: item.civil_status };
                        })
                    };
                },
            }
        });

        $("#profile-edit-form #assist_occupation_select2").select2({
            casesentitive: false,
            placeholder: "Select...",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_occupation'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.occupation, text: item.occupation };
                        })
                    };
                },
            }
        });


        $("#profile-edit-form #assist_district_select2").on("change", function () {
            self.setFormPropValue("district", $(this).val());
        });

        $("#profile-edit-form #assist_purok_select2").on("change", function () {
            self.setFormPropValue("purok", $(this).val());
        });

        $("#profile-edit-form #assist_civil_status_select2").on("change", function () {
            console.log("civil status changed");
            self.setFormPropValue("civilStatus", $(this).val());
        });

        $("#profile-edit-form #assist_occupation_select2").on("change", function () {
            self.setFormPropValue("occupation", $(this).val());
        });

        $("#profile-edit-form #municipality_select2").on("change", function () {
            self.setFormPropValue("municipalityNo", $(this).val());
        });

        $("#profile-edit-form #barangay_select2").on("change", function () {
            self.setFormPropValue("brgyNo", $(this).val());
        });

        $("#profile-edit-form #comelec-voter-select2").on("change", function () {
            self.setFormPropValue("proVoterId", $(this).val());
            self.loadVoter(3, $(this).val());
        });

        var municipalityNo = this.props.municipalityNo;
        var municipalityName = this.props.municipalityName;
        var barangayNo = this.props.barangayNo;
        var barangayName = this.props.barangayName;

        if (municipalityNo != null) {

            $("#profile-edit-form #municipality_select2").empty()
                .append($("<option/>")
                    .val(municipalityNo)
                    .text(municipalityName))
                .trigger("change");

            $("#profile-edit-form #barangay_select2").empty()
                .append($("<option/>")
                    .val(barangayNo)
                    .text(barangayName))
                .trigger("change");
        }
    },

    loadVoter: function (proId, proVoterId) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_project_voter", { proId: proId, proVoterId: proVoterId }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;

            form.data.vMunicipalityNo = res.municipalityNo;
            form.data.vMunicipalityName = res.municipalityName;
            form.data.vBarangayName = res.barangayName;
            form.data.vBrgyNo = res.brgyNo;
            form.data.proVoterId = res.proVoterId;
            form.data.voterName = res.voterName;
            form.data.isNonVoter = res.isNonVoter;
            form.data.generatedIdNo = res.generatedIdNo;
            form.data.proIdCode = res.proIdCode;

            self.setState({ form: form });
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value.toUpperCase();
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;

        data.electId = self.props.electId;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_patch_assistance_profile",{id : self.props.id }),
            data: data,
            type: 'PATCH'
        }).done(function (res) {
            self.props.onHide();
            self.notify("New record has been saved.", 'teal');
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
            self.notify("Form validation failed!.", 'ruby');
        });
    }
});


window.AssistanceProfileEditModal = AssistanceProfileEditModal;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var AssistanceCreateModal = React.createClass({displayName: "AssistanceCreateModal",

    getInitialState: function () {
        return {
            showNewProfileModal: false,
            form: {
                data: {
                    finalBill: 0,
                    amount: 0,
                    hospital: "",
                    dependentDiagnosis: "",
                    transDate: "",
                    transType: "",
                    remarks: "",
                    clientProfileId: null,
                    dependentProfileId: null
                },
                errors: []
            }
        };
    },

    render: function () {
        var self = this;
        var data = this.state.form.data;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, bsSize: "lg", keyboard: false, enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "New Assistance Form")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    
                        this.state.showNewProfileModal &&
                        React.createElement(AssistanceNewProfileModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            show: this.state.showNewProfileModal, 
                            onHide: this.closeNewProfileModal}
                        ), 
                    

                    React.createElement("form", {id: "fa-form"}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12"}, 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formTransDate", validationState: this.getValidationState('transDate')}, 
                                            React.createElement(ControlLabel, null, " Date : "), 
                                            React.createElement("input", {type: "date", value: this.state.form.data.transDate, className: "input-sm form-control", onChange: this.setFormProp, name: "transDate"}), 
                                            React.createElement(HelpBlock, null, this.getError('transDate'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formTransDate", validationState: this.getValidationState('controlNo')}, 
                                            React.createElement(ControlLabel, null, " Control No : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.controlNo, className: "input-sm form-control", onChange: this.setFormProp, name: "controlNo"}), 
                                            React.createElement(HelpBlock, null, this.getError('controlNo'))
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-10"}, 
                                        React.createElement(FormGroup, {controlId: "formClientProfileId", validationState: this.getValidationState('clientProfileId')}, 
                                            React.createElement(ControlLabel, null, " Client Name : "), 
                                            React.createElement("select", {id: "voter-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('clientProfileId'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-2"}, 
                                        React.createElement("button", {style: { marginTop: "25px"}, onClick: self.openNewProfileModal, type: "button", className: "btn btn-sm btn-primary"}, "New Profile")
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formContactNo", validationState: this.getValidationState('contactNo')}, 
                                            React.createElement(ControlLabel, null, " Contact No : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.contactNo, className: "input-sm form-control", onChange: this.setFormProp, name: "contactNo"}), 
                                            React.createElement(HelpBlock, null, this.getError('contactNo'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formClientAddress", validationState: this.getValidationState('clientAddress')}, 
                                            React.createElement(ControlLabel, null, " Address : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.clientAddress, disabled: true, className: "input-sm form-control", onChange: this.setFormProp, name: "clientAddress"}), 
                                            React.createElement(HelpBlock, null, this.getError('clientAddress'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-10"}, 
                                        React.createElement(FormGroup, {controlId: "formDependentProfileId", validationState: this.getValidationState('dependentProfileId')}, 
                                            React.createElement(ControlLabel, null, " Patient Name : "), 
                                            React.createElement("select", {id: "beneficiary-select2", className: "form-control input-sm"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('dependentProfileId'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-2"}, 
                                        React.createElement("button", {style: { marginTop: "25px"}, onClick: self.openNewProfileModal, type: "button", className: "btn btn-sm btn-primary"}, "New Profile")
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formDependentContactNo", validationState: this.getValidationState('dependentContactNo')}, 
                                            React.createElement(ControlLabel, null, " Contact No : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.dependentContactNo, className: "input-sm form-control", onChange: this.setFormProp, name: "dependentContactNo"}), 
                                            React.createElement(HelpBlock, null, this.getError('dependentContactNo'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formTransDate", validationState: this.getValidationState('dependentAddress')}, 
                                            React.createElement(ControlLabel, null, " Address : "), 
                                            React.createElement("input", {type: "text", value: this.state.form.data.dependentAddress, disabled: true, className: "input-sm form-control", onChange: this.setFormProp, name: "dependentAddress"}), 
                                            React.createElement(HelpBlock, null, this.getError('dependentAddress'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 

                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formHospitalName", validationState: this.getValidationState('hospital')}, 
                                            React.createElement(ControlLabel, null, " Hospital : "), 
                                            React.createElement("select", {id: "hospital_select2", className: "form-control form-filter input-sm", name: "hospital"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('hospital'))
                                        )
                                    ), 

                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formTransType", validationState: this.getValidationState('transType')}, 
                                            React.createElement(ControlLabel, null, " Type of Assistance : "), 
                                            React.createElement("select", {id: "type_of_assistance_select2", className: "form-control form-filter input-sm", name: "transType"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('transType'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-6"}, 
                                        React.createElement(FormGroup, {controlId: "formDependentDiagnosis", validationState: this.getValidationState('dependentDiagnosis')}, 
                                            React.createElement(ControlLabel, null, " Diagnosis : "), 
                                            React.createElement("select", {id: "diagnosis_select2", className: "form-control form-filter input-sm", name: "dependentDiagnosis"}
                                            ), 
                                            React.createElement(HelpBlock, null, this.getError('dependentDiagnosis'))
                                        )
                                    )
                                ), 

                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formFinalBill", validationState: this.getValidationState('finalBill')}, 
                                            React.createElement(ControlLabel, null, " Final Bill : "), 
                                            React.createElement(FormControl, {bsClass: "form-control input-sm", type: "number", step: "any", name: "finalBill", value: this.state.form.data.finalBill, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('finalBill'))
                                        )
                                    ), 
                                    React.createElement("div", {className: "col-md-3"}, 
                                        React.createElement(FormGroup, {controlId: "formAmount", validationState: this.getValidationState('amount')}, 
                                            React.createElement(ControlLabel, null, " Granted Amount : "), 
                                            React.createElement(FormControl, {bsClass: "form-control input-sm", type: "number", step: "any", name: "amount", value: this.state.form.data.amount, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('amount'))
                                        )
                                    )
                                ), 
                                React.createElement("div", {className: "row"}, 
                                    React.createElement("div", {className: "col-md-12"}, 
                                        React.createElement(FormGroup, {controlId: "formRemarks", validationState: this.getValidationState('remarks')}, 
                                            React.createElement(ControlLabel, null, " Remarks : "), 
                                            React.createElement(FormControl, {componentClass: "textarea", rows: "6", bsClass: "form-control input-sm", name: "remarks", value: this.state.form.data.remarks, onChange: this.setFormProp}), 
                                            React.createElement(HelpBlock, null, this.getError('remarks'))
                                        )
                                    )
                                )
                            )
                        ), 

                        React.createElement("div", {className: "clearfix"}), 

                        React.createElement("div", {className: "text-right"}, 
                            React.createElement("button", {type: "button", className: "btn btn-default", style: { marginRight: "5px"}, onClick: this.props.onHide}, "Close"), 
                            React.createElement("button", {type: "button", className: "btn btn-primary", onClick: this.submit}, "Submit")
                        )
                    )
                )
            )
        );
    },

    componentDidMount: function () {
        this.initSelect2();
    },

    loadClient: function (id) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_assistance_profile", { id: id }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.contactNo = res.contactNo;
            form.data.clientAddress = res.purok + " " + res.barangayName + ", " + res.municipalityName;

            self.setState({ form : form });
        });
    },

     loadDependent: function (id) {
        var self = this;

        self.requestVoter = $.ajax({
            url: Routing.generate("ajax_get_assistance_profile", { id: id }),
            type: "GET"
        }).done(function (res) {
            var form = self.state.form;
            form.data.dependentContactNo = res.contactNo;
            form.data.dependentAddress = res.purok + " " + res.barangayName + ", " + res.municipalityName;

            self.setState({ form : form });
        });
    },

    initSelect2: function () {
        var self = this;
        $("#fa-form #voter-select2").select2({
            casesentitive: false,
            placeholder: "Select Applicant Name",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assistance_profiles'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.fullname + ' ( ' + item.municipality_name + ',' + item.barangay_name + ' | ' + item.purok + ' | ' + item.contact_no;

                            return { id: item.id, text: text };
                        })
                    };
                },
            }
        });

        $("#fa-form #beneficiary-select2").select2({
            casesentitive: false,
            placeholder: "Enter Name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            dropdownCssClass: 'custom-option',
            ajax: {
                url: Routing.generate('ajax_select2_assistance_profiles'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        electId: 4,
                        proId: 3,
                        provinceCode: 53,
                        municipalityNo: $("#fa-form #municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            var text = item.fullname + ' ( ' + item.municipality_name + ',' + item.barangay_name + ' | ' + item.purok + ' | ' + item.contact_no;

                            return { id: item.id, text: text };
                        })
                    };
                },
            }
        });

        $("#fa-form #type_of_assistance_select2").select2({
            casesentitive: false,
            placeholder: "Select Type Of Assistance",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },
            ajax: {
                url: Routing.generate('ajax_select2_assist_type'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.trans_type, text: item.trans_type };
                        })
                    };
                },
            }
        });

        $("#fa-form #hospital_select2").select2({
            casesentitive: false,
            placeholder: "Select Hospital",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },

            ajax: {
                url: Routing.generate('ajax_select2_assist_hospital'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.hospital, text: item.hospital };
                        })
                    };
                },
            }
        });

        $("#fa-form #diagnosis_select2").select2({
            casesentitive: false,
            placeholder: "Select Diagnosis",
            allowClear: true,
            width: '100%',
            containerCssClass: ':all:',
            tags: true,
            createTag: function (params) {
                return {
                    id: params.term,
                    text: params.term,
                    newOption: true
                }
            },

            ajax: {
                url: Routing.generate('ajax_select2_assist_diagnosis'),
                data: function (params) {
                    return {
                        searchText: params.term,
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.dependent_diagnosis, text: item.dependent_diagnosis };
                        })
                    };
                },
            }
        });

        $("#fa-form #voter-select2").on("change", function () {
            console.log('setting profile id');
            console.log($(this).val());

            self.setFormPropValue('clientProfileId', $(this).val());
            self.loadClient($(this).val());
        });

        $("#fa-form #beneficiary-select2").on("change", function () {
            console.log('setting dependent id');
            console.log($(this).val());

            self.setFormPropValue('dependentProfileId', $(this).val());
            self.loadDependent($(this).val());
        });

        $("#fa-form #type_of_assistance_select2").on("change", function () {
            self.setFormPropValue('transType', $(this).val());
        });

        $("#fa-form #hospital_select2").on("change", function () {
            self.setFormPropValue('hospital', $(this).val());
        });

        $("#fa-form #diagnosis_select2").on("change", function () {
            self.setFormPropValue('dependentDiagnosis', $(this).val());
        });
    },

    setFormPropValue: function (field, value) {
        var form = this.state.form;
        form.data[field] = value;
        this.setState({ form: form });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setFormCheckProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.checked ? 1 : 0;
        this.setState({ form: form })
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }
        return null;
    },

    getValidationState: function (field) {
        return this.getError(field) != null ? 'error' : '';
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    reset: function () {
        var form = this.state.form;
        form.errors = [];

        this.setState({ form: form });
    },

    openNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: true });
    },

    closeNewProfileModal: function () {
        var self = this;

        self.setState({ showNewProfileModal: false });
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = self.state.form.data;
        data.proId = self.props.proId;

        self.requestPost = $.ajax({
            url: Routing.generate("ajax_post_jpm_assistance"),
            data: data,
            type: 'POST'
        }).done(function (res) {
            self.reset();
            self.props.onSuccess();
            self.props.onHide();
        }).fail(function (err) {
            self.setErrors(err.responseJSON);
        });
    }
});


window.AssistanceCreateModal = AssistanceCreateModal;

var Tab = ReactBootstrap.Tab;
var Tabs = ReactBootstrap.Tabs;
var Nav = ReactBootstrap.Nav;
var NavItem = ReactBootstrap.NavItem;

var Assistance = React.createClass({displayName: "Assistance",

    getInitialState: function () {
        return {
            active: "ASSIST",
            showCreateModal: false,
            showNewProfileModal : false,
            showSmsModal: false,
            form: {
                data: {}
            }
        }
    },

    setSelectedTab: function (key) {
        this.setState({ active: key });
    },

    openCreateModal: function () {
        console.log("open sms modal");
        this.setState({ showCreateModal: true });
        console.log(this.state.showCreateModal);
    },

    openProfileCreateModal: function () {
        this.setState({ showNewProfileModal: true });
    },

    closeProfileCreateModal: function () {
        this.setState({ showNewProfileModal: false });
        this.refs.ProfilesDatatable.reload();
    },

    closeCreateModal: function () {
        this.setState({ showCreateModal: false });
    },

    onCreateSuccess: function () {
        this.refs.attendanceDatatable.reload();
        this.setState({ showCreateModal: false });
    },

    onSuccess: function () {
        this.reload();
    },

    reload: function () {
        console.log("reloading datatable");
        this.refs.AssistanceDatatable.reload();
    },

    render: function () {
        var self = this;

        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered"}, 
                React.createElement("div", {className: "portlet-body", id: "bcbp_component"}, 

                    
                        this.state.showCreateModal &&
                        React.createElement(AssistanceCreateModal, {
                            show: this.state.showCreateModal, 
                            onHide: this.closeCreateModal, 
                            onSuccess: this.onSuccess}
                        ), 
                    
                    
                        this.state.showNewProfileModal &&
                        React.createElement(AssistanceNewProfileModal, {
                            proId: 3, 
                            electId: 4, 
                            provinceCode: 53, 
                            show: this.state.showNewProfileModal, 
                            onHide: this.closeProfileCreateModal}
                        ), 
                    

                    React.createElement(Tab.Container, {activeKey: this.state.active, onSelect: this.setSelectedTab}, 
                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-12 m-t-sm"}, 
                                React.createElement(Nav, {bsStyle: "tabs"}, 
                                    React.createElement(NavItem, {eventKey: "ASSIST"}, 
                                        "Assistance"
                                    ), 
                                    React.createElement(NavItem, {eventKey: "PROFILES"}, 
                                        "Profiles"
                                    )

                                )
                            ), 
                            React.createElement("div", {className: "col-md-12 m-t-sm"}, 
                                React.createElement(Tab.Content, {animation: true}, 
                                    React.createElement(Tab.Pane, {eventKey: "ASSIST"}, 
                                        this.state.active == "ASSIST" &&
                                            React.createElement("div", null, 
                                                React.createElement("div", {className: "row"}, 
                                                    React.createElement("div", {className: "col-md-12"}, 
                                                        React.createElement("button", {type: "button", className: "btn btn-success btn-sm", style: { marginRight: "10px"}, onClick: this.openCreateModal}, "New Assistance")
                                                    )
                                                ), 
                                                React.createElement("div", {className: "row"}, 
                                                    React.createElement(AssistanceDatatable, {ref: "AssistanceDatatable"})
                                                )
                                            )
                                        
                                    ), 
                                    React.createElement(Tab.Pane, {eventKey: "PROFILES"}, 
                                        this.state.active == "PROFILES" &&
                                            React.createElement("div", null, 
                                                React.createElement("div", {className: "row"}, 
                                                    React.createElement("div", {className: "col-md-12"}, 
                                                        React.createElement("button", {type: "button", className: "btn btn-success btn-sm", style: { marginRight: "10px"}, onClick: this.openProfileCreateModal}, "New Profile")
                                                    )
                                                ), 
                                                React.createElement("div", {className: "row"}, 
                                                    React.createElement(ProfilesDatatable, {ref: "ProfilesDatatable"})
                                                )
                                            )
                                        

                                    )
                                )
                            )
                        )
                    )


                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(Assistance, null),
        document.getElementById('page-container')
    );
}, 500);
