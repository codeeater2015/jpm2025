var Modal = ReactBootstrap.Modal;

var DataImportViewModal = React.createClass({displayName: "DataImportViewModal",

    componentDidMount: function () {
        this.initGrid();
    },

    initGrid: function () {
        var grid = new Datatable();
        var self = this;

        grid.init({
            src: $("#data-import-details-datatable"),
            dataTable: { // here you can define a typical datatable settings from http://datatables.net/usage/options
                "bState": true,
                "autoWidth": false,
                "serverSide": true,
                "processing": true,
                "deferRender": true,
                "ordering" : false,
               
                "searchDelay": 2000,
                "language": {
                    "processing": '<i class="fa fa-spinner fa-pulse fa-fw"></i><span > Loading...</span>.'
                },
                "lengthMenu": [
                    [10, 20, 50, 100, 150],
                    [10, 20, 50, 100, 150] // change per page values here
                ],
                "pageLength": 10, // default record count per page
                "ajax": {
                    "url": Routing.generate('ajax_get_data_import_detail_datatable'), // ajax source
                    "type": 'GET',
                    "data": function (d) {
                        d.hdrId = self.props.hdrId;
                        d.voterName = $('#data-import-details-datatable input[name="import_voter_name"]').val();
                        d.status = $('#data-import-details-datatable select[name="import_status"]').val();
                    }
                },
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": 'voter_name'
                    },
                    {
                        "data": 'voter_group',
                        "width": 50,
                        "className": 'text-center'
                    },
                    {
                        "data": 'has_id',
                        "width": 30,
                        "className": 'text-center',
                        "render": function (data) {
                            return data == 1 ? "YES" : "NO";
                        }
                    },
                    {
                        "data": 'cellphone',
                        "width": 50,
                        "className": 'text-center'
                    },
                    {
                        "data": 'updated_at',
                        "className": "text-center",
                        "width": 150,
                        "render": function (data) {
                            return moment(data).format("MMM DD, YYYY hh:mm A")
                        }
                    },
                    {
                        "data": 'updated_by',
                        "className": "text-center",
                        "width": 90
                    },
                    {
                        "width": 30,
                        "data": 'status',
                        "className": "text-center",
                        "render": function (data) {
                            var statusText = "";

                            switch (data) {
                                case 'A':
                                    statusText = 'IMPORTED';
                                    break;
                                case 'C':
                                    statusText = 'SKIPPED';
                                    break;
                                default:
                                    statusText = 'UNKNOWN STATUS';
                            }

                            return statusText;
                        }
                    },
                ]
            }
        });

        self.grid = grid;
    },

    reloadDatatable: function () {
        this.refs.DetailDatatable.reload();
    },

    render: function () {
        var self = this;

        return (
            React.createElement(Modal, {style: { marginTop: "10px"}, keyboard: false, dialogClassName: "modal-full", enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {className: "modal-header bg-blue-dark font-white", closeButton: true}, 
                    React.createElement(Modal.Title, null, "Data Import Information")
                ), 
                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 

                    React.createElement("div", {className: "col-md-12"}, 
                        React.createElement("div", {className: "table-container"}, 
                            React.createElement("div", {className: "table-actions-wrapper"}
                            ), 

                            React.createElement("table", {id: "data-import-details-datatable", className: "table table-bordered"}, 
                                React.createElement("thead", null, 
                                    React.createElement("tr", {className: "text-center"}, 
                                        React.createElement("td", null, "#"), 
                                        React.createElement("td", null, "Name"), 
                                        React.createElement("td", null, "Position"), 
                                        React.createElement("td", null, "ID"), 
                                        React.createElement("td", null, "Cellphone"), 
                                        React.createElement("td", null, "Updated At"), 
                                        React.createElement("td", null, "Updated By"), 
                                        React.createElement("td", null, "Status"), 
                                        React.createElement("td", null)
                                    ), 
                                    React.createElement("tr", null, 
                                        React.createElement("td", null), 
                                        React.createElement("td", null, 
                                            React.createElement("input", {type: "text", className: "form-control form-filter input-sm", name: "import_voter_name"})
                                        ), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null), 
                                        React.createElement("td", null, 
                                            React.createElement("select", {name: "import_status", className: "input-sm", style: { marginTop: "2px"}}, 
                                                React.createElement("option", {value: ""}, "All"), 
                                                React.createElement("option", {value: "A"}, "Imported"), 
                                                React.createElement("option", {value: "C"}, "Skipped")
                                            )
                                        ), 
                                        React.createElement("td", {style: { width : "30px"}}, 
                                            React.createElement("button", {className: "btn btn-xs green btn-outline filter-submit"}, 
                                                React.createElement("i", {className: "fa fa-search"}), "Search"
                                            )
                                        )
                                    )
                                ), 
                                React.createElement("tbody", null
                                )
                            )
                        )
                    )
                )
            )
        );
    }
});


window.DataImportViewModal = DataImportViewModal;
var DataImportDatatable = React.createClass({displayName: "DataImportDatatable",

    getInitialState: function () {
        return {
            showViewModal: false,
            target: null,
            typingTimer: null,
            doneTypingInterval: 1500
        }
    },

    componentDidMount: function () {
        this.initGrid();
    },

    initGrid: function () {
        var grid = new Datatable();
        var self = this;

        grid.init({
            src: $("#data-import-datatable"),
            dataTable: { // here you can define a typical datatable settings from http://datatables.net/usage/options
                'ordering': false,
                "serverSide": true,
                "processing": true,
                "searching" : false,
                "deferRender": true,
                "autoWidth": true,
                "dom": '<"top"fpli>rt<"bottom"pli><"clear">',
                "searchDelay": 2000,
                "language": {
                    "processing": '<i class="fa fa-spinner fa-pulse fa-fw"></i><span > Loading...</span>.'
                },
                "lengthMenu": [
                    [10, 20, 50, 100, 150],
                    [10, 20, 50, 100, 150] // change per page values here
                ],
                "pageLength": 10, // default record count per page
                "ajax": {
                    "url": Routing.generate('ajax_get_data_import_datatable'), // ajax source
                    "type": 'GET',
                    "data": function (d) {
                        d.electId = self.props.electId;
                        d.proId = self.props.proId;
                    }
                },
                "columns": [
                    {
                        "data": null,
                        "className": "text-center",
                        "width": 30,
                        "render": function (data, type, full, meta) {
                            return meta.settings._iDisplayStart + meta.row + 1;
                        }
                    },
                    {
                        "data": 'data_source',
                        "width": 40,
                        "className": 'text-center'
                    },
                    {
                        "data": 'start_date',
                        "width": 40,
                        "className": 'text-center'
                    },
                    {
                        "data": 'end_date',
                        "width": 40,
                        "className": 'text-center'
                    },
                    {
                        "data": 'total_count',
                        "width": 50,
                        "className": 'text-center'
                    },
                    {
                        "data": 'total_updated',
                        "width": 50,
                        "className": 'text-center'
                    },
                    {
                        "data": 'total_skipped',
                        "width": 50,
                        "className": 'text-center'
                    },
                    {
                        "data": 'created_at',
                        "className": "text-center",
                        "width": 80,
                        "render" : function(data){
                            return moment(data).format("MMM DD, YYYY hh:mm A")
                        }
                    },
                    {
                        "data": 'created_by',
                        "className": "text-center",
                        "width": 80
                    },
                    {
                        "width": 40,
                        "className": "text-center",
                        "render": function (data, type, row) {
                            var editBtn = '<button class="btn btn-xs btn-view btn-primary"> View </button>';
                            return editBtn;
                        }
                    },
                ]
            }
        });
      

        $('#data-import-datatable tbody').on('click', '.btn-view', function () {
            var data = grid.getDataTable().row($(this).parents('tr')).data();
            self.openViewModal(data.hdr_id);
        });

        self.grid = grid;
    },

    openViewModal : function (id) {
        console.log("open view modal");
        this.setState({ showViewModal : true, target : id });        
    },

    closeViewModal : function(){
        this.setState({ showViewModal : false, target : null });
    },

    handleFilterChange: function () {
        var self = this;
        clearTimeout(this.state.typingTimer);
        this.state.typingTimer = setTimeout(function () {
            self.reload();
        }, this.state.doneTypingInterval);
    },

    reload: function () {
        this.grid.getDataTable().ajax.reload();
    },

    render: function () {
        return (
            React.createElement("div", null, 
                this.state.showViewModal && (
                    React.createElement(DataImportViewModal, {show: this.state.showViewModal, onHide: this.closeViewModal, hdrId: this.state.target})
                ), 
                React.createElement("table", {id: "data-import-datatable", className: "table table-bordered"}, 
                    React.createElement("thead", null, 
                        React.createElement("tr", {className: "text-center"}, 
                            React.createElement("td", null, "#"), 
                            React.createElement("td", null, "Data Source"), 
                            React.createElement("td", null, "Date From"), 
                            React.createElement("td", null, "Date To"), 
                            React.createElement("td", null, "Total Records"), 
                            React.createElement("td", null, "Updated"), 
                            React.createElement("td", null, "Skipped"), 
                            React.createElement("td", null, "Date Performed"), 
                            React.createElement("td", null, "User"), 
                            React.createElement("td", null)
                        )
                    ), 
                    React.createElement("tbody", null
                    )
                )
            )
        );
    }
});


window.DataImportDatatable = DataImportDatatable;
var Modal = ReactBootstrap.Modal;
var FormGroup = ReactBootstrap.FormGroup
var HelpBlock = ReactBootstrap.HelpBlock;
var ControlLabel = ReactBootstrap.ControlLabel;
var FormControl = ReactBootstrap.FormControl;

var DataUpdaterModal = React.createClass({displayName: "DataUpdaterModal",

    getInitialState: function () {
        return {
            unselected: [],
            options: [],
            form: {
                data: {
                    projectVoters: [],

                },
                errors: []
            },

            isLoading: false,
            progressValue: 0,
            availableData: []
        };
    },

    componentDidMount: function () {
        this.initComponents();
        this.initSelect2();
        //this.loadProjectVoters();
    },


    loadAvailableData: function () {
        var self = this;

        self.requestProjectVoters = $.ajax({
            url: Routing.generate("ajax_get_available_data", {
                proId: this.props.proId,
                electId: this.props.electId,
                startDate: $('#downloader_modal #start_date_input').val(),
                endDate: $('#downloader_modal #end_date_input').val(),
                municipalityNo: $('#downloader_modal #municipality_select2').val(),
                brgyNo: $('#downloader_modal #barangay_select2').val()
            }),
            type: "GET"
        }).done(function (res) {
            console.log('available data has been received', res);
            self.setState({ availableData: res });
        });
    },

    loadProjectVoters: function () {
        var self = this;

        self.requestProjectVoters = $.ajax({
            url: Routing.generate("ajax_get_did_change_voter", {
                proId: this.props.proId,
                electId: this.props.electId
            }),
            type: "GET"
        }).done(function (res) {
            self.setState({ options: res, unselected: res });
            setTimeout(self.refreshSelectBox, 2000);
        });
    },


    initSelect2: function () {
        var self = this;

        $("#downloader_modal #municipality_select2").select2({
            casesentitive: false,
            placeholder: "Select City/Municipality",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_municipality'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.municipality_no, text: item.name };
                        })
                    };
                },
            }
        });

        
        $("#downloader_modal #barangay_select2").select2({
            casesentitive: false,
            placeholder: "Enter name...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_barangay'),
                data: function (params) {
                    return {
                        searchText: params.term,
                        provinceCode: 53,
                        municipalityNo: $("#municipality_select2").val()
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.brgy_no, text: item.name };
                        })
                    };
                },
            }
        });

    },

    componentWillUnmount: function () {
        this.isEmpty(this.requestProjectVoters) || this.requestProjectVoters.abort();
    },


    initComponents: function () {
        this.initMultiSelect();
    },

    initMultiSelect: function () {
        var self = this;

        var selectBox = this.refs.selectBox;

        $(selectBox).multiSelect({
            selectableOptgroup: true,
            selectableHeader: "<input placeholder='Enter Name' type='text' className='form-control' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            selectionHeader: "<input placeholder='Enter Name' type='text' className='form-control' autocomplete='off' style='text-transform:uppercase;margin-bottom:5px;'>",
            afterInit: function (ms) {
                var that = this,
                    $selectableSearch = that.$selectableUl.prev(),
                    $selectionSearch = that.$selectionUl.prev(),
                    selectableSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selectable:not(.ms-selected)',
                    selectionSearchString = '#' + that.$container.attr('id') + ' .ms-elem-selection.ms-selected';

                that.qs1 = $selectableSearch.quicksearch(selectableSearchString)
                    .on('keydown', function (e) {
                        if (e.which === 40) {
                            that.$selectableUl.focus();
                            return false;
                        }
                    });

                that.qs2 = $selectionSearch.quicksearch(selectionSearchString)
                    .on('keydown', function (e) {
                        if (e.which == 40) {
                            that.$selectionUl.focus();
                            return false;
                        }
                    });
            },

            afterSelect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setProjectVoters($(self.refs.selectBox).val());
            },

            afterDeselect: function (values) {
                this.qs1.cache();
                this.qs2.cache();
                self.setProjectVoters($(self.refs.selectBox).val());
            },
            cssClass: "fluid-size"
        });


    },

    refreshSelectBox: function () {
        $(this.refs.selectBox).multiSelect('refresh');
    },

    deselectAll: function () {
        $(this.refs.selectBox).multiSelect('deselect_all');
    },

    selectAll: function () {
        $(this.refs.selectBox).multiSelect('select_all');
    },

    setProjectVoters: function (selected) {
        var form = this.state.form;
        var unselected = [];

        if (selected != null) {
            form.data.projectVoters = selected;
            unselected = this.state.options.filter(function (item) {
                return selected.indexOf(item.pro_voter_id) == -1;
            });
        } else {
            form.data.projectVoters = [];
            unselected = this.state.options;
        }

        this.setState({ form: form, unselected: unselected });
    },

    setFormProp: function (e) {
        var form = this.state.form;
        form.data[e.target.name] = e.target.value;
        this.setState({ form: form });
    },

    setErrors: function (errors) {
        var form = this.state.form;
        form.errors = errors;
        this.setState({ form: form });
    },

    getError: function (field) {
        var errors = this.state.form.errors;
        for (var errorField in errors) {
            if (errorField == field)
                return errors[field];
        }

        return null;
    },

    getValidationState: function (field) {
        if (this.getError(field) != null)
            return "error";

        return null;
    },

    submit: function (e) {
        e.preventDefault();

        var self = this;
        var data = {
            proId: this.props.proId,
            electId: this.props.electId,
            startDate: $('#downloader_modal #start_date_input').val(),
            endDate: $('#downloader_modal #end_date_input').val(),
            municipalityNo: $('#downloader_modal #municipality_select2').val(),
            brgyNo: $('#downloader_modal #barangay_select2').val()
        };

        var lastResponseLength = false;

        self.requestPostUpdate = $.ajax({
            url: Routing.generate("ajax_post_updated_records"),
            type: "POST",
            data: data,
            xhrFields: {
                onprogress: function (e) {
                    var progressResponse;
                    var response = e.currentTarget.response;

                    if (lastResponseLength === false) {
                        progressResponse = response;
                        lastResponseLength = response.length;
                    }
                    else {
                        progressResponse = response.substring(lastResponseLength);
                        lastResponseLength = response.length;
                    }

                    self.setState({ progressValue: parseInt(progressResponse) });
                }
            }
        }).done(function (res) {
            console.log("data has been received");
            // self.props.notify("Data has been imported", "ruby");
            // self.props.onHide();
            // self.props.onSuccess();
        }).fail(function (err) {
            console.log('something went wrong');
            // self.props.notify("Opps!", "ruby");
            // self.setErrors(err.responseJSON)
        }).always(function () {
            self.setState({ isLoading: false, progressValue: 0 });
        });

        self.setState({ isLoading: true, progressValue: 0 });

        // var intervalHandle = setInterval(function(){
        // 	if(self.state.progressValue < 100){
        // 		var value = self.state.progressValue;
        // 		console.log('adding');
        // 		value += 1;
        // 		console.log(value);
        // 		self.setState({ progressValue : value });
        // 	}else{

        // 		console.log('reset');

        // 		self.setState({ progressValue : 0 , isLoading : false });
        // 		clearInterval(intervalHandle);
        // 	}

        // },500);

        // self.setState({ isLoading : true });

        // e.preventDefault();
        // var self = this;
        // var data = self.state.form.data;

        // self.requestTransmit = $.ajax({
        //     url : Routing.generate('ajax_post_updated_records'),
        //     type : 'POST',
        //     data : (data)
        // }).done(function(res){
        //     self.props.onHide();
        // }).fail(function(res){
        //     self.setErrors(res.responseJSON);
        // });
    },

    popupCenter: function (url, title, w, h) {
        // Fixes dual-screen position                         Most browsers      Firefox  
        var dualScreenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
        var dualScreenTop = window.screenTop != undefined ? window.screenTop : screen.top;
        var width = 0;
        var height = 0;

        width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
        height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

        var left = ((width / 2) - (w / 2)) + dualScreenLeft;
        var top = ((height / 2) - (h / 2)) + dualScreenTop;
        var newWindow = window.open(url, title, 'scrollbars=yes, width=' + w + ', height=' + h + ', top=' + top + ', left=' + left);

        // Puts focus on the newWindow  
        if (window.focus) {
            newWindow.focus();
        }
    },

    isEmpty: function (value) {
        return value == null || value == '';
    },

    render: function () {
        return (
            React.createElement(Modal, {enforceFocus: false, backdrop: "static", show: this.props.show, onHide: this.props.onHide}, 
                React.createElement(Modal.Header, {closeButton: true}, 
                    React.createElement(Modal.Title, null, "Downloader Modal")
                ), 

                React.createElement(Modal.Body, {bsClass: "modal-body overflow-auto"}, 
                    React.createElement("div", {id: "downloader_modal"}, 
                        React.createElement("form", null, 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("select", {id: "municipality_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("select", {id: "barangay_select2", className: "form-control form-filter input-sm"}
                                    )
                                )
                            ), 
                            React.createElement("div", {className: "row"}, 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("div", {className: "form-group"}, 
                                        React.createElement("label", {className: "control-label"}, "Start Date"), 
                                        React.createElement("input", {id: "start_date_input", className: "form-control form-control-inline", type: "date"})
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-6"}, 
                                    React.createElement("div", {className: "form-group"}, 
                                        React.createElement("label", {className: "control-label"}, "End Date"), 
                                        React.createElement("input", {id: "end_date_input", className: "form-control form-control-inline ", type: "date"})
                                    )
                                )
                            )
                        )
                    ), 
                    React.createElement("div", null, 

                        React.createElement("div", {className: "portlet box default"}, 
                            React.createElement("div", {className: "portlet-title"}, 
                                React.createElement("div", {className: "caption"}, 
                                    React.createElement("i", {className: "fa fa-picture"}), "Available data for download"), 
                                React.createElement("div", {className: "tools"}, 
                                    React.createElement("a", {href: "javascript:;", className: "collapse"}, " ")
                                )
                            ), 
                            React.createElement("div", {className: "portlet-body"}, 
                                React.createElement("div", {className: "table-scrollable"}, 
                                    React.createElement("table", {className: "table table-bordered table-condensed table-hover"}, 
                                        React.createElement("thead", null, 
                                            React.createElement("tr", null, 
                                                React.createElement("th", {className: "text-center"}, "Municipality"), 
                                                React.createElement("th", {className: "text-center"}, "BarangayName"), 
                                                React.createElement("th", {className: "text-center"}, "Total Items")
                                            )
                                        ), 
                                        React.createElement("tbody", null, 
                                            this.state.availableData.map((item) => {
                                                return (React.createElement("tr", null, 
                                                    React.createElement("td", {className: "text-center"}, item.municipality_name), 
                                                    React.createElement("td", {className: "text-center"}, item.barangay_name), 
                                                    React.createElement("td", {className: "text-center"}, item.total_items)
                                                ))
                                            })
                                        )
                                    )
                                )
                            )
                        )

                    ), 
                    React.createElement("form", {onSubmit: this.submit}, 

                        this.state.isLoading && (
                            React.createElement("div", {className: "progress"}, 
                                React.createElement("div", {className: "progress-bar", role: "progressbar", "aria-valuenow": this.state.progressValue, "aria-valuemin": "0", "aria-valuemax": "100", style: { width: this.state.progressValue + "%"}}, 
                                    React.createElement("span", null, " ", this.state.progressValue, " % Complete")
                                )
                            )
                        ), 

                        React.createElement("div", {className: "row"}, 
                            React.createElement("div", {className: "col-md-6 pull-left"}, 
                                React.createElement("button", {type: "button", style: { marginRight: "10px"}, onClick: this.loadAvailableData, className: "btn green-seagreen"}, "Check Available Data")
                            ), 
                            React.createElement("div", {className: " col-md-6 text-right "}, 
                                React.createElement("button", {type: "button", className: "btn btn-default", style: { marginRight: "10px"}, onClick: this.props.onHide}, "Cancel"), 
                                React.createElement("button", {type: "submit", className: "btn btn-primary"}, "Submit")
                            )
                        )
                    )
                )
            )
        );
    }
});


window.DataUpdaterModal = DataUpdaterModal;
var UpdateManager = React.createClass({displayName: "UpdateManager",
    getInitialState: function () {
        return {
            showUpdaterModal: false,
            user : null,
            filters : {
                proId : null,
                electId : null,
                provinceCode : null
            }
        };
    },

    notify: function (message, color) {
        $.notific8('zindex', 11500);
        $.notific8(message, {
            heading: 'System Message',
            color: color,
            life: 5000,
            verticalEdge: 'right',
            horizontalEdge: 'top',
        });
    },
    
    componentDidMount: function () {
        this.initSelect2();
        this.loadUser(window.userId);
    },

    loadUser: function (userId) {
        var self = this;

        self.requestUser = $.ajax({
            url: Routing.generate("ajax_get_user", { id: userId }),
            type: "GET"
        }).done(function (res) {
            self.setState({ user: res }, self.reinitSelect2);
        });
    },

    initSelect2: function () {
        var self = this;

        $("#update_manager_component #election_select2").select2({
            casesentitive: false,
            placeholder: "Select Election...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_elections'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.elect_id, text: item.elect_name };
                        })
                    };
                },
            }
        });

        $("#update_manager_component #project_select2").select2({
            casesentitive: false,
            placeholder: "Select Project...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_projects'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.pro_id, text: item.pro_name };
                        })
                    };
                },
            }
        });

        $("#update_manager_component #province_select2").select2({
            casesentitive: false,
            placeholder: "Enter Province...",
            allowClear: true,
            delay: 1500,
            width: '100%',
            containerCssClass: ':all:',
            ajax: {
                url: Routing.generate('ajax_select2_province'),
                data: function (params) {
                    return {
                        searchText: params.term
                    };
                },
                processResults: function (data, params) {
                    return {
                        results: data.map(function (item) {
                            return { id: item.province_code, text: item.name };
                        })
                    };
                },
            }
        });
       
        $("#update_manager_component #election_select2").on("change", function () {
            var filters = self.state.filters;
            filters.electId = $(this).val();
            self.setState({ filters : filters });
        });

        $("#update_manager_component #project_select2").on("change", function () {
            var filters = self.state.filters;
            filters.proId = $(this).val();
            self.setState({ filters: filters });
        });

        $("#voter_table #province_select2").on("change", function () {
            var filters = self.state.filters;
            filters.provinceCode = $(this).val();
            self.setState({ filters: filters });
        });
    },

    reinitSelect2: function () {
        var self = this;

        if (!self.isEmpty(self.state.user.project)) {
            var provinceCode = self.state.user.project.provinceCode;

            self.requestProvince = $.ajax({
                url: Routing.generate("ajax_get_province", { provinceCode: provinceCode }),
                type: "GET"
            }).done(function (res) {
                $("#update_manager_component #province_select2").empty()
                    .append($("<option/>")
                        .val(res.province_code)
                        .text(res.name))
                    .trigger("change");
            });

            self.requestProject = $.ajax({
                url: Routing.generate("ajax_get_project", { proId: self.state.user.project.proId }),
                type: "GET"
            }).done(function (res) {

                $("#update_manager_component #project_select2").empty()
                    .append($("<option/>")
                        .val(res.proId)
                        .text(res.proName))
                    .trigger("change");
            });
        }

        self.requestActiveElection = $.ajax({
            url: Routing.generate("ajax_get_active_election"),
            type: "GET"
        }).done(function (res) {
            $("#update_manager_component #election_select2").empty()
                .append($("<option/>")
                    .val(res.electId)
                    .text(res.electName))
                .trigger("change");
        });

        if (!self.state.user.isAdmin) {
            $("#update_manager_component #election_select2").attr('disabled', 'disabled');
            $("#update_manager_component #province_select2").attr('disabled', 'disabled');
            $("#update_manager_component #project_select2").attr('disabled', 'disabled');
        }

        //self.gridTable();
    },

    openUpdaterModal: function () {
        console.log("opening updater!");
        this.setState({ showUpdaterModal: true });
    },

    closeUpdaterModal: function () {
        this.setState({ showUpdaterModal: false });
    },
    
    isEmpty: function (value) {
        return value == null || value == "" || value == "undefined" || value <= 0;
    },

    reloadDatatable : function(){
        this.refs.importHeaderDatatable.reload();
    },
    
    render: function () {
        return (
            React.createElement("div", {className: "portlet light portlet-fit bordered", id: "update_manager_component"}, 
                React.createElement("div", {className: "portlet-body"}, 
                    /* Header Start */
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-5"}, 
                            React.createElement("div", null, React.createElement("h3", null, "Update Downloader")), 
                            React.createElement("button", {type: "button", onClick: this.openUpdaterModal, className: "btn btn-sm green"}, "Download Updates"), 
                            this.state.showUpdaterModal &&
                                React.createElement(DataUpdaterModal, {
                                    notify: this.notify, 
                                    show: this.state.showUpdaterModal, 
                                    onHide: this.closeUpdaterModal, 
                                    proId: this.state.filters.proId, 
                                    electId: this.state.filters.electId, 
                                    provinceCode: this.state.filters.provinceCode, 
                                    onSuccess: this.reloadDatatable}
                                )
                            
                        ), 

                        React.createElement("div", {className: "col-md-7"}, 
                            React.createElement("form", {onSubmit: this.onApplyCode}, 
                                React.createElement("div", {className: "col-md-3 col-md-offset-1"}, 
                                    React.createElement("select", {id: "election_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-4"}, 
                                    React.createElement("select", {id: "province_select2", className: "form-control form-filter input-sm"}
                                    )
                                ), 
                                React.createElement("div", {className: "col-md-4"}, 
                                    React.createElement("select", {id: "project_select2", className: "form-control form-filter input-sm"}
                                    )
                                )
                            )
                        )
                    ), 
                    /* Header End */ 

                    React.createElement("br", null), 

                    /* DataTable Start */ 
                    React.createElement("div", {className: "row"}, 
                        React.createElement("div", {className: "col-md-12"}, 
                            React.createElement(DataImportDatatable, {
                                proId: this.state.filters.proId, 
                                electId: this.state.filters.electId, 
                                ref: "importHeaderDatatable"}
                            )
                        )
                    )
                    /* DataTable End */ 
                )
            )
        )
    }
});

setTimeout(function () {
    ReactDOM.render(
        React.createElement(UpdateManager, null),
        document.getElementById('component-container')
    );
}, 500);
